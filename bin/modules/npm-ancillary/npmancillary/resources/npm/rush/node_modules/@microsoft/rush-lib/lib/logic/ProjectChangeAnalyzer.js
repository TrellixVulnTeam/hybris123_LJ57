"use strict";
// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.
// See LICENSE in the project root for license information.
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __await = (this && this.__await) || function (v) { return this instanceof __await ? (this.v = v, this) : new __await(v); }
var __asyncGenerator = (this && this.__asyncGenerator) || function (thisArg, _arguments, generator) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var g = generator.apply(thisArg, _arguments || []), i, q = [];
    return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }
    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
    function fulfill(value) { resume("next", value); }
    function reject(value) { resume("throw", value); }
    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ProjectChangeAnalyzer = void 0;
const path = __importStar(require("path"));
const crypto = __importStar(require("crypto"));
const ignore_1 = __importDefault(require("ignore"));
const package_deps_hash_1 = require("@rushstack/package-deps-hash");
const node_core_library_1 = require("@rushstack/node-core-library");
const RushProjectConfiguration_1 = require("../api/RushProjectConfiguration");
const Git_1 = require("./Git");
const BaseProjectShrinkwrapFile_1 = require("./base/BaseProjectShrinkwrapFile");
const RushConstants_1 = require("./RushConstants");
const Utilities_1 = require("../utilities/Utilities");
/**
 * @beta
 */
class ProjectChangeAnalyzer {
    constructor(rushConfiguration) {
        /**
         * UNINITIALIZED === we haven't looked
         * undefined === data isn't available (i.e. - git isn't present)
         */
        this._data = Utilities_1.UNINITIALIZED;
        this._filteredData = new Map();
        this._projectStateCache = new Map();
        this._rushConfiguration = rushConfiguration;
        this._git = new Git_1.Git(this._rushConfiguration);
    }
    /**
     * Try to get a list of the specified project's dependencies and their hashes.
     *
     * @remarks
     * If the data can't be generated (i.e. - if Git is not present) this returns undefined.
     *
     * @internal
     */
    async _tryGetProjectDependenciesAsync(projectName, terminal) {
        // Check the cache for any existing data
        const existingData = this._filteredData.get(projectName);
        if (existingData) {
            return existingData;
        }
        if (this._data === Utilities_1.UNINITIALIZED) {
            this._data = await this._getDataAsync(terminal);
        }
        if (this._data === undefined) {
            return undefined;
        }
        const project = this._rushConfiguration.getProjectByName(projectName);
        if (!project) {
            throw new Error(`Project "${projectName}" does not exist in the current Rush configuration.`);
        }
        const unfilteredProjectData = this._data.get(projectName);
        let filteredProjectData;
        const ignoreMatcher = await this._getIgnoreMatcherForProjectAsync(project, terminal);
        if (ignoreMatcher) {
            // At this point, `filePath` is guaranteed to start with `projectRelativeFolder`, so
            // we can safely slice off the first N characters to get the file path relative to the
            // root of the project.
            filteredProjectData = new Map();
            for (const [filePath, fileHash] of unfilteredProjectData) {
                const relativePath = filePath.slice(project.projectRelativeFolder.length + 1);
                if (!ignoreMatcher.ignores(relativePath)) {
                    // Add the file path to the filtered data if it is not ignored
                    filteredProjectData.set(filePath, fileHash);
                }
            }
        }
        else {
            filteredProjectData = unfilteredProjectData;
        }
        this._filteredData.set(projectName, filteredProjectData);
        return filteredProjectData;
    }
    /**
     * The project state hash is calculated in the following way:
     * - Project dependencies are collected (see ProjectChangeAnalyzer.getPackageDeps)
     *   - If project dependencies cannot be collected (i.e. - if Git isn't available),
     *     this function returns `undefined`
     * - The (path separator normalized) repo-root-relative dependencies' file paths are sorted
     * - A SHA1 hash is created and each (sorted) file path is fed into the hash and then its
     *   Git SHA is fed into the hash
     * - A hex digest of the hash is returned
     *
     * @internal
     */
    async _tryGetProjectStateHashAsync(projectName, terminal) {
        let projectState = this._projectStateCache.get(projectName);
        if (!projectState) {
            const packageDeps = await this._tryGetProjectDependenciesAsync(projectName, terminal);
            if (!packageDeps) {
                return undefined;
            }
            else {
                const sortedPackageDepsFiles = Array.from(packageDeps.keys()).sort();
                const hash = crypto.createHash('sha1');
                for (const packageDepsFile of sortedPackageDepsFiles) {
                    hash.update(packageDepsFile);
                    hash.update(RushConstants_1.RushConstants.hashDelimiter);
                    hash.update(packageDeps.get(packageDepsFile));
                    hash.update(RushConstants_1.RushConstants.hashDelimiter);
                }
                projectState = hash.digest('hex');
                this._projectStateCache.set(projectName, projectState);
            }
        }
        return projectState;
    }
    /**
     * Gets a list of projects that have changed in the current state of the repo
     * when compared to the specified branch.
     */
    getChangedProjectsAsync(options) {
        return __asyncGenerator(this, arguments, function* getChangedProjectsAsync_1() {
            const changedFolders = this._git.getChangedFolders(options.targetBranchName, options.terminal, options.shouldFetch);
            if (changedFolders) {
                const repoRootFolder = this._git.getRepositoryRootPath();
                for (const project of this._rushConfiguration.projects) {
                    const projectFolder = repoRootFolder
                        ? path.relative(repoRootFolder, project.projectFolder)
                        : project.projectRelativeFolder;
                    if (this._hasProjectChanged(changedFolders, projectFolder)) {
                        yield yield __await(project);
                    }
                }
            }
        });
    }
    _hasProjectChanged(changedFolders, projectFolder) {
        for (const folder of changedFolders) {
            if (node_core_library_1.Path.isUnderOrEqual(folder, projectFolder)) {
                return true;
            }
        }
        return false;
    }
    async _getDataAsync(terminal) {
        const repoDeps = this._getRepoDeps(terminal);
        if (!repoDeps) {
            return undefined;
        }
        const projectHashDeps = new Map();
        for (const project of this._rushConfiguration.projects) {
            projectHashDeps.set(project.packageName, new Map());
        }
        // Sort each project folder into its own package deps hash
        for (const [filePath, fileHash] of repoDeps) {
            // findProjectForPosixRelativePath uses LookupByPath, for which lookups are O(K)
            // K being the maximum folder depth of any project in rush.json (usually on the order of 3)
            const owningProject = this._rushConfiguration.findProjectForPosixRelativePath(filePath);
            if (owningProject) {
                const owningProjectHashDeps = projectHashDeps.get(owningProject.packageName);
                owningProjectHashDeps.set(filePath, fileHash);
            }
        }
        // Currently, only pnpm handles project shrinkwraps
        if (this._rushConfiguration.packageManager === 'pnpm') {
            const projects = [];
            const projectDependencyManifestPaths = [];
            for (const project of this._rushConfiguration.projects) {
                const projectShrinkwrapFilePath = BaseProjectShrinkwrapFile_1.BaseProjectShrinkwrapFile.getFilePathForProject(project);
                const relativeProjectShrinkwrapFilePath = node_core_library_1.Path.convertToSlashes(path.relative(this._rushConfiguration.rushJsonFolder, projectShrinkwrapFilePath));
                if (!node_core_library_1.FileSystem.exists(projectShrinkwrapFilePath)) {
                    throw new Error(`A project dependency file (${relativeProjectShrinkwrapFilePath}) is missing. You may need to run ` +
                        '"rush install" or "rush update".');
                }
                projects.push(project);
                projectDependencyManifestPaths.push(relativeProjectShrinkwrapFilePath);
            }
            const gitPath = this._git.getGitPathOrThrow();
            const hashes = (0, package_deps_hash_1.getGitHashForFiles)(projectDependencyManifestPaths, this._rushConfiguration.rushJsonFolder, gitPath);
            for (let i = 0; i < projects.length; i++) {
                const project = projects[i];
                const projectDependencyManifestPath = projectDependencyManifestPaths[i];
                if (!hashes.has(projectDependencyManifestPath)) {
                    throw new node_core_library_1.InternalError(`Expected to get a hash for ${projectDependencyManifestPath}`);
                }
                const hash = hashes.get(projectDependencyManifestPath);
                projectHashDeps.get(project.packageName).set(projectDependencyManifestPath, hash);
            }
        }
        else {
            // Determine the current variant from the link JSON.
            const variant = this._rushConfiguration.currentInstalledVariant;
            // Add the shrinkwrap file to every project's dependencies
            const shrinkwrapFile = node_core_library_1.Path.convertToSlashes(path.relative(this._rushConfiguration.rushJsonFolder, this._rushConfiguration.getCommittedShrinkwrapFilename(variant)));
            for (const project of this._rushConfiguration.projects) {
                const shrinkwrapHash = repoDeps.get(shrinkwrapFile);
                if (shrinkwrapHash) {
                    projectHashDeps.get(project.packageName).set(shrinkwrapFile, shrinkwrapHash);
                }
            }
        }
        return projectHashDeps;
    }
    async _getIgnoreMatcherForProjectAsync(project, terminal) {
        const projectConfiguration = await RushProjectConfiguration_1.RushProjectConfiguration.tryLoadForProjectAsync(project, undefined, terminal);
        if (projectConfiguration && projectConfiguration.incrementalBuildIgnoredGlobs) {
            const ignoreMatcher = (0, ignore_1.default)();
            ignoreMatcher.add(projectConfiguration.incrementalBuildIgnoredGlobs);
            return ignoreMatcher;
        }
    }
    _getRepoDeps(terminal) {
        try {
            if (this._git.isPathUnderGitWorkingTree()) {
                // Load the package deps hash for the whole repository
                const gitPath = this._git.getGitPathOrThrow();
                return (0, package_deps_hash_1.getPackageDeps)(this._rushConfiguration.rushJsonFolder, [], gitPath);
            }
            else {
                return undefined;
            }
        }
        catch (e) {
            // If getPackageDeps fails, don't fail the whole build. Treat this case as if we don't know anything about
            // the state of the files in the repo. This can happen if the environment doesn't have Git.
            terminal.writeWarningLine(`Error calculating the state of the repo. (inner error: ${e}). Continuing without diffing files.`);
            return undefined;
        }
    }
}
exports.ProjectChangeAnalyzer = ProjectChangeAnalyzer;
//# sourceMappingURL=ProjectChangeAnalyzer.js.map