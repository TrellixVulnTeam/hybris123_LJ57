import { ITerminal } from '@rushstack/node-core-library';
import { RushConfiguration } from '../api/RushConfiguration';
import { RushConfigurationProject } from '../api/RushConfigurationProject';
/**
 * @beta
 */
export interface IGetChangedProjectsOptions {
    targetBranchName: string;
    terminal: ITerminal;
    shouldFetch?: boolean;
}
/**
 * @beta
 */
export declare class ProjectChangeAnalyzer {
    /**
     * UNINITIALIZED === we haven't looked
     * undefined === data isn't available (i.e. - git isn't present)
     */
    private _data;
    private _filteredData;
    private _projectStateCache;
    private _rushConfiguration;
    private readonly _git;
    constructor(rushConfiguration: RushConfiguration);
    /**
     * Try to get a list of the specified project's dependencies and their hashes.
     *
     * @remarks
     * If the data can't be generated (i.e. - if Git is not present) this returns undefined.
     *
     * @internal
     */
    _tryGetProjectDependenciesAsync(projectName: string, terminal: ITerminal): Promise<Map<string, string> | undefined>;
    /**
     * The project state hash is calculated in the following way:
     * - Project dependencies are collected (see ProjectChangeAnalyzer.getPackageDeps)
     *   - If project dependencies cannot be collected (i.e. - if Git isn't available),
     *     this function returns `undefined`
     * - The (path separator normalized) repo-root-relative dependencies' file paths are sorted
     * - A SHA1 hash is created and each (sorted) file path is fed into the hash and then its
     *   Git SHA is fed into the hash
     * - A hex digest of the hash is returned
     *
     * @internal
     */
    _tryGetProjectStateHashAsync(projectName: string, terminal: ITerminal): Promise<string | undefined>;
    /**
     * Gets a list of projects that have changed in the current state of the repo
     * when compared to the specified branch.
     */
    getChangedProjectsAsync(options: IGetChangedProjectsOptions): AsyncIterable<RushConfigurationProject>;
    private _hasProjectChanged;
    private _getDataAsync;
    private _getIgnoreMatcherForProjectAsync;
    private _getRepoDeps;
}
//# sourceMappingURL=ProjectChangeAnalyzer.d.ts.map