{"version":3,"file":"ProjectBuilder.js","sourceRoot":"","sources":["../../../src/logic/taskRunner/ProjectBuilder.ts"],"names":[],"mappings":";AAAA,4FAA4F;AAC5F,2DAA2D;;;;;;;;;;;;;;;;;;;;;;AAG3D,2CAA6B;AAC7B,oEAUsC;AACtC,kDAO6B;AAC7B,gEAA8D;AAI9D,yDAAqE;AACrE,6CAA0C;AAC1C,2CAAwC;AAExC,+CAA6D;AAC7D,6DAA0D;AAC1D,uEAAoE;AAEpE,iFAAuG;AACvG,uFAAoF;AAEpF,oDAAiD;AAmBjD,SAAS,gBAAgB,CAAC,OAAmB,EAAE,OAAmB;IAChE,KAAK,MAAM,CAAC,IAAI,OAAO,EAAE;QACvB,IAAI,CAAC,CAAC,CAAC,IAAI,OAAO,CAAC,IAAI,OAAO,CAAC,CAAC,CAAC,KAAK,OAAO,CAAC,CAAC,CAAC,EAAE;YAChD,OAAO,KAAK,CAAC;SACd;KACF;IACD,KAAK,MAAM,CAAC,IAAI,OAAO,EAAE;QACvB,IAAI,CAAC,CAAC,CAAC,IAAI,OAAO,CAAC,EAAE;YACnB,OAAO,KAAK,CAAC;SACd;KACF;IACD,OAAO,IAAI,CAAC;AACd,CAAC;AAED;;;GAGG;AACH,MAAa,cAAe,SAAQ,yBAAW;IA2B7C,YAAmB,OAA+B;QAChD,KAAK,EAAE,CAAC;QAnBH,mBAAc,GAAY,KAAK,CAAC;QAYvC;;;WAGG;QACK,uBAAkB,GAAkD,yBAAa,CAAC;QAIxF,IAAI,CAAC,YAAY,GAAG,OAAO,CAAC,WAAW,CAAC;QACxC,IAAI,CAAC,kBAAkB,GAAG,OAAO,CAAC,iBAAiB,CAAC;QACpD,IAAI,CAAC,wBAAwB,GAAG,OAAO,CAAC,uBAAuB,CAAC;QAChE,IAAI,CAAC,YAAY,GAAG,OAAO,CAAC,WAAW,CAAC;QACxC,IAAI,CAAC,aAAa,GAAG,OAAO,CAAC,YAAY,CAAC;QAC1C,IAAI,CAAC,mBAAmB,GAAG,OAAO,CAAC,yBAAyB,CAAC;QAC7D,IAAI,CAAC,aAAa,GAAG,OAAO,CAAC,yBAAyB,CAAC;QACvD,IAAI,CAAC,sBAAsB,GAAG,OAAO,CAAC,qBAAqB,CAAC;QAC5D,IAAI,CAAC,oBAAoB,GAAG,OAAO,CAAC,mBAAmB,CAAC;QACxD,IAAI,CAAC,+BAA+B,GAAG,OAAO,CAAC,8BAA8B,IAAI,KAAK,CAAC;IACzF,CAAC;IAtCD,IAAW,IAAI;QACb,OAAO,cAAc,CAAC,WAAW,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;IACvD,CAAC;IAsCD;;;OAGG;IACI,MAAM,CAAC,WAAW,CAAC,WAAqC;QAC7D,OAAO,WAAW,CAAC,WAAW,CAAC;IACjC,CAAC;IAEM,KAAK,CAAC,YAAY,CAAC,OAAwB;QAChD,IAAI;YACF,IAAI,CAAC,IAAI,CAAC,aAAa,EAAE;gBACvB,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC;aAC5B;YACD,OAAO,MAAM,IAAI,CAAC,iBAAiB,CAAC,OAAO,CAAC,CAAC;SAC9C;QAAC,OAAO,KAAK,EAAE;YACd,MAAM,IAAI,qBAAS,CAAC,WAAW,EAAG,KAAe,CAAC,OAAO,CAAC,CAAC;SAC5D;IACH,CAAC;IAEM,KAAK,CAAC,uBAAuB,CAClC,QAAmB,EACnB,gBAAsC,EACtC,4BAAkE;QAElE,MAAM,iBAAiB,GAAkC,MAAM,IAAI,CAAC,0BAA0B,CAC5F,QAAQ,EACR,gBAAgB,EAChB,4BAA4B,CAC7B,CAAC;QACF,OAAO,iBAAiB,aAAjB,iBAAiB,uBAAjB,iBAAiB,CAAE,qBAAqB,CAAC,QAAQ,CAAC,CAAC;IAC5D,CAAC;IAEO,KAAK,CAAC,iBAAiB,CAAC,OAAwB;QACtD,qBAAqB;QACrB,EAAE;QACF,0EAA0E;QAC1E,gCAAgC;QAChC,2GAA2G;QAC3G,2DAA2D;QAC3D,8EAA8E;QAC9E,MAAM,kBAAkB,GAAuB,IAAI,uCAAkB,CACnE,IAAI,CAAC,YAAY,EACjB,OAAO,CAAC,cAAc,CAAC,QAAQ,CAChC,CAAC;QAEF,IAAI;YACF,MAAM,qBAAqB,GAA0B,IAAI,gCAAqB,CAAC;gBAC7E,WAAW,EAAE,kBAAkB;gBAC/B,YAAY,EAAE,IAAI;gBAClB,iBAAiB,sBAAuB;aACzC,CAAC,CAAC;YAEH,MAAM,kBAAkB,GAAsB,IAAI,4BAAiB,CAAC;gBAClE,YAAY,EAAE,CAAC,qBAAqB,EAAE,OAAO,CAAC,eAAe,CAAC;aAC/D,CAAC,CAAC;YAEH,MAAM,mBAAmB,GAAwB,IAAI,8BAAmB,CAAC;gBACvE,WAAW,EAAE,kBAAkB;gBAC/B,WAAW,eAAgB,CAAC,sBAAsB;aACnD,CAAC,CAAC;YAEH,MAAM,gBAAgB,GAA2B,IAAI,iCAAsB,CAAC;gBAC1E,WAAW,EAAE,OAAO,CAAC,cAAc;aACpC,CAAC,CAAC;YAEH,MAAM,kBAAkB,GAAsB,IAAI,4BAAiB,CAAC;gBAClE,YAAY,EAAE,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC,CAAC,gBAAgB,CAAC,CAAC,CAAC,OAAO,CAAC,cAAc,EAAE,mBAAmB,CAAC;aACnG,CAAC,CAAC;YAEH,MAAM,yBAAyB,GAA0B,IAAI,gCAAqB,CAAC;gBACjF,WAAW,EAAE,kBAAkB;gBAC/B,iBAAiB,eAAgB;gBACjC,kBAAkB,EAAE,IAAI;aACzB,CAAC,CAAC;YAEH,MAAM,gBAAgB,GAAqB,IAAI,kCAAgB,CAAC,yBAAyB,CAAC,CAAC;YAC3F,MAAM,gBAAgB,GAA6B,IAAI,mDAAwB,CAAC,gBAAgB,EAAE;gBAChG,YAAY,EAAE,OAAO,CAAC,SAAS;aAChC,CAAC,CAAC;YACH,MAAM,QAAQ,GAAa,IAAI,4BAAQ,CAAC,gBAAgB,CAAC,CAAC;YAE1D,IAAI,iBAAiB,GAAY,KAAK,CAAC;YACvC,MAAM,aAAa,GAAW,IAAI,CAAC,YAAY,CAAC,aAAa,CAAC;YAC9D,IAAI,oBAAoB,GAAkC,SAAS,CAAC;YAEpE,MAAM,eAAe,GAAW,IAAI,CAAC,IAAI,CACvC,IAAI,CAAC,YAAY,CAAC,qBAAqB,EACvC,IAAI,CAAC,oBAAoB,CAC1B,CAAC;YAEF,IAAI,8BAAU,CAAC,MAAM,CAAC,eAAe,CAAC,EAAE;gBACtC,IAAI;oBACF,oBAAoB,GAAG,4BAAQ,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC;iBACvD;gBAAC,OAAO,CAAC,EAAE;oBACV,mFAAmF;oBACnF,QAAQ,CAAC,gBAAgB,CACvB,0BAA0B,IAAI,CAAC,oBAAoB,KAAK,CAAC,iBAAiB;wBACxE,yBAAyB,IAAI,CAAC,aAAa,eAAe,CAC7D,CAAC;iBACH;aACF;YAED,IAAI,gBAA+C,CAAC;YACpD,IAAI,YAAkC,CAAC;YACvC,IAAI;gBACF,MAAM,UAAU,GACd,MAAM,IAAI,CAAC,sBAAsB,CAAC,+BAA+B,CAC/D,IAAI,CAAC,YAAY,CAAC,WAAW,EAC7B,QAAQ,CACT,CAAC;gBAEJ,IAAI,UAAU,EAAE;oBACd,MAAM,KAAK,GAAmC,EAAE,CAAC;oBACjD,YAAY,GAAG,EAAE,CAAC;oBAClB,KAAK,MAAM,CAAC,QAAQ,EAAE,QAAQ,CAAC,IAAI,UAAU,EAAE;wBAC7C,KAAK,CAAC,QAAQ,CAAC,GAAG,QAAQ,CAAC;wBAC3B,YAAY,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;qBAC7B;oBAED,gBAAgB,GAAG;wBACjB,KAAK;wBACL,SAAS,EAAE,IAAI,CAAC,aAAa;qBAC9B,CAAC;iBACH;qBAAM,IAAI,IAAI,CAAC,aAAa,EAAE;oBAC7B,0BAA0B;oBAC1B,2DAA2D;oBAC3D,QAAQ,CAAC,SAAS,CAAC;wBACjB,IAAI,EAAE,yBAAc,CAAC,SAAS,CAC5B,uDAAuD;4BACrD,6EAA6E,CAChF;wBACD,eAAe,EAAE,8BAAU,CAAC,IAAI;qBACjC,CAAC,CAAC;iBACJ;aACF;YAAC,OAAO,KAAK,EAAE;gBACd,0BAA0B;gBAC1B,uFAAuF;gBACvF,QAAQ,CAAC,SAAS,CAAC,+CAA+C,GAAI,KAAe,CAAC,QAAQ,EAAE,CAAC,CAAC;gBAClG,QAAQ,CAAC,SAAS,CAAC;oBACjB,IAAI,EAAE,6EAA6E;oBACnF,eAAe,EAAE,8BAAU,CAAC,IAAI;iBACjC,CAAC,CAAC;aACJ;YAED,6EAA6E;YAC7E,4EAA4E;YAC5E,gFAAgF;YAChF,mEAAmE;YACnE,EAAE;YACF,+EAA+E;YAC/E,0BAA0B;YAC1B,EAAE;YACF,2EAA2E;YAC3E,8EAA8E;YAC9E,oDAAoD;YACpD,EAAE;YACF,+EAA+E;YAC/E,8EAA8E;YAC9E,uDAAuD;YACvD,EAAE;YACF,IAAI,uBAAuB,GAAY,KAAK,CAAC;YAC7C,IAAI,IAAI,CAAC,mBAAmB,EAAE;gBAC5B,MAAM,iBAAiB,GAAkC,MAAM,IAAI,CAAC,0BAA0B,CAC5F,QAAQ,EACR,YAAY,EACZ,OAAO,CAAC,4BAA4B,CACrC,CAAC;gBAEF,uBAAuB,GAAG,CAAC,CAAC,iBAAiB,CAAC;gBAC9C,MAAM,uBAAuB,GAC3B,MAAM,CAAA,iBAAiB,aAAjB,iBAAiB,uBAAjB,iBAAiB,CAAE,wBAAwB,CAAC,QAAQ,CAAC,CAAA,CAAC;gBAE9D,IAAI,uBAAuB,EAAE;oBAC3B,OAAO,uBAAU,CAAC,SAAS,CAAC;iBAC7B;aACF;YACD,IAAI,IAAI,CAAC,aAAa,IAAI,CAAC,uBAAuB,EAAE;gBAClD,MAAM,kBAAkB,GAAY,CAAC,CAAC,CACpC,oBAAoB;oBACpB,gBAAgB;oBAChB,gBAAgB,CAAC,SAAS,KAAK,oBAAoB,CAAC,SAAS;oBAC7D,gBAAgB,CAAC,gBAAgB,CAAC,KAAK,EAAE,oBAAoB,CAAC,KAAK,CAAC,CACrE,CAAC;gBAEF,IAAI,kBAAkB,EAAE;oBACtB,OAAO,uBAAU,CAAC,OAAO,CAAC;iBAC3B;aACF;YAED,8DAA8D;YAC9D,8BAAU,CAAC,UAAU,CAAC,eAAe,CAAC,CAAC;YAEvC,kEAAkE;YAClE,MAAM,cAAc,GAAW,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,aAAa,EAAE,mBAAmB,CAAC,CAAC;YAC/F,sCAAsC;YACtC,8BAAU,CAAC,UAAU,CAAC,cAAc,CAAC,CAAC;YAEtC,IAAI,CAAC,IAAI,CAAC,aAAa,EAAE;gBACvB,yBAAyB;gBACzB,IAAI,gBAAgB,EAAE;oBACpB,4BAAQ,CAAC,IAAI,CAAC,gBAAgB,EAAE,eAAe,EAAE;wBAC/C,kBAAkB,EAAE,IAAI;qBACzB,CAAC,CAAC;iBACJ;gBAED,OAAO,uBAAU,CAAC,OAAO,CAAC;aAC3B;YAED,eAAe;YACf,QAAQ,CAAC,SAAS,CAAC,YAAY,GAAG,IAAI,CAAC,aAAa,CAAC,CAAC;YAEtD,MAAM,IAAI,GAA+B,qBAAS,CAAC,4BAA4B,CAAC,IAAI,CAAC,aAAa,EAAE;gBAClG,iBAAiB,EAAE,IAAI,CAAC,kBAAkB;gBAC1C,gBAAgB,EAAE,aAAa;gBAC/B,OAAO,EAAE,IAAI,CAAC,kBAAkB,CAAC,gBAAgB;gBACjD,YAAY,EAAE,IAAI;gBAClB,sBAAsB,EAAE;oBACtB,iBAAiB,EAAE,IAAI;iBACxB;aACF,CAAC,CAAC;YAEH,gEAAgE;YAChE,IAAI,IAAI,CAAC,MAAM,KAAK,IAAI,EAAE;gBACxB,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC,MAAM,EAAE,CAAC,IAAY,EAAE,EAAE;oBACtC,MAAM,IAAI,GAAW,IAAI,CAAC,QAAQ,EAAE,CAAC;oBACrC,gBAAgB,CAAC,UAAU,CAAC,EAAE,IAAI,EAAE,IAAI,kBAA0B,EAAE,CAAC,CAAC;gBACxE,CAAC,CAAC,CAAC;aACJ;YACD,IAAI,IAAI,CAAC,MAAM,KAAK,IAAI,EAAE;gBACxB,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC,MAAM,EAAE,CAAC,IAAY,EAAE,EAAE;oBACtC,MAAM,IAAI,GAAW,IAAI,CAAC,QAAQ,EAAE,CAAC;oBACrC,gBAAgB,CAAC,UAAU,CAAC,EAAE,IAAI,EAAE,IAAI,kBAA0B,EAAE,CAAC,CAAC;oBACtE,iBAAiB,GAAG,IAAI,CAAC;gBAC3B,CAAC,CAAC,CAAC;aACJ;YAED,IAAI,MAAM,GAAe,MAAM,IAAI,OAAO,CACxC,CAAC,OAAqC,EAAE,MAAkC,EAAE,EAAE;gBAC5E,IAAI,CAAC,EAAE,CAAC,OAAO,EAAE,CAAC,IAAY,EAAE,EAAE;oBAChC,IAAI;wBACF,IAAI,IAAI,KAAK,CAAC,EAAE;4BACd,MAAM,CAAC,IAAI,qBAAS,CAAC,OAAO,EAAE,wBAAwB,IAAI,EAAE,CAAC,CAAC,CAAC;yBAChE;6BAAM,IAAI,iBAAiB,EAAE;4BAC5B,OAAO,CAAC,uBAAU,CAAC,kBAAkB,CAAC,CAAC;yBACxC;6BAAM;4BACL,OAAO,CAAC,uBAAU,CAAC,OAAO,CAAC,CAAC;yBAC7B;qBACF;oBAAC,OAAO,KAAK,EAAE;wBACd,MAAM,CAAC,KAAkB,CAAC,CAAC;qBAC5B;gBACH,CAAC,CAAC,CAAC;YACL,CAAC,CACF,CAAC;YAEF,MAAM,gBAAgB,GACpB,MAAM,KAAK,uBAAU,CAAC,OAAO;gBAC7B,CAAC,MAAM,KAAK,uBAAU,CAAC,kBAAkB;oBACvC,IAAI,CAAC,+BAA+B;oBACpC,CAAC,CAAC,IAAI,CAAC,kBAAkB,CAAC,wBAAwB,CAAC,aAAa;yBAC7D,4CAA4C,CAAC,CAAC;YAErD,IAAI,gBAAgB,IAAI,gBAAgB,EAAE;gBACxC,yBAAyB;gBACzB,MAAM,wBAAwB,GAAqB,4BAAQ,CAAC,SAAS,CACnE,gBAAgB,EAChB,eAAe,EACf;oBACE,kBAAkB,EAAE,IAAI;iBACzB,CACF,CAAC;gBAEF,kFAAkF;gBAClF,8DAA8D;gBAC9D,MAAM,oBAAoB,GAAiC,IAAI,CAAC,uBAAuB,CACrF,QAAQ,EACR,YAAY,EACZ,OAAO,CAAC,4BAA4B,CACrC,CAAC;gBAEF,MAAM,CAAC,EAAE,iBAAiB,CAAC,GAAG,MAAM,OAAO,CAAC,GAAG,CAAC,CAAC,wBAAwB,EAAE,oBAAoB,CAAC,CAAC,CAAC;gBAElG,IAAI,gBAAgB,CAAC,SAAS,EAAE;oBAC9B,MAAM,GAAG,uBAAU,CAAC,OAAO,CAAC;iBAC7B;qBAAM,IAAI,iBAAiB,KAAK,KAAK,EAAE;oBACtC,MAAM,GAAG,uBAAU,CAAC,kBAAkB,CAAC;iBACxC;aACF;YAED,yBAAyB,CAAC,KAAK,EAAE,CAAC;YAElC,uFAAuF;YACvF,kCAAkC;YAClC,IAAI,kBAAkB,CAAC,MAAM,EAAE;gBAC7B,MAAM,IAAI,iCAAa,CAAC,uCAAuC,CAAC,CAAC;aAClE;YAED,OAAO,MAAM,CAAC;SACf;gBAAS;YACR,kBAAkB,CAAC,KAAK,EAAE,CAAC;SAC5B;IACH,CAAC;IAEO,KAAK,CAAC,0BAA0B,CACtC,QAAmB,EACnB,mBAAyC,EACzC,wBAA8D;;QAE9D,IAAI,IAAI,CAAC,kBAAkB,KAAK,yBAAa,EAAE;YAC7C,IAAI,CAAC,kBAAkB,GAAG,SAAS,CAAC;YAEpC,IAAI,IAAI,CAAC,wBAAwB,IAAI,IAAI,CAAC,wBAAwB,CAAC,iBAAiB,EAAE;gBACpF,MAAM,oBAAoB,GACxB,MAAM,mDAAwB,CAAC,sBAAsB,CACnD,IAAI,CAAC,YAAY,EACjB,wBAAwB,EACxB,QAAQ,CACT,CAAC;gBACJ,IAAI,oBAAoB,EAAE;oBACxB,IAAI,MAAA,oBAAoB,CAAC,YAAY,0CAAE,iBAAiB,EAAE;wBACxD,QAAQ,CAAC,gBAAgB,CAAC,6CAA6C,CAAC,CAAC;qBAC1E;yBAAM;wBACL,MAAM,cAAc,GAClB,oBAAoB,CAAC,YAAY,CAAC,wBAAwB,CAAC,GAAG,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;wBACpF,IAAI,cAAc,aAAd,cAAc,uBAAd,cAAc,CAAE,iBAAiB,EAAE;4BACrC,QAAQ,CAAC,gBAAgB,CACvB,iDAAiD,IAAI,CAAC,YAAY,YAAY,CAC/E,CAAC;yBACH;6BAAM;4BACL,IAAI,CAAC,kBAAkB,GAAG,MAAM,qCAAiB,CAAC,uBAAuB,CAAC;gCACxE,oBAAoB;gCACpB,uBAAuB,EAAE,IAAI,CAAC,wBAAwB;gCACtD,QAAQ;gCACR,OAAO,EAAE,IAAI,CAAC,aAAa;gCAC3B,mBAAmB,EAAE,mBAAmB;gCACxC,qBAAqB,EAAE,IAAI,CAAC,sBAAsB;6BACnD,CAAC,CAAC;yBACJ;qBACF;iBACF;qBAAM;oBACL,QAAQ,CAAC,gBAAgB,CACvB,2BAA2B,6BAAa,CAAC,yBAAyB,uBAAuB;wBACvF,2DAA2D,CAC9D,CAAC;iBACH;aACF;SACF;QAED,OAAO,IAAI,CAAC,kBAAkB,CAAC;IACjC,CAAC;CACF;AAtYD,wCAsYC;AAED;;;;;;;;;;;;;;;;;;;;;;;;GAwBG;AACH,SAAgB,wBAAwB,CAAC,OAAe;IACtD,6FAA6F;IAC7F,0CAA0C;IAC1C,MAAM,aAAa,GAAW,qBAAqB,CAAC;IAEpD,MAAM,KAAK,GAA4B,aAAa,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;IACnE,IAAI,KAAK,EAAE;QACT,8DAA8D;QAC9D,0BAA0B;QAC1B,gDAAgD;QAChD,MAAM,WAAW,GAAW,KAAK,CAAC,CAAC,CAAC,CAAC;QACrC,MAAM,SAAS,GAAW,KAAK,CAAC,CAAC,CAAC,CAAC;QAEnC,wEAAwE;QACxE,IAAI,WAAW,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE;YACjC,6DAA6D;YAC7D,+CAA+C;YAC/C,EAAE;YACF,2EAA2E;YAC3E,OAAO,wBAAI,CAAC,UAAU,CAAC,WAAW,EAAE,GAAG,EAAE,IAAI,CAAC,GAAG,SAAS,CAAC;SAC5D;KACF;IAED,wBAAwB;IACxB,OAAO,OAAO,CAAC;AACjB,CAAC;AAzBD,4DAyBC","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport * as child_process from 'child_process';\r\nimport * as path from 'path';\r\nimport {\r\n  JsonFile,\r\n  Text,\r\n  FileSystem,\r\n  JsonObject,\r\n  NewlineKind,\r\n  InternalError,\r\n  ITerminal,\r\n  Terminal,\r\n  ColorValue\r\n} from '@rushstack/node-core-library';\r\nimport {\r\n  TerminalChunkKind,\r\n  TextRewriterTransform,\r\n  StderrLineTransform,\r\n  SplitterTransform,\r\n  DiscardStdoutTransform,\r\n  PrintUtilities\r\n} from '@rushstack/terminal';\r\nimport { CollatedTerminal } from '@rushstack/stream-collator';\r\n\r\nimport { RushConfiguration } from '../../api/RushConfiguration';\r\nimport { RushConfigurationProject } from '../../api/RushConfigurationProject';\r\nimport { Utilities, UNINITIALIZED } from '../../utilities/Utilities';\r\nimport { TaskStatus } from './TaskStatus';\r\nimport { TaskError } from './TaskError';\r\nimport { ProjectChangeAnalyzer } from '../ProjectChangeAnalyzer';\r\nimport { BaseBuilder, IBuilderContext } from './BaseBuilder';\r\nimport { ProjectLogWritable } from './ProjectLogWritable';\r\nimport { ProjectBuildCache } from '../buildCache/ProjectBuildCache';\r\nimport { BuildCacheConfiguration } from '../../api/BuildCacheConfiguration';\r\nimport { ICacheOptionsForCommand, RushProjectConfiguration } from '../../api/RushProjectConfiguration';\r\nimport { CollatedTerminalProvider } from '../../utilities/CollatedTerminalProvider';\r\nimport { CommandLineConfiguration } from '../../api/CommandLineConfiguration';\r\nimport { RushConstants } from '../RushConstants';\r\n\r\nexport interface IProjectBuildDeps {\r\n  files: { [filePath: string]: string };\r\n  arguments: string;\r\n}\r\n\r\nexport interface IProjectBuilderOptions {\r\n  rushProject: RushConfigurationProject;\r\n  rushConfiguration: RushConfiguration;\r\n  buildCacheConfiguration: BuildCacheConfiguration | undefined;\r\n  commandToRun: string;\r\n  commandName: string;\r\n  isIncrementalBuildAllowed: boolean;\r\n  projectChangeAnalyzer: ProjectChangeAnalyzer;\r\n  packageDepsFilename: string;\r\n  allowWarningsInSuccessfulBuild?: boolean;\r\n}\r\n\r\nfunction _areShallowEqual(object1: JsonObject, object2: JsonObject): boolean {\r\n  for (const n in object1) {\r\n    if (!(n in object2) || object1[n] !== object2[n]) {\r\n      return false;\r\n    }\r\n  }\r\n  for (const n in object2) {\r\n    if (!(n in object1)) {\r\n      return false;\r\n    }\r\n  }\r\n  return true;\r\n}\r\n\r\n/**\r\n * A `BaseBuilder` subclass that builds a Rush project and updates its package-deps-hash\r\n * incremental state.\r\n */\r\nexport class ProjectBuilder extends BaseBuilder {\r\n  public get name(): string {\r\n    return ProjectBuilder.getTaskName(this._rushProject);\r\n  }\r\n\r\n  /**\r\n   * This property is mutated by TaskRunner, so is not readonly\r\n   */\r\n  public isSkipAllowed: boolean;\r\n  public hadEmptyScript: boolean = false;\r\n\r\n  private readonly _rushProject: RushConfigurationProject;\r\n  private readonly _rushConfiguration: RushConfiguration;\r\n  private readonly _buildCacheConfiguration: BuildCacheConfiguration | undefined;\r\n  private readonly _commandName: string;\r\n  private readonly _commandToRun: string;\r\n  private readonly _isCacheReadAllowed: boolean;\r\n  private readonly _projectChangeAnalyzer: ProjectChangeAnalyzer;\r\n  private readonly _packageDepsFilename: string;\r\n  private readonly _allowWarningsInSuccessfulBuild: boolean;\r\n\r\n  /**\r\n   * UNINITIALIZED === we haven't tried to initialize yet\r\n   * undefined === we didn't create one because the feature is not enabled\r\n   */\r\n  private _projectBuildCache: ProjectBuildCache | undefined | UNINITIALIZED = UNINITIALIZED;\r\n\r\n  public constructor(options: IProjectBuilderOptions) {\r\n    super();\r\n    this._rushProject = options.rushProject;\r\n    this._rushConfiguration = options.rushConfiguration;\r\n    this._buildCacheConfiguration = options.buildCacheConfiguration;\r\n    this._commandName = options.commandName;\r\n    this._commandToRun = options.commandToRun;\r\n    this._isCacheReadAllowed = options.isIncrementalBuildAllowed;\r\n    this.isSkipAllowed = options.isIncrementalBuildAllowed;\r\n    this._projectChangeAnalyzer = options.projectChangeAnalyzer;\r\n    this._packageDepsFilename = options.packageDepsFilename;\r\n    this._allowWarningsInSuccessfulBuild = options.allowWarningsInSuccessfulBuild || false;\r\n  }\r\n\r\n  /**\r\n   * A helper method to determine the task name of a ProjectBuilder. Used when the task\r\n   * name is required before a task is created.\r\n   */\r\n  public static getTaskName(rushProject: RushConfigurationProject): string {\r\n    return rushProject.packageName;\r\n  }\r\n\r\n  public async executeAsync(context: IBuilderContext): Promise<TaskStatus> {\r\n    try {\r\n      if (!this._commandToRun) {\r\n        this.hadEmptyScript = true;\r\n      }\r\n      return await this._executeTaskAsync(context);\r\n    } catch (error) {\r\n      throw new TaskError('executing', (error as Error).message);\r\n    }\r\n  }\r\n\r\n  public async tryWriteCacheEntryAsync(\r\n    terminal: ITerminal,\r\n    trackedFilePaths: string[] | undefined,\r\n    repoCommandLineConfiguration: CommandLineConfiguration | undefined\r\n  ): Promise<boolean | undefined> {\r\n    const projectBuildCache: ProjectBuildCache | undefined = await this._getProjectBuildCacheAsync(\r\n      terminal,\r\n      trackedFilePaths,\r\n      repoCommandLineConfiguration\r\n    );\r\n    return projectBuildCache?.trySetCacheEntryAsync(terminal);\r\n  }\r\n\r\n  private async _executeTaskAsync(context: IBuilderContext): Promise<TaskStatus> {\r\n    // TERMINAL PIPELINE:\r\n    //\r\n    //                             +--> quietModeTransform? --> collatedWriter\r\n    //                             |\r\n    // normalizeNewlineTransform --1--> stderrLineTransform --2--> removeColorsTransform --> projectLogWritable\r\n    //                                                        |\r\n    //                                                        +--> stdioSummarizer\r\n    const projectLogWritable: ProjectLogWritable = new ProjectLogWritable(\r\n      this._rushProject,\r\n      context.collatedWriter.terminal\r\n    );\r\n\r\n    try {\r\n      const removeColorsTransform: TextRewriterTransform = new TextRewriterTransform({\r\n        destination: projectLogWritable,\r\n        removeColors: true,\r\n        normalizeNewlines: NewlineKind.OsDefault\r\n      });\r\n\r\n      const splitterTransform2: SplitterTransform = new SplitterTransform({\r\n        destinations: [removeColorsTransform, context.stdioSummarizer]\r\n      });\r\n\r\n      const stderrLineTransform: StderrLineTransform = new StderrLineTransform({\r\n        destination: splitterTransform2,\r\n        newlineKind: NewlineKind.Lf // for StdioSummarizer\r\n      });\r\n\r\n      const discardTransform: DiscardStdoutTransform = new DiscardStdoutTransform({\r\n        destination: context.collatedWriter\r\n      });\r\n\r\n      const splitterTransform1: SplitterTransform = new SplitterTransform({\r\n        destinations: [context.quietMode ? discardTransform : context.collatedWriter, stderrLineTransform]\r\n      });\r\n\r\n      const normalizeNewlineTransform: TextRewriterTransform = new TextRewriterTransform({\r\n        destination: splitterTransform1,\r\n        normalizeNewlines: NewlineKind.Lf,\r\n        ensureNewlineAtEnd: true\r\n      });\r\n\r\n      const collatedTerminal: CollatedTerminal = new CollatedTerminal(normalizeNewlineTransform);\r\n      const terminalProvider: CollatedTerminalProvider = new CollatedTerminalProvider(collatedTerminal, {\r\n        debugEnabled: context.debugMode\r\n      });\r\n      const terminal: Terminal = new Terminal(terminalProvider);\r\n\r\n      let hasWarningOrError: boolean = false;\r\n      const projectFolder: string = this._rushProject.projectFolder;\r\n      let lastProjectBuildDeps: IProjectBuildDeps | undefined = undefined;\r\n\r\n      const currentDepsPath: string = path.join(\r\n        this._rushProject.projectRushTempFolder,\r\n        this._packageDepsFilename\r\n      );\r\n\r\n      if (FileSystem.exists(currentDepsPath)) {\r\n        try {\r\n          lastProjectBuildDeps = JsonFile.load(currentDepsPath);\r\n        } catch (e) {\r\n          // Warn and ignore - treat failing to load the file as the project being not built.\r\n          terminal.writeWarningLine(\r\n            `Warning: error parsing ${this._packageDepsFilename}: ${e}. Ignoring and ` +\r\n              `treating the command \"${this._commandToRun}\" as not run.`\r\n          );\r\n        }\r\n      }\r\n\r\n      let projectBuildDeps: IProjectBuildDeps | undefined;\r\n      let trackedFiles: string[] | undefined;\r\n      try {\r\n        const fileHashes: Map<string, string> | undefined =\r\n          await this._projectChangeAnalyzer._tryGetProjectDependenciesAsync(\r\n            this._rushProject.packageName,\r\n            terminal\r\n          );\r\n\r\n        if (fileHashes) {\r\n          const files: { [filePath: string]: string } = {};\r\n          trackedFiles = [];\r\n          for (const [filePath, fileHash] of fileHashes) {\r\n            files[filePath] = fileHash;\r\n            trackedFiles.push(filePath);\r\n          }\r\n\r\n          projectBuildDeps = {\r\n            files,\r\n            arguments: this._commandToRun\r\n          };\r\n        } else if (this.isSkipAllowed) {\r\n          // To test this code path:\r\n          // Remove the `.git` folder then run \"rush build --verbose\"\r\n          terminal.writeLine({\r\n            text: PrintUtilities.wrapWords(\r\n              'This workspace does not appear to be tracked by Git. ' +\r\n                'Rush will proceed without incremental build, caching, and change detection.'\r\n            ),\r\n            foregroundColor: ColorValue.Cyan\r\n          });\r\n        }\r\n      } catch (error) {\r\n        // To test this code path:\r\n        // Delete a project's \".rush/temp/shrinkwrap-deps.json\" then run \"rush build --verbose\"\r\n        terminal.writeLine('Unable to calculate incremental build state: ' + (error as Error).toString());\r\n        terminal.writeLine({\r\n          text: 'Rush will proceed without incremental build, caching, and change detection.',\r\n          foregroundColor: ColorValue.Cyan\r\n        });\r\n      }\r\n\r\n      // If possible, we want to skip this build -- either by restoring it from the\r\n      // build cache, if build caching is enabled, or determining that the project\r\n      // is unchanged (using the older incremental build logic). These two approaches,\r\n      // \"caching\" and \"skipping\", are incompatible, so only one applies.\r\n      //\r\n      // Note that \"build caching\" and \"build skipping\" take two different approaches\r\n      // to tracking dependents:\r\n      //\r\n      //   - For build caching, \"isCacheReadAllowed\" is set if a project supports\r\n      //     incremental builds, and determining whether this project or a dependent\r\n      //     has changed happens inside the hashing logic.\r\n      //\r\n      //   - For build skipping, \"isSkipAllowed\" is set to true initially, and during\r\n      //     the process of building dependents, it will be changed by TaskRunner to\r\n      //     false if a dependency wasn't able to be skipped.\r\n      //\r\n      let buildCacheReadAttempted: boolean = false;\r\n      if (this._isCacheReadAllowed) {\r\n        const projectBuildCache: ProjectBuildCache | undefined = await this._getProjectBuildCacheAsync(\r\n          terminal,\r\n          trackedFiles,\r\n          context.repoCommandLineConfiguration\r\n        );\r\n\r\n        buildCacheReadAttempted = !!projectBuildCache;\r\n        const restoreFromCacheSuccess: boolean | undefined =\r\n          await projectBuildCache?.tryRestoreFromCacheAsync(terminal);\r\n\r\n        if (restoreFromCacheSuccess) {\r\n          return TaskStatus.FromCache;\r\n        }\r\n      }\r\n      if (this.isSkipAllowed && !buildCacheReadAttempted) {\r\n        const isPackageUnchanged: boolean = !!(\r\n          lastProjectBuildDeps &&\r\n          projectBuildDeps &&\r\n          projectBuildDeps.arguments === lastProjectBuildDeps.arguments &&\r\n          _areShallowEqual(projectBuildDeps.files, lastProjectBuildDeps.files)\r\n        );\r\n\r\n        if (isPackageUnchanged) {\r\n          return TaskStatus.Skipped;\r\n        }\r\n      }\r\n\r\n      // If the deps file exists, remove it before starting a build.\r\n      FileSystem.deleteFile(currentDepsPath);\r\n\r\n      // TODO: Remove legacyDepsPath with the next major release of Rush\r\n      const legacyDepsPath: string = path.join(this._rushProject.projectFolder, 'package-deps.json');\r\n      // Delete the legacy package-deps.json\r\n      FileSystem.deleteFile(legacyDepsPath);\r\n\r\n      if (!this._commandToRun) {\r\n        // Write deps on success.\r\n        if (projectBuildDeps) {\r\n          JsonFile.save(projectBuildDeps, currentDepsPath, {\r\n            ensureFolderExists: true\r\n          });\r\n        }\r\n\r\n        return TaskStatus.Success;\r\n      }\r\n\r\n      // Run the task\r\n      terminal.writeLine('Invoking: ' + this._commandToRun);\r\n\r\n      const task: child_process.ChildProcess = Utilities.executeLifecycleCommandAsync(this._commandToRun, {\r\n        rushConfiguration: this._rushConfiguration,\r\n        workingDirectory: projectFolder,\r\n        initCwd: this._rushConfiguration.commonTempFolder,\r\n        handleOutput: true,\r\n        environmentPathOptions: {\r\n          includeProjectBin: true\r\n        }\r\n      });\r\n\r\n      // Hook into events, in order to get live streaming of build log\r\n      if (task.stdout !== null) {\r\n        task.stdout.on('data', (data: Buffer) => {\r\n          const text: string = data.toString();\r\n          collatedTerminal.writeChunk({ text, kind: TerminalChunkKind.Stdout });\r\n        });\r\n      }\r\n      if (task.stderr !== null) {\r\n        task.stderr.on('data', (data: Buffer) => {\r\n          const text: string = data.toString();\r\n          collatedTerminal.writeChunk({ text, kind: TerminalChunkKind.Stderr });\r\n          hasWarningOrError = true;\r\n        });\r\n      }\r\n\r\n      let status: TaskStatus = await new Promise(\r\n        (resolve: (status: TaskStatus) => void, reject: (error: TaskError) => void) => {\r\n          task.on('close', (code: number) => {\r\n            try {\r\n              if (code !== 0) {\r\n                reject(new TaskError('error', `Returned error code: ${code}`));\r\n              } else if (hasWarningOrError) {\r\n                resolve(TaskStatus.SuccessWithWarning);\r\n              } else {\r\n                resolve(TaskStatus.Success);\r\n              }\r\n            } catch (error) {\r\n              reject(error as TaskError);\r\n            }\r\n          });\r\n        }\r\n      );\r\n\r\n      const taskIsSuccessful: boolean =\r\n        status === TaskStatus.Success ||\r\n        (status === TaskStatus.SuccessWithWarning &&\r\n          this._allowWarningsInSuccessfulBuild &&\r\n          !!this._rushConfiguration.experimentsConfiguration.configuration\r\n            .buildCacheWithAllowWarningsInSuccessfulBuild);\r\n\r\n      if (taskIsSuccessful && projectBuildDeps) {\r\n        // Write deps on success.\r\n        const writeProjectStatePromise: Promise<boolean> = JsonFile.saveAsync(\r\n          projectBuildDeps,\r\n          currentDepsPath,\r\n          {\r\n            ensureFolderExists: true\r\n          }\r\n        );\r\n\r\n        // If the command is successful and we can calculate project hash, we will write a\r\n        // new cache entry even if incremental builds are not allowed.\r\n        const setCacheEntryPromise: Promise<boolean | undefined> = this.tryWriteCacheEntryAsync(\r\n          terminal,\r\n          trackedFiles,\r\n          context.repoCommandLineConfiguration\r\n        );\r\n\r\n        const [, cacheWriteSuccess] = await Promise.all([writeProjectStatePromise, setCacheEntryPromise]);\r\n\r\n        if (terminalProvider.hasErrors) {\r\n          status = TaskStatus.Failure;\r\n        } else if (cacheWriteSuccess === false) {\r\n          status = TaskStatus.SuccessWithWarning;\r\n        }\r\n      }\r\n\r\n      normalizeNewlineTransform.close();\r\n\r\n      // If the pipeline is wired up correctly, then closing normalizeNewlineTransform should\r\n      // have closed projectLogWritable.\r\n      if (projectLogWritable.isOpen) {\r\n        throw new InternalError('The output file handle was not closed');\r\n      }\r\n\r\n      return status;\r\n    } finally {\r\n      projectLogWritable.close();\r\n    }\r\n  }\r\n\r\n  private async _getProjectBuildCacheAsync(\r\n    terminal: ITerminal,\r\n    trackedProjectFiles: string[] | undefined,\r\n    commandLineConfiguration: CommandLineConfiguration | undefined\r\n  ): Promise<ProjectBuildCache | undefined> {\r\n    if (this._projectBuildCache === UNINITIALIZED) {\r\n      this._projectBuildCache = undefined;\r\n\r\n      if (this._buildCacheConfiguration && this._buildCacheConfiguration.buildCacheEnabled) {\r\n        const projectConfiguration: RushProjectConfiguration | undefined =\r\n          await RushProjectConfiguration.tryLoadForProjectAsync(\r\n            this._rushProject,\r\n            commandLineConfiguration,\r\n            terminal\r\n          );\r\n        if (projectConfiguration) {\r\n          if (projectConfiguration.cacheOptions?.disableBuildCache) {\r\n            terminal.writeVerboseLine('Caching has been disabled for this project.');\r\n          } else {\r\n            const commandOptions: ICacheOptionsForCommand | undefined =\r\n              projectConfiguration.cacheOptions.optionsForCommandsByName.get(this._commandName);\r\n            if (commandOptions?.disableBuildCache) {\r\n              terminal.writeVerboseLine(\r\n                `Caching has been disabled for this project's \"${this._commandName}\" command.`\r\n              );\r\n            } else {\r\n              this._projectBuildCache = await ProjectBuildCache.tryGetProjectBuildCache({\r\n                projectConfiguration,\r\n                buildCacheConfiguration: this._buildCacheConfiguration,\r\n                terminal,\r\n                command: this._commandToRun,\r\n                trackedProjectFiles: trackedProjectFiles,\r\n                projectChangeAnalyzer: this._projectChangeAnalyzer\r\n              });\r\n            }\r\n          }\r\n        } else {\r\n          terminal.writeVerboseLine(\r\n            `Project does not have a ${RushConstants.rushProjectConfigFilename} configuration file, ` +\r\n              'or one provided by a rig, so it does not support caching.'\r\n          );\r\n        }\r\n      }\r\n    }\r\n\r\n    return this._projectBuildCache;\r\n  }\r\n}\r\n\r\n/**\r\n * When running a command from the \"scripts\" block in package.json, if the command\r\n * contains Unix-style path slashes and the OS is Windows, the package managers will\r\n * convert slashes to backslashes.  This is a complicated undertaking.  For example, they\r\n * need to convert \"node_modules/bin/this && ./scripts/that --name keep/this\"\r\n * to \"node_modules\\bin\\this && .\\scripts\\that --name keep/this\", and they don't want to\r\n * convert ANY of the slashes in \"cmd.exe /c echo a/b\".  NPM and PNPM use npm-lifecycle for this,\r\n * but it unfortunately has a dependency on the entire node-gyp kitchen sink.  Yarn has a\r\n * simplified implementation in fix-cmd-win-slashes.js, but it's not exposed as a library.\r\n *\r\n * Fundamentally NPM's whole feature seems misguided:  They start by inviting people to write\r\n * shell scripts that will be executed by wildly different shell languages (e.g. cmd.exe and Bash).\r\n * It's very tricky for a developer to guess what's safe to do without testing every OS.\r\n * Even simple path separators are not portable, so NPM added heuristics to figure out which\r\n * slashes are part of a path or not, and convert them.  These workarounds end up having tons\r\n * of special cases.  They probably could have implemented their own entire minimal cross-platform\r\n * shell language with less code and less confusion than npm-lifecycle's approach.\r\n *\r\n * We've deprecated shell operators inside package.json.  Instead, we advise people to move their\r\n * scripts into conventional script files, and put only a file path in package.json.  So, for\r\n * Rush's workaround here, we really only care about supporting the small set of cases seen in the\r\n * unit tests.  For anything that doesn't fit those patterns, we leave the string untouched\r\n * (i.e. err on the side of not breaking anything).  We could revisit this later if someone\r\n * complains about it, but so far nobody has.  :-)\r\n */\r\nexport function convertSlashesForWindows(command: string): string {\r\n  // The first group will match everything up to the first space, \"&\", \"|\", \"<\", \">\", or quote.\r\n  // The second group matches the remainder.\r\n  const commandRegExp: RegExp = /^([^\\s&|<>\"]+)(.*)$/;\r\n\r\n  const match: RegExpMatchArray | null = commandRegExp.exec(command);\r\n  if (match) {\r\n    // Example input: \"bin/blarg --path ./config/blah.json && a/b\"\r\n    // commandPart=\"bin/blarg\"\r\n    // remainder=\" --path ./config/blah.json && a/b\"\r\n    const commandPart: string = match[1];\r\n    const remainder: string = match[2];\r\n\r\n    // If the command part already contains a backslash, then leave it alone\r\n    if (commandPart.indexOf('\\\\') < 0) {\r\n      // Replace all the slashes with backslashes, e.g. to produce:\r\n      // \"bin\\blarg --path ./config/blah.json && a/b\"\r\n      //\r\n      // NOTE: we don't attempt to process the path parameter or stuff after \"&&\"\r\n      return Text.replaceAll(commandPart, '/', '\\\\') + remainder;\r\n    }\r\n  }\r\n\r\n  // Don't change anything\r\n  return command;\r\n}\r\n"]}