{"version":3,"file":"CollatedTerminalProvider.js","sourceRoot":"","sources":["../../src/utilities/CollatedTerminalProvider.ts"],"names":[],"mappings":";AAAA,4FAA4F;AAC5F,2DAA2D;;;AAE3D,oEAA2F;AAO3F,MAAa,wBAAwB;IAiBnC,YACE,gBAAkC,EAClC,OAAmD;QAjB7C,eAAU,GAAY,KAAK,CAAC;QAC5B,iBAAY,GAAY,KAAK,CAAC;QAC9B,kBAAa,GAAY,KAAK,CAAC;QAEvB,kBAAa,GAAY,IAAI,CAAC;QAC9B,iBAAY,GAAW,IAAI,CAAC;QAc1C,IAAI,CAAC,iBAAiB,GAAG,gBAAgB,CAAC;QAC1C,IAAI,CAAC,aAAa,GAAG,CAAC,CAAC,CAAA,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,YAAY,CAAA,CAAC;IAC/C,CAAC;IAdD,IAAW,SAAS;QAClB,OAAO,IAAI,CAAC,UAAU,CAAC;IACzB,CAAC;IAED,IAAW,WAAW;QACpB,OAAO,IAAI,CAAC,YAAY,CAAC;IAC3B,CAAC;IAUM,KAAK,CAAC,IAAY,EAAE,QAAkC;QAC3D,QAAQ,QAAQ,EAAE;YAChB,KAAK,4CAAwB,CAAC,GAAG,CAAC;YAClC,KAAK,4CAAwB,CAAC,OAAO,CAAC,CAAC;gBACrC,+EAA+E;gBAC/E,6EAA6E;gBAC7E,wFAAwF;gBACxF,IAAI,CAAC,iBAAiB,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC;gBAC7C,MAAM;aACP;YAED,KAAK,4CAAwB,CAAC,KAAK,CAAC,CAAC;gBACnC,6EAA6E;gBAC7E,sCAAsC;gBACtC,IAAI,IAAI,CAAC,aAAa,EAAE;oBACtB,IAAI,CAAC,iBAAiB,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC;iBAC9C;gBACD,MAAM;aACP;YAED,KAAK,4CAAwB,CAAC,KAAK,CAAC,CAAC;gBACnC,IAAI,CAAC,iBAAiB,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC;gBAC7C,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC;gBACvB,MAAM;aACP;YAED,KAAK,4CAAwB,CAAC,OAAO,CAAC,CAAC;gBACrC,IAAI,CAAC,iBAAiB,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC;gBAC7C,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC;gBACzB,MAAM;aACP;YAED,OAAO,CAAC,CAAC;gBACP,MAAM,IAAI,KAAK,CAAC,wBAAwB,QAAQ,EAAE,CAAC,CAAC;aACrD;SACF;IACH,CAAC;CACF;AA9DD,4DA8DC","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport { ITerminalProvider, TerminalProviderSeverity } from '@rushstack/node-core-library';\r\nimport { CollatedTerminal } from '@rushstack/stream-collator';\r\n\r\nexport interface ICollatedTerminalProviderOptions {\r\n  debugEnabled: boolean;\r\n}\r\n\r\nexport class CollatedTerminalProvider implements ITerminalProvider {\r\n  private readonly _collatedTerminal: CollatedTerminal;\r\n  private _hasErrors: boolean = false;\r\n  private _hasWarnings: boolean = false;\r\n  private _debugEnabled: boolean = false;\r\n\r\n  public readonly supportsColor: boolean = true;\r\n  public readonly eolCharacter: string = '\\n';\r\n\r\n  public get hasErrors(): boolean {\r\n    return this._hasErrors;\r\n  }\r\n\r\n  public get hasWarnings(): boolean {\r\n    return this._hasWarnings;\r\n  }\r\n\r\n  public constructor(\r\n    collatedTerminal: CollatedTerminal,\r\n    options?: Partial<ICollatedTerminalProviderOptions>\r\n  ) {\r\n    this._collatedTerminal = collatedTerminal;\r\n    this._debugEnabled = !!options?.debugEnabled;\r\n  }\r\n\r\n  public write(data: string, severity: TerminalProviderSeverity): void {\r\n    switch (severity) {\r\n      case TerminalProviderSeverity.log:\r\n      case TerminalProviderSeverity.verbose: {\r\n        // Unlike the basic ConsoleTerminalProvider, verbose messages are always passed\r\n        // to stdout -- by convention the user-controlled build script output is sent\r\n        // to verbose, and will be routed to a variety of other providers in the ProjectBuilder.\r\n        this._collatedTerminal.writeStdoutLine(data);\r\n        break;\r\n      }\r\n\r\n      case TerminalProviderSeverity.debug: {\r\n        // Similar to the basic ConsoleTerminalProvider, debug messages are discarded\r\n        // unless they are explicitly enabled.\r\n        if (this._debugEnabled) {\r\n          this._collatedTerminal.writeStdoutLine(data);\r\n        }\r\n        break;\r\n      }\r\n\r\n      case TerminalProviderSeverity.error: {\r\n        this._collatedTerminal.writeStderrLine(data);\r\n        this._hasErrors = true;\r\n        break;\r\n      }\r\n\r\n      case TerminalProviderSeverity.warning: {\r\n        this._collatedTerminal.writeStderrLine(data);\r\n        this._hasWarnings = true;\r\n        break;\r\n      }\r\n\r\n      default: {\r\n        throw new Error(`Unexpected severity: ${severity}`);\r\n      }\r\n    }\r\n  }\r\n}\r\n"]}