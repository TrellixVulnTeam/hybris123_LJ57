<?xml version="1.0" encoding="UTF-8"?>
<!--
 Copyright (c) 2020 SAP SE or an SAP affiliate company. All rights reserved.
-->
<!-- WARNING: This is the Spring WEB configuration file. If you want to replace items or managers you have to do this from the extensions 
	core configuration file (subscribedproducttmfwebservices/resources/subscribedproducttmfwebservices-spring.xml) -->

<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
           http://www.springframework.org/schema/beans/spring-beans.xsd
           http://www.springframework.org/schema/context
			  http://www.springframework.org/schema/context/spring-context.xsd">

	<context:annotation-config/>

	<import resource="config/commons/cache-config-spring.xml"/>
	<import resource="config/commons/security-spring.xml"/>
	<import resource="config/commons/error-config-spring.xml"/>
	<import resource="config/commons/field-mapping-spring.xml"/>
	<import resource="config/v1-web-spring.xml"/>

	<bean id="objectMapper" name="objectMapper"
		  class="com.fasterxml.jackson.databind.ObjectMapper" />

	<bean id="messageSource" class="org.springframework.context.support.ReloadableResourceBundleMessageSource">
		<property name="basenames">
			<list>
				<value>/WEB-INF/messages/messages</value>
			</list>
		</property>
		<property name="defaultEncoding" value="UTF-8" />
	</bean>

	<!-- Spring managed FilterChain for hybris Filter stack -->
	<bean id="subscribedproducttmfwebservicesPlatformFilterChain" class="de.hybris.platform.servicelayer.web.PlatformFilterChain">
		<constructor-arg>
			<list>
				<!-- Filter that catches and resolves exceptions thrown from other filters. Can be uncommented if you need such functionality -->
				<!-- <ref bean="exceptionTranslationFilter" /> -->

				<ref bean="log4jFilter" />
				<ref bean="tenantActivationFilter" />
				<ref bean="corsFilter" />
				<!-- This filter creates new jalo session and close it after request is handled. -->
				<ref bean="restSessionFilter" />
				<!-- If you want to track user session:
					- uncomment filter below
					- comment or remove restSessionFilter above
					- comment or remove SessionHindingRequestFilter in web.xml -->
				<!-- ref bean="sessionFilter" /-->

                <!-- Security -->
                <ref bean="springSecurityFilterChain"/>
                <!-- Other -->
                <ref bean="spiSessionAttributesFilter"/>
            </list>
        </constructor-arg>
    </bean>

    <bean id="restSessionFilter" class="de.hybris.platform.webservicescommons.filter.RestSessionFilter">
        <property name="sessionService" ref="sessionService"/>
    </bean>

    <!-- Filter that catches and resolves exceptions thrown from other filters. Can be added to filter chain if you need such functionality -->
    <alias alias="exceptionTranslationFilter" name="defaultExceptionTranslationFilter"/>
    <bean id="defaultExceptionTranslationFilter" class="de.hybris.platform.webservicescommons.filter.ExceptionTranslationFilter">
        <property name="restHandlerExceptionResolver" ref="restHandlerExceptionResolver"/>
    </bean>

    <alias name="defaultUserValidator" alias="userValidator"/>
    <bean id="defaultUserValidator" class="de.hybris.platform.subscribedproducttmfwebservices.v1.security.SpiUserValidator">
        <constructor-arg name="userService" ref="userService"/>
        <constructor-arg name="productService" ref="spiProductService"/>
    </bean>

    <bean id="spiSessionAttributesFilter"
          class="de.hybris.platform.subscribedproducttmfwebservices.filters.SpiSessionAttributesFilter">
        <constructor-arg name="contextInformationLoader" ref="spiWsContextInformationLoader"/>
    </bean>

    <alias name="defaultWsContextInformationLoader" alias="spiWsContextInformationLoader"/>
    <bean id="defaultWsContextInformationLoader"
          class="de.hybris.platform.subscribedproducttmfwebservices.context.impl.SpiDefaultContextInformationLoader">
        <constructor-arg name="commonI18NService" ref="commonI18NService"/>
        <constructor-arg name="commerceCommonI18NService" ref="commerceCommonI18NService"/>
    </bean>

    <!-- Event Validators-->
    <alias name="defaultSpiCreateEventValidator" alias="spiCreateEventValidator"/>
    <bean id="defaultSpiCreateEventValidator"
          class="de.hybris.platform.subscribedproducttmfwebservices.v1.validators.SpiCreateEventValidator">
        <constructor-arg name="spiGenericService" ref="spiGenericService"/>
    </bean>

    <alias name="defaultSpiUpdateEventValidator" alias="spiUpdateEventValidator"/>
    <bean id="defaultSpiUpdateEventValidator"
          class="de.hybris.platform.subscribedproducttmfwebservices.v1.validators.SpiUpdateEventValidator"/>

    <alias name="defaultSpiStateChangeEventValidator" alias="spiStateChangeEventValidator"/>
    <bean id="defaultSpiStateChangeEventValidator"
          class="de.hybris.platform.subscribedproducttmfwebservices.v1.validators.SpiStateChangeEventValidator"/>

    <alias name="defaultSpiDeleteEventValidator" alias="spiDeleteEventValidator"/>
    <bean id="defaultSpiDeleteEventValidator"
          class="de.hybris.platform.subscribedproducttmfwebservices.v1.validators.SpiDeleteEventValidator"/>

    <alias name="defaultSpiCreateProductValidator" alias="spiCreateProductValidator"/>
    <bean id="defaultSpiCreateProductValidator"
          class="de.hybris.platform.subscribedproducttmfwebservices.v1.validators.SpiCreateProductValidator">
        <constructor-arg name="spiGenericService" ref="spiGenericService"/>
    </bean>
</beans>
