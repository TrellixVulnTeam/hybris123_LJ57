<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!--
 Copyright (c) 2019 SAP SE or an SAP affiliate company. All rights reserved.
-->
<!--
 All hybris buildcallbacks.xml macrodefinitions:
 
 Build/Documentation
 
	 before/after ant macro "clean"
		 <macrodef name="b2ctelcoaddon_before_clean"/>
		 <macrodef name="b2ctelcoaddon_after_clean"/>
	 
	 before/after ant macro "build"
		 <macrodef name="b2ctelcoaddon_before_build"/>
		 <macrodef name="b2ctelcoaddon_after_build"/>
		 
	 before/after ant macro "compile_core" - the core module of the extension
		 <macrodef name="b2ctelcoaddon_before_compile_core">
		 <macrodef name="b2ctelcoaddon_after_compile_core">
	 
	 before/after ant macro "compile_web" - the web module of the extension
		 <macrodef name="b2ctelcoaddon_before_compile_web" />
		 <macrodef name="b2ctelcoaddon_after_compile_web" />
	 
	 before/after ant macro "compile_hmc" - the hmc module of the extension
		 <macrodef name="b2ctelcoaddon_before_compile_hmc" />
		 <macrodef name="b2ctelcoaddon_after_compile_hmc" />
 
 Preparing extension
 
	 will be called in the beginning of the ant call and only once (also when using multiple 
	 ant targets e.g. ant build yunittest)	
		 <macrodef name="b2ctelcoaddon_only_once_prepare"/>
 
 Creating ear module/production
 
	 before/after ant macro "ear"
		 <macrodef name="b2ctelcoaddon_before_ear"/>
		 <macrodef name="b2ctelcoaddon_after_ear"/>

	 before/after ant macro "production" - for hybris server only
		 <macrodef name="b2ctelcoaddon_before_production" />
		 <macrodef name="b2ctelcoaddon_after_production" />
 
 JUnit Test
 
	 before/after ant macro "yunitinit" 
		 <macrodef name="b2ctelcoaddon_before_yunitinit" />
		 <macrodef name="b2ctelcoaddon_after_yunitinit" />
	 
	 before/after ant macro "yunit"
		 <macrodef name="b2ctelcoaddon_before_yunit" />
		 <macrodef name="b2ctelcoaddon_after_yunit" />
		 
 Distribution package
 
 	 before/after ant macro "dist" - internal target; only for use when platform is available in source code
		 <macrodef name="b2ctelcoaddon_after_dist"/>
		 <macrodef name="b2ctelcoaddon_before_dist"/>
	 
	 before/after ant macro "dist_copy" - internal target; only for use when platform is available in source code
		 <macrodef name="b2ctelcoaddon_before_dist_copy"/>
		 <macrodef name="b2ctelcoaddon_after_dist_copy"/>
 
--><project name="b2ctelcoaddon_buildcallbacks">
	<property name="yaccHeaderDir" value="${ext.yacceleratorstorefront.path}/web/webroot/WEB-INF/tags/responsive/common/header" />
	<property name="b2ctelcoaddonCustomHeaderDir" value="${ext.b2ctelcoaddon.path}/acceleratoraddon/web/webroot/WEB-INF/tags/responsive/common/header" />
	<property name="yaccVariableDir" value="${ext.yacceleratorstorefront.path}/web/webroot/WEB-INF/_ui-src/responsive/themes/lambda/less" />
	<property name="b2ctelcoaddonCustomVariableDir" value="${ext.b2ctelcoaddon.path}/acceleratoraddon/web/webroot/WEB-INF/_ui-src/responsive/less" />

	<!--OVERRIDING the default macro definition-->
	<macrodef name="extension_build_number">
		<attribute name="extname" />
		<attribute name="destdir" />

		<sequential>
			<!-- Just leave the file as it is declared into the custom extension-->
		</sequential>
	</macrodef>

	<!-- 
	    Called whenever 'ant ear' is used. this callback can be used to modify the content of the ear file
	
	     ${ear.path}: 			path to ear
	 -->
	<macrodef name="b2ctelcoaddon_before_ear">
		<sequential>

			<!-- you can do anything before the EAR file is being packed -->
			
		</sequential>
	</macrodef>
	
	<macrodef name="b2ctelcoaddon_before_build" >
		<sequential>
			<override_file_in_template_extension templateFilePath="${yaccHeaderDir}" customFilePath="${b2ctelcoaddonCustomHeaderDir}" fileName="header.tag"/>
			<override_file_in_template_extension templateFilePath="${yaccVariableDir}" customFilePath="${b2ctelcoaddonCustomVariableDir}" fileName="theme-variables.less"/>
		</sequential>
	</macrodef>
	
	<macrodef name="b2ctelcoaddon_before_addonuninstall">
		<sequential>
			<restore_overriden_file_in_template_extension templateFilePath="${yaccHeaderDir}" fileName="header.tag"/>
			<restore_overriden_file_in_template_extension templateFilePath="${yaccVariableDir}" fileName="theme-variables.less"/>
		</sequential>	
	</macrodef>
	
	<macrodef name="override_file_in_template_extension">
		<attribute name="templateFilePath"/>
		<attribute name="customFilePath"/>
		<attribute name="fileName"/>
		<sequential>
			<if>
				<and>
					<available file="@{templateFilePath}/@{fileName}" type="file"/>
					<available file="@{customFilePath}/@{fileName}" type="file"/>	
				</and>	
				<then>
					<if>
						<not>
							<available file="@{templateFilePath}/@{fileName}.bak" type="file"/> 
						</not>
						<then>
							<copy file="@{templateFilePath}/@{fileName}" tofile="@{templateFilePath}/@{fileName}.bak" verbose="true" preservelastmodified="true"/>
						</then>
					</if>	
					<copy file="@{customFilePath}/@{fileName}" todir="@{templateFilePath}" overwrite="true" verbose="true" />
				</then>	
			</if>
		</sequential>	
	</macrodef>
	
	<macrodef name="restore_overriden_file_in_template_extension">
		<attribute name="templateFilePath"/>
		<attribute name="fileName"/>
		<sequential>
			<if>
				<and>
					<available file="@{templateFilePath}/@{fileName}.bak" type="file"/>	
					<available file="@{templateFilePath}/@{fileName}" type="file" />
				</and>
				<then>
					<move file="@{templateFilePath}/@{fileName}.bak" tofile="@{templateFilePath}/@{fileName}" preservelastmodified="true" />
				</then>
			</if>
			
		</sequential>
	</macrodef>
	
</project>
