{
  "swagger": "2.0",
  "info": {
    "title": "Tmu - Tmf Apis",
    "description": "This is Swagger UI environment generated for the Tmf Apis implemented in Tmu",
    "version": "2.2"
  },
  "host": "serverRoot",
  "schemes": [
    "https"
  ],
  "consumes": [
    "application/json;charset=utf-8"
  ],
  "produces": [
    "application/json;charset=utf-8"
  ],
  "tags": [
    {
      "name": "Tmu - Tmf Apis",
      "description": ""
    }
  ],
  "paths": {
    "/product": {
      "post": {
        "tags": [
          "Product"
        ],
        "operationId": "productCreate",
        "summary": "Create a product",
        "description": "This operation creates a product entity. This operation is available only to ADMIN API users.\nMandatory and non mandatory attributes and additionnal rules are provided in the specifications document.\n\nSpecific business errors for current operation will be encapsulated in\n\nHTTP Response 422 Unprocessable entity\n",
        "deprecated": false,
        "parameters": [
          {
            "name": "Product",
            "required": true,
            "in": "body",
            "description": "",
            "schema": {
              "$ref": "#/definitions/Product"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/Product"
            }
          },
          "400": {
            "description": "Bad Request\n\nList of supported error codes:\n- 20: Invalid URL parameter value\n- 21: Missing body\n- 22: Invalid body\n- 23: Missing body field\n- 24: Invalid body field\n- 25: Missing header\n- 26: Invalid header value\n- 27: Missing query-string parameter\n- 28: Invalid query-string parameter value",
            "schema": {
              "$ref": "#/definitions/ErrorRepresentation"
            }
          },
          "404": {
            "description": "Not Found\n\nList of supported error codes:\n- 60: Resource not found",
            "schema": {
              "$ref": "#/definitions/ErrorRepresentation"
            }
          },
          "405": {
            "description": "Method Not Allowed\n\nList of supported error codes:\n- 61: Method not allowed",
            "schema": {
              "$ref": "#/definitions/ErrorRepresentation"
            }
          },
          "409": {
            "description": "Conflict\n\nThe request could not be completed due to a conflict with the current state of the target resource.",
            "schema": {
              "$ref": "#/definitions/ErrorRepresentation"
            }
          },
          "422": {
            "description": "Unprocessable entity\n\nFunctional error",
            "schema": {
              "$ref": "#/definitions/ErrorRepresentation"
            }
          },
          "500": {
            "description": "Internal Server Error\n\nList of supported error codes:\n- 1: Internal error",
            "schema": {
              "$ref": "#/definitions/ErrorRepresentation"
            }
          }
        }
      },
      "get": {
        "tags": [
          "Product"
        ],
        "operationId": "productFind",
        "summary": "List products",
        "description": "This operation list product entities.\nAttribute selection is enabled for all first level attributes.\nFiltering may be available depending on the compliance level supported by an implementation.\n\nSpecific business errors for current operation will be encapsulated in\n\nHTTP Response 422 Unprocessable entity\n",
        "deprecated": false,
        "parameters": [
          {
            "name": "fields",
            "required": false,
            "in": "query",
            "description": "Attributes selection",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Product"
              }
            }
          },
          "400": {
            "description": "Bad Request\n\nList of supported error codes:\n- 20: Invalid URL parameter value\n- 21: Missing body\n- 22: Invalid body\n- 23: Missing body field\n- 24: Invalid body field\n- 25: Missing header\n- 26: Invalid header value\n- 27: Missing query-string parameter\n- 28: Invalid query-string parameter value",
            "schema": {
              "$ref": "#/definitions/ErrorRepresentation"
            }
          },
          "404": {
            "description": "Not Found\n\nList of supported error codes:\n- 60: Resource not found",
            "schema": {
              "$ref": "#/definitions/ErrorRepresentation"
            }
          },
          "405": {
            "description": "Method Not Allowed\n\nList of supported error codes:\n- 61: Method not allowed",
            "schema": {
              "$ref": "#/definitions/ErrorRepresentation"
            }
          },
          "409": {
            "description": "Conflict\n\nThe request could not be completed due to a conflict with the current state of the target resource.",
            "schema": {
              "$ref": "#/definitions/ErrorRepresentation"
            }
          },
          "422": {
            "description": "Unprocessable entity\n\nFunctional error",
            "schema": {
              "$ref": "#/definitions/ErrorRepresentation"
            }
          },
          "500": {
            "description": "Internal Server Error\n\nList of supported error codes:\n- 1: Internal error",
            "schema": {
              "$ref": "#/definitions/ErrorRepresentation"
            }
          }
        }
      }
    },
    "/product/{productId}": {
      "get": {
        "tags": [
          "Product"
        ],
        "operationId": "productGet",
        "summary": "Retrieve product",
        "description": "This operation retrieves a product entity.\nAttribute selection is enabled for all first level attributes.\nFiltering on sub-resources may be available depending on the compliance level supported by an implementation.\n\nSpecific business errors for current operation will be encapsulated in\n\nHTTP Response 422 Unprocessable entity\n",
        "deprecated": false,
        "parameters": [
          {
            "name": "productId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "fields",
            "required": false,
            "in": "query",
            "description": "Attributes selection",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/Product"
            }
          },
          "400": {
            "description": "Bad Request\n\nList of supported error codes:\n- 20: Invalid URL parameter value\n- 21: Missing body\n- 22: Invalid body\n- 23: Missing body field\n- 24: Invalid body field\n- 25: Missing header\n- 26: Invalid header value\n- 27: Missing query-string parameter\n- 28: Invalid query-string parameter value",
            "schema": {
              "$ref": "#/definitions/ErrorRepresentation"
            }
          },
          "404": {
            "description": "Not Found\n\nList of supported error codes:\n- 60: Resource not found",
            "schema": {
              "$ref": "#/definitions/ErrorRepresentation"
            }
          },
          "405": {
            "description": "Method Not Allowed\n\nList of supported error codes:\n- 61: Method not allowed",
            "schema": {
              "$ref": "#/definitions/ErrorRepresentation"
            }
          },
          "409": {
            "description": "Conflict\n\nThe request could not be completed due to a conflict with the current state of the target resource.",
            "schema": {
              "$ref": "#/definitions/ErrorRepresentation"
            }
          },
          "422": {
            "description": "Unprocessable entity\n\nFunctional error",
            "schema": {
              "$ref": "#/definitions/ErrorRepresentation"
            }
          },
          "500": {
            "description": "Internal Server Error\n\nList of supported error codes:\n- 1: Internal error",
            "schema": {
              "$ref": "#/definitions/ErrorRepresentation"
            }
          }
        }
      },
      "patch": {
        "tags": [
          "Product"
        ],
        "operationId": "productPatch",
        "summary": "Patch a product",
        "description": "This operation allows partial updates of a product entity. This operation is available only to ADMIN API users.\nSupport of json/merge (https://tools.ietf.org/html/rfc7386) is mandatory, support of json/patch (http://tools.ietf.org/html/rfc5789) is optional.\nPatchable and not patchable attributes are provided in the specifications document.\n\nSpecific business errors for current operation will be encapsulated in\n\nHTTP Response 422 Unprocessable entity\n",
        "deprecated": false,
        "parameters": [
          {
            "name": "productId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "Product",
            "required": true,
            "in": "body",
            "description": "",
            "schema": {
              "$ref": "#/definitions/Product"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/Product"
            }
          },
          "400": {
            "description": "Bad Request\n\nList of supported error codes:\n- 20: Invalid URL parameter value\n- 21: Missing body\n- 22: Invalid body\n- 23: Missing body field\n- 24: Invalid body field\n- 25: Missing header\n- 26: Invalid header value\n- 27: Missing query-string parameter\n- 28: Invalid query-string parameter value",
            "schema": {
              "$ref": "#/definitions/ErrorRepresentation"
            }
          },
          "404": {
            "description": "Not Found\n\nList of supported error codes:\n- 60: Resource not found",
            "schema": {
              "$ref": "#/definitions/ErrorRepresentation"
            }
          },
          "405": {
            "description": "Method Not Allowed\n\nList of supported error codes:\n- 61: Method not allowed",
            "schema": {
              "$ref": "#/definitions/ErrorRepresentation"
            }
          },
          "409": {
            "description": "Conflict\n\nThe request could not be completed due to a conflict with the current state of the target resource.",
            "schema": {
              "$ref": "#/definitions/ErrorRepresentation"
            }
          },
          "422": {
            "description": "Unprocessable entity\n\nFunctional error",
            "schema": {
              "$ref": "#/definitions/ErrorRepresentation"
            }
          },
          "500": {
            "description": "Internal Server Error\n\nList of supported error codes:\n- 1: Internal error",
            "schema": {
              "$ref": "#/definitions/ErrorRepresentation"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Product"
        ],
        "operationId": "productDelete",
        "summary": "Delete a product",
        "description": "This operation deletes a product entity. This operation is available only to ADMIN API users\n\nSpecific business errors for current operation will be encapsulated in\n\nHTTP Response 422 Unprocessable entity\n",
        "deprecated": false,
        "parameters": [
          {
            "name": "productId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": ""
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request\n\nList of supported error codes:\n- 20: Invalid URL parameter value\n- 21: Missing body\n- 22: Invalid body\n- 23: Missing body field\n- 24: Invalid body field\n- 25: Missing header\n- 26: Invalid header value\n- 27: Missing query-string parameter\n- 28: Invalid query-string parameter value",
            "schema": {
              "$ref": "#/definitions/ErrorRepresentation"
            }
          },
          "404": {
            "description": "Not Found\n\nList of supported error codes:\n- 60: Resource not found",
            "schema": {
              "$ref": "#/definitions/ErrorRepresentation"
            }
          },
          "405": {
            "description": "Method Not Allowed\n\nList of supported error codes:\n- 61: Method not allowed",
            "schema": {
              "$ref": "#/definitions/ErrorRepresentation"
            }
          },
          "409": {
            "description": "Conflict\n\nThe request could not be completed due to a conflict with the current state of the target resource.",
            "schema": {
              "$ref": "#/definitions/ErrorRepresentation"
            }
          },
          "422": {
            "description": "Unprocessable entity\n\nFunctional error",
            "schema": {
              "$ref": "#/definitions/ErrorRepresentation"
            }
          },
          "500": {
            "description": "Internal Server Error\n\nList of supported error codes:\n- 1: Internal error",
            "schema": {
              "$ref": "#/definitions/ErrorRepresentation"
            }
          }
        }
      }
    },
    "/processTypeManagement/processType": {
      "get": {
        "tags": [
          "ProcessTypeManagement"
        ],
        "operationId": "listProcessType",
        "summary": "Returns the list of available process types",
        "parameters": [
          {
            "name": "fields",
            "required": false,
            "in": "query",
            "description": "Response configuration. This is the list of fields that should be returned in the response body",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ProcessType"
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/processTypeManagement/qualifiedProcessType": {
      "get": {
        "tags": [
          "ProcessTypeManagement"
        ],
        "operationId": "listQualifiedProcessType",
        "summary": "Returns the list of available process types for a given customer",
        "parameters": [
          {
            "name": "fields",
            "required": false,
            "in": "query",
            "description": "Response configuration. This is the list of fields that should be returned in the response body",
            "type": "string"
          },
          {
            "name": "relatedParty.Id",
            "required": true,
            "in": "query",
            "description": "The id of the customer for which we request the qualifiedProcessType",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/QualifiedProcessType"
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/geographicAddress": {
      "get": {
        "operationId": "geographicAddressFind",
        "summary": "List geographic addresses",
        "description": "This operation is used to retrieve geographic addresses corresponding to search criteria.\nFiltering is allowed on relatedParty.id.\nAttribute selection is possible for all attributes. Providing filtering criteria is mandatory to avoid too many answers retrieved.\n\nSpecific business errors for current operation will be encapsulated in\n\nHTTP Response 422 Unprocessable entity\n",
        "tags": [
          "GeographicAddress"
        ],
        "parameters": [
          {
            "name": "fields",
            "required": false,
            "type": "string",
            "in": "query",
            "description": "Response configuration. This is the list of fields that should be returned in the response body"
          },
          {
            "name": "baseSiteId",
            "required": false,
            "type": "string",
            "in": "query",
            "description": "Identifier of the BaseSite"
          },
          {
            "name": "relatedParty.id",
            "required": false,
            "type": "string",
            "in": "query",
            "description": "Id of a specific party role for which the addresses should be provided"
          },
          {
            "name": "offset",
            "required": false,
            "in": "query",
            "description": "Requested index for start of resources to be provided in response requested by client",
            "type": "string"
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Requested number of resources to be provided in response requested by client",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/GeographicAddress"
              }
            },
            "headers": {
              "X-Total-Count": {
                "description": "Total number of items matching criteria",
                "type": "integer",
                "format": "int32"
              },
              "X-Result-Count": {
                "description": "Actual number of items returned in the re body",
                "type": "integer",
                "format": "int32"
              }
            }
          },
          "400": {
            "description": "Bad Request\n\nList of supported error codes:\n- 20: Invalid URL parameter value\n- 21: Missing body\n- 22: Invalid body\n- 23: Missing body field\n- 24: Invalid body field\n- 25: Missing header\n- 26: Invalid header value\n- 27: Missing query-string parameter\n- 28: Invalid query-string parameter value",
            "schema": {
              "$ref": "#/definitions/ErrorRepresentation"
            }
          },
          "404": {
            "description": "Not Found\n\nList of supported error codes:\n- 60: Resource not found",
            "schema": {
              "$ref": "#/definitions/ErrorRepresentation"
            }
          },
          "405": {
            "description": "Method Not Allowed\n\nList of supported error codes:\n- 61: Method not allowed",
            "schema": {
              "$ref": "#/definitions/ErrorRepresentation"
            }
          },
          "422": {
            "description": "Unprocessable entity\n\nFunctional error",
            "schema": {
              "$ref": "#/definitions/ErrorRepresentation"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/ErrorRepresentation"
            }
          }
        }
      },
      "post": {
        "operationId": "createGeographicAddress",
        "summary": "Creates a 'Geographic Address'",
        "tags": [
          "GeographicAddress"
        ],
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/GeographicAddress"
            },
            "required": true,
            "in": "body",
            "name": "geographicAddress",
            "description": "The 'Geographic Address' Cart to be created"
          },
          {
            "type": "string",
            "required": true,
            "in": "query",
            "name": "relatedParty.id",
            "description": "The id of the related party."
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/GeographicAddress"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
	  "/geographicAddress/{id}":{
      "get": {
        "tags": [
           "GeographicAddress"
        ],
        "operationId": "getGeographicAddressById",
        "summary": "Retrieve a geographic address",
        "description": "Retrieves a geographic address using its unique ID. This ID should be retrieve either using the address completion process (cf. completion), or in another API of the ecosystem (party, appointment, etc.)\nAttribute selection is enabled for all first level attributes. Filtering on sub-resources may be available depending on the compliance level supported by an implementation\n\nSpecific business errors for current operation will be encapsulated in\n\nHTTP Response 422 Unprocessable entity\n",
        "deprecated": false,

        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Identifier of the Geographic Address",
            "required": true,
            "type": "string"
          },
          {"name": "fields",
            "required": false,
            "type": "string",
            "in": "query",
            "description": "Response configuration. This is the list of fields that should be returned in the response body"
          },
          {
            "name": "relatedParty.id",
            "required": false,
            "type": "string",
            "in": "query",
            "description": "Id of a specific party role for which the addresses should be provided"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/GeographicAddress"
            }
          },
          "400": {
            "description": "Bad Request\n\nList of supported error codes:\n- 20: Invalid URL parameter value\n- 21: Missing body\n- 22: Invalid body\n- 23: Missing body field\n- 24: Invalid body field\n- 25: Missing header\n- 26: Invalid header value\n- 27: Missing query-string parameter\n- 28: Invalid query-string parameter value",
            "schema": {

              "$ref": "#/definitions/ErrorRepresentation"
            }
          },
          "404": {
            "description": "Not Found\n\nList of supported error codes:\n- 60: Resource not found",
            "schema": {
              "$ref": "#/definitions/ErrorRepresentation"
            }
          },
          "405": {
            "description": "Method Not Allowed\n\nList of supported error codes:\n- 61: Method not allowed",
            "schema": {
              "$ref": "#/definitions/ErrorRepresentation"
            }
          },
          "422": {
            "description": "Unprocessable entity\n\nFunctional error",
            "schema": {
              "$ref": "#/definitions/ErrorRepresentation"
            }
          },
          "500": {
            "description": "Internal Server Error\n\nList of supported error codes:\n- 1: Internal error",
            "schema": {
              "$ref": "#/definitions/ErrorRepresentation"
            }
          }
        }
      },
      "patch": {
        "operationId": "updateGeographicAddressById",
        "summary": "Updates partially a 'GeographicAddress' by Id",
        "tags": [
          "GeographicAddress"
        ],
        "parameters": [
          {
            "required": true,
            "type": "string",
            "name": "id",
            "in": "path",
            "description": "Identifier of the GeographicAddress"
          },
          {
            "schema": {
              "$ref": "#/definitions/GeographicAddress"
            },
            "required": true,
            "in": "body",
            "name": "GeographicAddress",
            "description": "The Geographic Address to be updated"
          },
          {
            "type": "string",
            "required": true,
            "in": "query",
            "name": "relatedParty.id",
            "description": "The id of the related party."
          }
        ],
        "responses": {
          "200": {
            "description": "Updated",
            "schema": {
              "$ref": "#/definitions/GeographicAddress"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "delete": {
         "operationId": "deleteGeographicAddress",
         "summary": "Deletes a GeographicAddress",
         "description": "This operation deletes a GeographicAddress entity.",
         "tags": [
           "GeographicAddress"
          ],
         "parameters": [
           {
           	 "name": "id",
          	 "in": "path",
             "required": true,
             "type": "string",
             "description": "Unique identifier of the geographic address"
           },
		   {
		     "name": "relatedParty.id",
		     "required": true,
		     "type": "string",
		     "in": "query",
		     "description": "Id of a specific party role for which the addresses should be provided"
		   }
          ],
         "responses": {
           "200": {
             "description": "OK"
            },
           "400": {
             "description": "Bad Request",
             "schema": {
               "$ref": "#/definitions/Error"
                }
              },
           "401": {
             "description": "Unauthorized",
             "schema": {
               "$ref": "#/definitions/Error"
                }
              },
           "403": {
             "description": "Forbidden",
             "schema": {
               "$ref": "#/definitions/Error"
                }
              },
           "404": {
             "description": "Not Found",
             "schema": {
               "$ref": "#/definitions/Error"
                }
              },
           "405": {
             "description": "Method Not allowed",
             "schema": {
               "$ref": "#/definitions/Error"
                }
              },
           "409": {
             "description": "Conflict",
             "schema": {
               "$ref": "#/definitions/Error"
                }
              },
           "500": {
             "description": "Internal Server Error",
             "schema": {
               "$ref": "#/definitions/Error"
                }
              }
            }
         }
    },
    "/catalog": {
      "get": {
        "operationId": "listCatalog",
        "summary": "List or find 'Catalog' objects",
        "tags": [
          "catalog"
        ],
        "parameters": [
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "baseStore.id",
            "description": "Identifier of the BaseStore"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "fields",
            "description": "Comma separated properties to display in response"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "name",
            "description": "For filtering: Name of the catalog"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "@type",
            "description": "For filtering: Indicates the (class) type of catalog. For entity catalogs, this will be 'EntityCatalog'."
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "@schemaLocation",
            "description": "For filtering: This field provides a link to the schema describing this REST resource"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "@baseType",
            "description": "For filtering: Indicates<b> </b>the base (class) type of this REST resource"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "version",
            "description": "For filtering: Catalog version"
          },
          {
            "name": "validFor.startDateTime",
            "format": "date-time",
            "required": false,
            "in": "query",
            "type": "string",
            "description": "For filtering: An instant of time, starting at the TimePeriod"
          },
          {
            "name": "validFor.endDateTime",
            "format": "date-time",
            "required": false,
            "in": "query",
            "type": "string",
            "description": "For filtering: An instant of time, ending at the TimePeriod."
          },
          {
            "name": "lastUpdate",
            "format": "date-time",
            "required": false,
            "in": "query",
            "type": "string",
            "description": "For filtering: Date and time of the last update"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "lifecycleStatus",
            "description": "For filtering: Used to indicate the current lifecycle status"
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "schema": {
              "items": {
                "$ref": "#/definitions/Catalog"
              },
              "type": "array"
            }
          },
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/productOffering": {
      "get": {
        "operationId": "listProductOffering",
        "summary": "List or find 'ProductOffering' objects",
        "tags": [
          "productOffering"
        ],
        "parameters": [
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "baseSiteId",
            "description": "Identifier of the BaseSite"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "fields",
            "description": "Comma separated properties to display in response"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "name",
            "description": "For filtering: Name of the productOffering"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "offeringGroup.id",
            "description": "For filtering: Id of the productOfferingGroup"
          },
          {
            "type": "boolean",
            "required": false,
            "in": "query",
            "name": "isBundle",
            "description": "For filtering: isBundle determines whether a productOffering represents a single productOffering (false), or a bundle of productOfferings (true)."
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "parentBundledProductOffering.id",
            "description": "For filtering: Id of the parentBundledProductOffering"
          },
          {
            "name": "lastUpdate",
            "format": "date-time",
            "required": false,
            "in": "query",
            "type": "string",
            "description": "For filtering: Date and time of the last update"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "lifecycleStatus",
            "description": "For filtering: Used to indicate the current lifecycle status"
          },
          {
            "name": "validFor.startDateTime",
            "format": "date-time",
            "required": false,
            "in": "query",
            "type": "string",
            "description": "For filtering: An instant of time, starting at the TimePeriod"
          },
          {
            "name": "validFor.endDateTime",
            "format": "date-time",
            "required": false,
            "in": "query",
            "type": "string",
            "description": "For filtering: An instant of time, ending at the TimePeriod."
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "version",
            "description": "For filtering: ProductOffering version"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "@type",
            "description": "For filtering: Class type of the product offering"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "@baseType",
            "description": "For filtering: Immediate base (class) type of the product offering"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "@schemaLocation",
            "description": "For filtering: A link to the schema describing this product offering"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "place.name",
            "description": "For filtering: A user-friendly name for the place, such as \"Paris Store\", \"London Store\", \"Main Home\""
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "place.address",
            "description": "For filtering: A string characterizing an address (for instance a formatted address or an identifier taken from an address database or an address API)."
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "place.@referredType",
            "description": "For filtering: class type of the referred Place object"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "place.role",
            "description": "For filtering: Role of the place (for instance: 'home delivery', 'shop retrieval')"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "serviceLevelAgreement.name",
            "description": "For filtering: Name of the service level agreement"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "serviceLevelAgreement.@referredType",
            "description": "For filtering: class type of referred Service Level Agreement"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "productSpecification.version",
            "description": "For filtering: Version of the product specification"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "productSpecification.name",
            "description": "For filtering: Name of the product specification"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "productSpecification.@referredType",
            "description": "For filtering: class type of referred Product Specification"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "channel.name",
            "description": "For filtering: Name of the channel"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "channel.@referredType",
            "description": "For filtering: (Class) type of the referred channel like DistributionChannel, SalesChannel and so on"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "serviceCandidate.version",
            "description": "For filtering: Version of the service candidate"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "serviceCandidate.name",
            "description": "For filtering: Name of the service candidate"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "serviceCandidate.@referredType",
            "description": "For filtering: The Class type of  referred Service Candidate"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "attachment.type",
            "description": "For filtering: Attachment type such as video, picture"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "attachment.url",
            "description": "For filtering: Uniform Resource Locator, is a web page address (a subset of URI)"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "attachment.mimeType",
            "description": "For filtering: Attachment mime type such as extension file for video, picture and document"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "attachment.@type",
            "description": "For filtering: the class type of the Attachment"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "attachment.@baseType",
            "description": "For filtering: The immediate base class type of the attachment"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "attachment.@schemaLocation",
            "description": "For filtering: A link to the schema describing this attachment entity"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "category.version",
            "description": "For filtering: Category version"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "category.name",
            "description": "For filtering: Name of the category"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "category.@referredType",
            "description": "For filtering: the class type of the referred Category"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "resourceCandidate.version",
            "description": "For filtering: Version of the resource candidate"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "resourceCandidate.name",
            "description": "For filtering: Name of the resource candidate"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "resourceCandidate.@referredType",
            "description": "For filtering: The Class type of referred Resource Candidate"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "productOfferingTerm.name",
            "description": "For filtering: Name of the productOfferingTerm"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "productOfferingTerm.@type",
            "description": "For filtering: The class type of ProductOfferingTerm"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "productOfferingTerm.@schemaLocation",
            "description": "For filtering: A link to the schema describing this product offering term"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "marketSegment.name",
            "description": "For filtering: Name of the market segment"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "marketSegment.@referredType",
            "description": "For filtering: (Class) type of the referred market segment"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "productOfferingPrice.name",
            "description": "For filtering: Name of the productOfferingPrice"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "productOfferingPrice.priceType",
            "description": "For filtering: Indicates the price type: recurring, one time, usage"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "productOfferingPrice.unitOfMeasure",
            "description": "For filtering: Could be minutes, GB..."
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "productOfferingPrice.recurringChargePeriod",
            "description": "For filtering: Could be month, week..."
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "productOfferingPrice.version",
            "description": "For filtering: ProductOffering version"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "productOfferingPrice.@type",
            "description": "For filtering: The class type of the product offering price"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "productOfferingPrice.@baseType",
            "description": "For filtering: the immediate base class of product offering price"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "productOfferingPrice.@schemaLocation",
            "description": "For filtering: hyperlink reference to the product offering price schema"
          },
          {
            "type": "boolean",
            "required": false,
            "in": "query",
            "name": "productOfferingPrice.isBundle",
            "description": "For filtering: a flag indicating if this product offering price is bundle (composite) or not"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "agreement.name",
            "description": "For filtering: Name of the agreement"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "agreement.@referredType",
            "description": "For filtering: class type of the referred Agreement"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "bundledProductOffering.lifecycleStatus",
            "description": "For filtering: Used to indicate the current lifecycle status"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "bundledProductOffering.name",
            "description": "For filtering: Name of the BundledProductOffering"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "prodSpecCharValueUse.name",
            "description": "For filtering: Name of the associated productSpecCharacteristic"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "prodSpecCharValueUse.valueType",
            "description": "For filtering: A kind of value that the characteristic can take on, such as numeric, text and so forth"
          },
          {
            "type": "integer",
            "required": false,
            "in": "query",
            "name": "prodSpecCharValueUse.minCardinality",
            "description": "For filtering: The minimum number of instances a CharacteristicValue can take on. For example, zero to five phone numbers in a group calling plan, where zero is the value for the minCardinality."
          },
          {
            "type": "integer",
            "required": false,
            "in": "query",
            "name": "prodSpecCharValueUse.maxCardinality",
            "description": "For filtering: The maximum number of instances a CharacteristicValue can take on. For example, zero to five phone numbers in a group calling plan, where five is the value for the maxCardinality."
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "productOfferingPrice.place.id",
            "description": "For filtering: Identifier of the place for which product offering has prices available."
          },
          {
            "name": "facetSearchOption.id",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "description": "For filtering by facet options. The identifier of the facet search option."
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "required": false,
            "in": "query",
            "name": "sort",
            "description": "The options the product offerings can be sorted by.",
            "collectionFormat": "multi"
          },
          {
            "name": "productOfferingPrice.relatedParty.id",
            "in": "query",
            "description": "For filtering: Identifier of the related party for which the price applies.",
            "required": false,
            "type": "string"
          },
          {
            "type": "integer",
            "required": false,
            "in": "query",
            "name": "offset",
            "description": "Requested index for start of resources to be provided in response requested by client."
          },
          {
            "type": "integer",
            "required": false,
            "in": "query",
            "name": "limit",
            "description": "Requested number of resources to be provided in response requested by client."
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "schema": {
              "items": {
                "$ref": "#/definitions/ProductOffering"
              },
              "type": "array"
            }
          },
          "206": {
            "description": "Partial Content",
            "schema": {
              "items": {
                "$ref": "#/definitions/ProductOffering"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/productOffering/{id}": {
      "get": {
        "operationId": "retrieveProductOffering",
        "summary": "Retrieves a 'ProductOffering' by Id",
        "tags": [
          "productOffering"
        ],
        "parameters": [
          {
            "required": true,
            "type": "string",
            "name": "id",
            "in": "path",
            "description": "Identifier of the Product Offering"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Response configuration. This is the list of fields that should be returned in the response body",
            "required": false,
            "type": "string"
          },
          {
            "name": "baseSiteId",
            "in": "query",
            "description": "Identifier of the BaseSite",
            "required": false,
            "type": "string"
          },
          {
            "name": "productOfferingPrice.processType.id",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "description": "For filtering by the process type of the product offering price."
          },
          {
            "name": "productOfferingPrice.place.id",
            "in": "query",
            "description": "Identifier of the place for which product offering has prices available",
            "required": false,
            "type": "string"
          },
          {
            "name": "productOfferingPrice.relatedParty.id",
            "in": "query",
            "description": "For filtering: Identifier of the related party for which the price applies.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "schema": {
              "items": {
                "$ref": "#/definitions/ProductOffering"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "security": [
          {
            "oauth2_password": []
          },
          {
            "oauth2_client_credentials": []
          }
        ]
      }
    },
    "/category/{id}": {
      "get": {
        "operationId": "retrieveCategory",
        "summary": "Retrieves a 'Category' by Id",
        "tags": [
          "category"
        ],
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "query",
            "description": "Identifier of the BaseSite",
            "required": false,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "Identifier of the Category",
            "required": true,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Response configuration. This is the list of fields that should be returned in the response body",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "schema": {
              "items": {
                "$ref": "#/definitions/Category"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/review": {
      "get": {
        "tags": [
          "Review"
        ],
        "operationId": "listReview",
        "summary": "List reviews",
        "parameters": [
          {
            "name": "productOffering.id",
            "required": true,
            "in": "query",
            "description": "Identifier of the Product Offering",
            "type": "string"
          },
          {
            "name": "fields",
            "required": false,
            "type": "string",
            "in": "query",
            "description": "Response configuration. This is the list of fields that should be returned in the response body"
          },
          {
            "type": "integer",
            "required": false,
            "in": "query",
            "name": "offset",
            "description": "Requested index for start of resources to be provided in response requested by client."
          },
          {
            "type": "integer",
            "required": false,
            "in": "query",
            "name": "limit",
            "description": "Requested number of resources to be provided in response requested by client."
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Review"
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorRepresentation"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ErrorRepresentation"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/ErrorRepresentation"
            }
          }
        }
      },
      "post": {
        "operationId": "createReview",
        "summary": "Creates a 'Review'",
        "tags": [
          "Review"
        ],
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/Review"
            },
            "required": true,
            "in": "body",
            "name": "review",
            "description": "The 'Review' resource to be created"
          },
          {
            "name": "productOffering.id",
            "required": true,
            "in": "query",
            "description": "Identifier of the Product Offering",
            "type": "string"
          },
          {
            "type": "string",
            "required": true,
            "in": "query",
            "name": "relatedParty.id",
            "description": "The id of the related party."
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/Review"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorRepresentation"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorRepresentation"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorRepresentation"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ErrorRepresentation"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/ErrorRepresentation"
            }
          },
          "422": {
            "description": "Unprocessable entity\n\nFunctional error",
            "schema": {
              "$ref": "#/definitions/ErrorRepresentation"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/ErrorRepresentation"
            }
          }
        }
      }
    },
    "/paymentMethod": {
      "get": {
        "operationId": "retrievePaymentMethods",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "To retrieve methods of a specific type",
            "enum": [
              "cash",
              "digitalWallet",
              "tokenizedCard",
              "bankAccountTransfer",
              "bankAccountDebit",
              "bankCard",
              "account",
              "bucket",
              "voucher",
              "check",
              "loyaltyAccount",
              "creditCard"
            ],
            "in": "query",
            "name": "type",
            "required": false,
            "type": "string"
          },
          {
            "description": "Identifier of the BaseSite",
            "in": "query",
            "name": "baseSiteId",
            "required": false,
            "type": "string"
          },
          {
            "description": "To retrieve the accounts of a specific bank",
            "in": "query",
            "name": "bankAccount.BIC",
            "required": false,
            "type": "string"
          },
          {
            "description": "To retrieve a specific account",
            "in": "query",
            "name": "bankAccount.accountNumber",
            "required": false,
            "type": "string"
          },
          {
            "description": "To retrieve the accounts of a specific bank",
            "in": "query",
            "name": "bankAccount.bank",
            "required": false,
            "type": "string"
          },
          {
            "description": "To retrieve a specific bank card",
            "in": "query",
            "name": "bankCard.cardNumber",
            "required": false,
            "type": "string"
          },
          {
            "description": "To retrieve cards with a specific name",
            "in": "query",
            "name": "bankCard.nameOnCard",
            "required": false,
            "type": "string"
          },
          {
            "description": "To retrieve cards of a specific type",
            "in": "query",
            "name": "bankCard.type",
            "required": false,
            "type": "string"
          },
          {
            "description": "To retrieve a specific check",
            "in": "query",
            "name": "check.checkId",
            "required": false,
            "type": "string"
          },
          {
            "description": "To retrieve checks of a specific bank",
            "in": "query",
            "name": "check.bank",
            "required": false,
            "type": "string"
          },
          {
            "description": "To retrieve methods from a specific related party",
            "in": "query",
            "name": "relatedParty.id",
            "required": false,
            "type": "string"
          },
          {
            "description": "To retrieve methods from a specific related party",
            "in": "query",
            "name": "relatedParty.type",
            "required": false,
            "type": "string"
          },
          {
            "description": "To retrieve a specific loyalty account",
            "in": "query",
            "name": "loyaltyAccount",
            "required": false,
            "type": "string"
          },
          {
            "description": "To retrieve digital wallets of a specific service",
            "in": "query",
            "name": "digitalWallet.service",
            "required": false,
            "type": "string"
          },
          {
            "description": "To retrieve a specific digital wallet",
            "in": "query",
            "name": "digitalWallet.id",
            "required": false,
            "type": "string"
          },
          {
            "description": "To retrieve a specific bucket",
            "in": "query",
            "name": "bucket",
            "required": false,
            "type": "string"
          },
          {
            "description": "To retrieve a specific voucher",
            "in": "query",
            "name": "voucher.id",
            "required": false,
            "type": "string"
          },
          {
            "description": "To retrieve voucher with a specific code",
            "in": "query",
            "name": "voucher.code",
            "required": false,
            "type": "string"
          },
          {
            "description": "To apply a filter on every resource included in the response. It's value is a list of comma separated values of the different fields that are requested.",
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          },
          {
            "description": "To limit the maximum number of results to be included in the response. The name of query parameter is ‘limit’ and its value is an integer indicating the maximum number of elements to be included in the response.",
            "in": "query",
            "name": "limit",
            "required": false,
            "type": "integer"
          },
          {
            "description": "To apply an offset in the results to be included in the response. The name of query parameter is ‘offset’ and its value is an integer indicating the offset to be applied.",
            "in": "query",
            "name": "offset",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "Payment methods retrieved successfully",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/PaymentMethodType"
              }
            },
            "headers": {
              "X-Total-Count": {
                "description": "Total results",
                "type": "integer"
              }
            }
          },
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Invalid Token"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "405": {
            "description": "Method not Allowed"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "summary": "Retrieve a list of payment methods",
        "tags": [
          "payment methods"
        ]
      }
    },
    "/deliveryMode": {
      "get": {
        "operationId": "listDeliveryMode",
        "summary": "List or find 'DeliveryMode' objects",
        "tags": [
          "deliveryMode"
        ],
        "parameters": [
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "baseSiteId",
            "description": "Identifier of the BaseSite"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "fields",
            "description": "Response configuration. This is the list of fields that should be returned in the response body"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "name",
            "description": "For filtering: Name of deliveryMode"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "description",
            "description": "For filtering: Description of deliveryMode"
          },
          {
            "type": "string",
            "required": true,
            "in": "query",
            "name": "shoppingCart.id",
            "description": "Unique identifier of the Shopping Cart"
          },
          {
            "type": "string",
            "required": true,
            "in": "query",
            "name": "relatedParty.id",
            "description": "Unique identifier of the Related Party"
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "schema": {
              "items": {
                "$ref": "#/definitions/DeliveryMode"
              },
              "type": "array"
            }
          },
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/partyRole/{id}": {
      "get": {
        "operationId": "retrievePartyRole",
        "summary": "Retrieves a 'PartyRole' by Id",
        "tags": [
          "partyRole"
        ],
        "parameters": [
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "fields",
            "description": "Comma separated properties to display in response"
          },
          {
            "required": true,
            "type": "string",
            "name": "id",
            "in": "path",
            "description": "Identifier of the Party Role"
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "schema": {
              "items": {
                "$ref": "#/definitions/PartyRole"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/subscriptionBase": {
      "get": {
        "operationId": "listSubscriptionBase",
        "summary": "List or find 'SubscriptionBase' objects",
        "tags": [
          "Customer Product Inventory"
        ],
        "parameters": [
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "fields",
            "description": "Response configuration. This is the list of fields that should be returned in the response body"
          },
          {
            "type": "string",
            "required": true,
            "in": "query",
            "name": "subscriptionAccess.relatedParty.id",
            "description": "Unique identifier of the Related Party"
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "schema": {
              "items": {
                "$ref": "#/definitions/SubscriptionBase"
              },
              "type": "array"
            }
          },
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/recommendation": {
      "get": {
        "operationId": "listRecommendation",
        "summary": "List or find 'Recommendation' objects",
        "tags": [
          "recommendation"
        ],
        "parameters": [
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "relatedParty.id",
            "description": "The identifier of the related party"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "subscriptionBase.id",
            "description": "The identifier of the subscription base"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "processType.id",
            "description": "The identifier of the process type"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "productOfferingTerm.id",
            "description": "The identifier of the product offering term"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "relatedProductOffering.id",
            "description": "The identifier of the related product offering"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "fields",
            "description": "Comma separated properties to display in response"
          },
          {
            "type": "integer",
            "required": false,
            "in": "query",
            "name": "offset",
            "description": "Requested index for start of resources to be provided in response"
          },
          {
            "type": "integer",
            "required": false,
            "in": "query",
            "name": "limit",
            "description": "Requested number of resources to be provided in response"
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "schema": {
              "items": {
                "$ref": "#/definitions/Recommendation"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/shoppingCart": {
      "get": {
        "operationId": "listShoppingCart",
        "summary": "List or find 'ShoppingCart' objects",
        "tags": [
          "ShoppingCart"
        ],
        "parameters": [
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "fields",
            "description": "Comma separated properties to display in response"
          },
          {
            "type": "integer",
            "required": false,
            "in": "query",
            "name": "offset",
            "description": "Requested index for start of resources to be provided in response"
          },
          {
            "type": "integer",
            "required": false,
            "in": "query",
            "name": "limit",
            "description": "Requested number of resources to be provided in response"
          },
          {
            "required": true,
            "type": "string",
            "name": "relatedParty.Id",
            "in": "query",
            "description": "Identifier of the Customer"
          },
          {
            "name": "baseSiteId",
            "in": "query",
            "description": "Identifier of the BaseSite",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "schema": {
              "items": {
                "$ref": "#/definitions/ShoppingCart"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "post": {
        "operationId": "createShoppingCart",
        "summary": "Creates a 'ShoppingCart'",
        "tags": [
          "shoppingCart"
        ],
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/ShoppingCart"
            },
            "required": true,
            "in": "body",
            "name": "shoppingCart",
            "description": "The Shopping Cart to be created"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "baseSiteId",
            "description": "The id of the base site."
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/ShoppingCart"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/shoppingCart/{id}": {
      "get": {
        "operationId": "retrieveShoppingCart",
        "summary": "Retrieves a 'ShoppingCart' by Id",
        "tags": [
          "ShoppingCart"
        ],
        "parameters": [
          {
            "required": true,
            "type": "string",
            "name": "id",
            "in": "path",
            "description": "Identifier of the Shopping Cart"
          },
          {
            "required": true,
            "type": "string",
            "name": "relatedParty.Id",
            "in": "query",
            "description": "Identifier of the Customer"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "fields",
            "description": "Comma separated properties to display in response"
          },
          {
            "name": "baseSiteId",
            "in": "query",
            "description": "Identifier of the BaseSite",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "schema": {
              "items": {
                "$ref": "#/definitions/ShoppingCart"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "patch": {
        "operationId": "patchShoppingCart",
        "summary": "Updates partially a 'ShoppingCart' by Id",
        "tags": [
          "ShoppingCart"
        ],
        "parameters": [
          {
            "required": true,
            "type": "string",
            "name": "id",
            "in": "path",
            "description": "Identifier of the Shopping Cart"
          },
          {
            "schema": {
              "$ref": "#/definitions/ShoppingCart"
            },
            "required": true,
            "in": "body",
            "name": "shoppingCart",
            "description": "The Shopping Cart to be updated"
          }
        ],
        "responses": {
          "200": {
            "description": "Updated",
            "schema": {
              "$ref": "#/definitions/ShoppingCart"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/productOrdering/productOrder": {
      "post": {
        "tags": [
          "ProductOrdering"
        ],
        "operationId": "productOrderCreate",
        "summary": "Create a product order",
        "description": "This operation creates a product order entity. Mandatory and non mandatory attributes, additional rules and default values are provided in the specifications document.\n\nSpecific business errors for current operation will be encapsulated in\n\nHTTP Response 422 Unprocessable entity\n",
        "deprecated": false,
        "parameters": [
          {
            "name": "baseSiteId",
            "in": "query",
            "description": "Identifier of the BaseSite",
            "required": false,
            "type": "string"
          },
          {
            "name": "productOrder",
            "required": true,
            "in": "body",
            "description": "",
            "schema": {
              "$ref": "#/definitions/ProductOrder"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ProductOrder"
            }
          },
          "400": {
            "description": "Bad Request\n\nList of supported error codes:\n- 20: Invalid URL parameter value\n- 21: Missing body\n- 22: Invalid body\n- 23: Missing body field\n- 24: Invalid body field\n- 25: Missing header\n- 26: Invalid header value\n- 27: Missing query-string parameter\n- 28: Invalid query-string parameter value",
            "schema": {
              "$ref": "#/definitions/ErrorRepresentation"
            }
          },
          "401": {
            "description": "Unauthorized\n\nList of supported error codes:\n- 40: Missing credentials\n- 41: Invalid credentials\n- 42: Expired credentials",
            "schema": {
              "$ref": "#/definitions/ErrorRepresentation"
            }
          },
          "403": {
            "description": "Forbidden\n\nList of supported error codes:\n- 50: Access denied\n- 51: Forbidden requester\n- 52: Forbidden user\n- 53: Too many requests",
            "schema": {
              "$ref": "#/definitions/ErrorRepresentation"
            }
          },
          "404": {
            "description": "Not Found\n\nList of supported error codes:\n- 60: Resource not found",
            "schema": {
              "$ref": "#/definitions/ErrorRepresentation"
            }
          },
          "422": {
            "description": "Unprocessable entity\n\nFunctional error",
            "schema": {
              "$ref": "#/definitions/ErrorRepresentation"
            }
          },
          "500": {
            "description": "Internal Server Error\n\nList of supported error codes:\n- 1: Internal error",
            "schema": {
              "$ref": "#/definitions/ErrorRepresentation"
            }
          },
          "503": {
            "description": "Service Unavailable\n\nList of supported error codes:\n- 5: The service is temporarily unavailable",
            "schema": {
              "$ref": "#/definitions/ErrorRepresentation"
            }
          }
        }
      },
      "get": {
        "tags": [
          "ProductOrder"
        ],
        "operationId": "listProductOrders",
        "summary": "List product orders",
        "description": "This operation list product order entities. Attribute  selection  is enabled for all first level attributes. Filtering supported by related party.",
        "deprecated": false,
        "parameters": [
          {
            "name": "relatedParty.id",
            "in": "query",
            "required": true,
            "description": "Identifier of the PartyRole",
            "type": "string"
          },
          {
            "name": "fields",
            "required": false,
            "in": "query",
            "description": "Attributes selection",
            "type": "string"
          },
          {
            "name": "offset",
            "required": false,
            "in": "query",
            "description": "Requested index for start of resources to be provided in response",
            "type": "integer"
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Number of resources to be provided in response",
            "type": "integer"
          },
          {
            "name": "baseSiteId",
            "required": false,
            "in": "query",
            "description": "Identifier of the BaseSite",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ProductOrder"
              }
            },
            "headers": {
              "X-Total-Count": {
                "description": "Total number of resources on the resource server",
                "type": "string"
              },
              "X-Result-Count": {
                "description": "Total number of resources returned",
                "type": "string"
              }
            }
          },
          "400": {
            "description": "Bad Request\n\nList of supported error codes:\n- 20: Invalid URL parameter value\n- 21: Missing body\n- 22: Invalid body\n- 23: Missing body field\n- 24: Invalid body field\n- 25: Missing header\n- 26: Invalid header value\n- 27: Missing query-string parameter\n- 28: Invalid query-string parameter value",
            "schema": {
              "$ref": "#/definitions/ErrorRepresentation"
            }
          },
          "401": {
            "description": "Unauthorized\n\nList of supported error codes:\n- 40: Missing credentials\n- 41: Invalid credentials\n- 42: Expired credentials",
            "schema": {
              "$ref": "#/definitions/ErrorRepresentation"
            }
          },
          "403": {
            "description": "Forbidden\n\nList of supported error codes:\n- 50: Access denied\n- 51: Forbidden requester\n- 52: Forbidden user\n- 53: Too many requests",
            "schema": {
              "$ref": "#/definitions/ErrorRepresentation"
            }
          },
          "404": {
            "description": "Not Found\n\nList of supported error codes:\n- 60: Resource not found",
            "schema": {
              "$ref": "#/definitions/ErrorRepresentation"
            }
          },
          "422": {
            "description": "Unprocessable entity\n\nFunctional error",
            "schema": {
              "$ref": "#/definitions/ErrorRepresentation"
            }
          },
          "500": {
            "description": "Internal Server Error\n\nList of supported error codes:\n- 1: Internal error",
            "schema": {
              "$ref": "#/definitions/ErrorRepresentation"
            }
          },
          "503": {
            "description": "Service Unavailable\n\nList of supported error codes:\n- 5: The service is temporarily unavailable",
            "schema": {
              "$ref": "#/definitions/ErrorRepresentation"
            }
          }
        }
      }
    },
    "/productOrdering/productOrder/{id}": {
      "get": {
        "operationId": "retrieveProductOrder",
        "summary": "Retrieves a ProductOrder by ID",
        "description": "This operation retrieves a ProductOrder entity. Attribute selection is enabled for all first level attributes.",
        "tags": [
          "productOrder"
        ],
        "parameters": [
          {
            "name": "id",
            "description": "Identifier of the ProductOrder",
            "required": true,
            "type": "string",
            "in": "path"
          },
          {
            "name": "fields",
            "description": "Comma-separated properties to provide in response",
            "required": false,
            "type": "string",
            "in": "query"
          },
          {
            "required": true,
            "type": "string",
            "name": "relatedParty.id",
            "in": "query",
            "description": "Identifier of the Customer"
          },
          {
            "name": "baseSiteId",
            "in": "query",
            "description": "Identifier of the BaseSite",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ProductOrder"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "patch": {
        "operationId": "patchProductOrder",
        "summary": "Updates partially a ProductOrder",
        "description": "This operation updates partially a ProductOrder entity.",
        "tags": [
          "productOrder"
        ],
        "parameters": [
          {
            "name": "id",
            "description": "Identifier of the ProductOrder",
            "required": true,
            "type": "string",
            "in": "path"
          },
          {
            "name": "baseSiteId",
            "description": "Identifier of the BaseSite",
            "required": false,
            "type": "string",
            "in": "query"
          },
          {
            "name": "productOrder",
            "description": "The ProductOrder to be updated",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ProductOrder"
            },
            "in": "body"
          }
        ],
        "responses": {
          "200": {
            "description": "Updated",
            "schema": {
              "$ref": "#/definitions/ProductOrder"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorRepresentation"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorRepresentation"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorRepresentation"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ErrorRepresentation"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/ErrorRepresentation"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/ErrorRepresentation"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/ErrorRepresentation"
            }
          }
        }
      }
    },
    "/checklistAction": {
      "get": {
        "operationId": "getChecklistActions",
        "summary": "Retrieve the Checklist Actions for the given context",
        "tags": [
          "Checklist Action"
        ],
        "parameters": [
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "baseSiteId",
            "description": "Identifier of the BaseSite"
          },
          {
            "name": "productOffering.id",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "description": "Product Offering IDs for which to retrieve the Checklist Actions."
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "processType.id",
            "description": "Purchase Flow for which to retrieve the Checklist Actions"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "fields",
            "description": "Comma separated properties to display in response"
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "schema": {
              "items": {
                "$ref": "#/definitions/ChecklistAction"
              },
              "type": "array"
            }
          },
          "206": {
            "description": "Partial Content",
            "schema": {
              "items": {
                "$ref": "#/definitions/ChecklistAction"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/productSpecification/{id}": {
      "get": {
        "operationId": "retrieveProductSpecification",
        "summary": "Retrieves a ProductSpecification by ID",
        "description": "This operation retrieves a ProductSpecification entity. Attribute selection is enabled for all first level attributes.",
        "tags": [
          "productSpecification"
        ],
        "parameters": [
          {
            "name": "id",
            "description": "Identifier of the ProductSpecification",
            "required": true,
            "type": "string",
            "in": "path"
          },
          {
            "name": "fields",
            "description": "Comma-separated properties to provide in response",
            "required": false,
            "type": "string",
            "in": "query"
          },
          {
            "name": "baseSiteId",
            "in": "query",
            "description": "Identifier of the BaseSite",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ProductSpecification"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "ProductOffering": {
      "discriminator": "@type",
      "type": "object",
      "description": "Represents entities that are orderable from the provider of the catalog, this resource includes pricing information.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier of the ProductOffering."
        },
        "href": {
          "type": "string",
          "description": "Reference of the ProductOffering."
        },
        "name": {
          "type": "string",
          "description": "Name of the ProductOffering."
        },
        "description": {
          "type": "string",
          "description": "Description of the ProductOffering."
        },
        "isBundle": {
          "type": "boolean",
          "description": "isBundle determines whether a productOffering represents a simple product Offering (false), or a bundled product offering(true).If false, then a productSpecification will be returned, but the bundledProductOfferings will be absent or empty and vice-versa if isBundle is true.",
          "example": false
        },
        "lastUpdate": {
          "type": "string",
          "format": "date-time",
          "description": "Date and time of the last update."
        },
        "lifecycleStatus": {
          "type": "string",
          "description": "Used to indicate the current product offering approval status (approved/check/unapproved)."
        },
        "validFor": {
          "$ref": "#/definitions/TimePeriod",
          "description": "The period for which the productOffering is valid (online date - offline date)."
        },
        "version": {
          "type": "string",
          "description": "Not Sent.Product offering version."
        },
        "@type": {
          "type": "string",
          "description": "Class type of the product offering"
        },
        "@baseType": {
          "type": "string",
          "description": "Immediate base (class) type of the product offering"
        },
        "@schemaLocation": {
          "type": "string",
          "description": "A link to the schema describing this product offering"
        },
        "isSellable": {
          "type": "boolean",
          "description": "A flag indicating if this product offering can be sold as stand-alone or not. If this flag is false it indicates that the offer can only be sold within a bundled product offering."
        },
        "place": {
          "type": "array",
          "description": "Not Sent",
          "items": {
            "$ref": "#/definitions/PlaceRef"
          }
        },
        "serviceLevelAgreement": {
          "description": "Not Sent",
          "$ref": "#/definitions/SLARef"
        },
        "productSpecification": {
          "$ref": "#/definitions/ProductSpecificationRef"
        },
        "channel": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ChannelRef"
          }
        },
        "serviceCandidate": {
          "description": "Not Sent",
          "$ref": "#/definitions/ServiceCandidateRef"
        },
        "attachment": {
          "type": "array",
          "description": "Media items configured for a product offering (images, videos).",
          "items": {
            "$ref": "#/definitions/Attachment"
          }
        },
        "category": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CategoryRef"
          }
        },
        "resourceCandidate": {
          "description": "Not Sent",
          "$ref": "#/definitions/ResourceCandidateRef"
        },
        "productOfferingTerm": {
          "type": "array",
          "description": "Different commitment period for which the product offering is available.",
          "items": {
            "$ref": "#/definitions/ProductOfferingTerm"
          }
        },
        "marketSegment": {
          "type": "array",
          "description": "Not Sent.",
          "items": {
            "$ref": "#/definitions/MarketSegmentRef"
          }
        },
        "productOfferingPrice": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ProductOfferingPrice"
          }
        },
        "agreement": {
          "type": "array",
          "description": "Not Sent",
          "items": {
            "$ref": "#/definitions/AgreementRef"
          }
        },
        "bundledProductOffering": {
          "type": "array",
          "description": "List of children product offering reference (sent only for bundled product offerings).",
          "items": {
            "$ref": "#/definitions/BundledProductOffering"
          }
        },
        "parentBundleProductOffering": {
          "type": "array",
          "description": "A list of BundledProductOffering representing all parents of the offering.",
          "items": {
            "$ref": "#/definitions/BundledProductOffering"
          }
        },
        "prodSpecCharValueUse": {
          "type": "array",
          "description": "The list of Product Specification Characteristic Values defined for the ProductOffering.",
          "items": {
            "$ref": "#/definitions/ProdSpecCharValueUse"
          }
        },
        "classificationAttributeValueUse": {
          "type": "array",
          "description": "The list of classification attributes defined for the ProductOffering.",
          "items": {
            "$ref": "#/definitions/ProdSpecCharValueUse"
          }
        },
        "offeringGroup": {
          "type": "array",
          "description": "List of containing offering groups (sent only for BundleProductOfferings).",
          "items": {
            "$ref": "#/definitions/OfferingGroup"
          }
        },
        "baseProduct": {
          "$ref": "#/definitions/ProductOfferingRef",
          "description": "Base product of a variant."
        },
        "variantProductOffering": {
          "type": "array",
          "description": "List of variants of the product offering.",
          "items": {
            "$ref": "#/definitions/ProductOfferingRef"
          }
        },
        "variantOption": {
          "description": "Variant options, in case of a variant product offering.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/VariantOption"
          }
        },
        "rating": {
          "description": "Rating of the product offering.",
          "type": "string"
        }
      }
    },
    "IndexedProductOffering": {
      "description": "IndexedProductOffering subtype of the ProductOffering entity.",
      "allOf": [
        {
          "$ref": "#/definitions/ProductOffering"
        },
        {
          "type": "object",
          "properties": {
            "facetSearchOption": {
              "type": "array",
              "description": "Represents the facet search value field name and value used for filtering.",
              "items": {
                "$ref": "#/definitions/FacetSearchOption"
              }
            },
            "isInStock": {
              "type": "boolean",
              "description": "Flag to indicate if the product is in stock or not."
            }
          }
        }
      ]
    },
    "FacetSearchOption": {
      "description": "Facet search option used for filtering",
      "type": "object",
      "properties": {
        "id": {
          "description": "The identifier of the field used for filtering.",
          "type": "string"
        },
        "name": {
          "description": "The name of the field used for filtering.",
          "type": "string"
        },
        "value": {
          "description": "The value of the field used for filtering.",
          "type": "string"
        }
      }
    },
    "ProductOfferingPrice": {
      "discriminator": "@type",
      "type": "object",
      "description": "An amount, usually of money, that is asked for or allowed when a ProductOffering is bought, rented, or leased. The price is valid for a defined period of time and may not represent the actual price paid by a customer.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Price identifier."
        },
        "href": {
          "type": "string",
          "description": "Not Sent"
        },
        "name": {
          "type": "string",
          "description": "Name of the productOfferingPrice."
        },
        "description": {
          "type": "string",
          "description": "Not Sent.Description of the productOfferingPrice"
        },
        "version": {
          "type": "string",
          "description": "Not Sent.ProductOffering version."
        },
        "validFor": {
          "$ref": "#/definitions/TimePeriod",
          "description": "The period for which the productOfferingPrice is valid."
        },
        "priceType": {
          "type": "string",
          "description": "A category that describes the price such as recurring, one time and usage."
        },
        "unitOfMeasure": {
          "$ref": "#/definitions/Money",
          "description": "A number and unit representing how many (for instance 1 dozen) of an ProductOffering is available at the offered price. Its meaning depends on the priceType. It could be a price, a rate, or a discount."
        },
        "recurringChargePeriodType": {
          "type": "string",
          "description": "The period to repeat the application of the price.\nCould be month,quarter,year.."
        },
        "recurringChargePeriodLength": {
          "type": "integer",
          "description": "The period of the recurring charge:  1, 2, ... .It sets to zero if it is not applicable"
        },
        "priority": {
          "type": "integer",
          "description": "The priority of the price."
        },
        "billingEvent": {
          "type": "string",
          "description": "Represents the billing event for one time prices. Could be : paynow, onfistbill, oncancellation."
        },
        "@type": {
          "type": "string",
          "description": "The class type of this Product offering"
        },
        "@baseType": {
          "type": "string",
          "description": "The immediate base class type of this product offering"
        },
        "@schemaLocation": {
          "type": "string",
          "description": "hyperlink reference to the schema describing this resource"
        },
        "lastUpdate": {
          "type": "string",
          "format": "date-time",
          "description": "Last modified time of price."
        },
        "isBundle": {
          "type": "boolean",
          "description": "A flag indicating if this POP is composite (bundle) or not",
          "example": false
        },
        "lifecycleStatus": {
          "type": "string",
          "description": "Not Sent.The lifecycle status of this POP."
        },
        "price": {
          "$ref": "#/definitions/Money",
          "description": "The amount of money that characterizes the price."
        },
        "percentage": {
          "type": "number",
          "format": "float",
          "description": "Percentage to apply for ProdOfferPriceAlteration (Discount)."
        },
        "bundledPopRelationship": {
          "type": "array",
          "description": "Not Sent.",
          "items": {
            "$ref": "#/definitions/BundledPopRelationship"
          }
        },
        "bundledPop": {
          "type": "array",
          "description": "Represents the contained prices (charges), for a composed price.",
          "items": {
            "$ref": "#/definitions/ProductOfferingPrice"
          }
        },
        "popRelationship": {
          "type": "array",
          "description": "Not Sent.",
          "items": {
            "$ref": "#/definitions/PopRelationship"
          }
        },
        "isPriceOverride": {
          "type": "boolean",
          "description": "A flag indicating if the price is defined directly for a simple product offering, or for a product offering bought as part of a bundled product offering.",
          "example": false
        },
        "poRelationship": {
          "type": "array",
          "description": "Represents the product offering affected, or required by the price. This field is used for bundle product offerings.",
          "items": {
            "$ref": "#/definitions/PoRelationshipRef"
          }
        },
        "prodSpecCharValueUse": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ProdSpecCharValueUse"
          }
        },
        "productOfferingTerm": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ProductOfferingTerm"
          }
        },
        "processType": {
          "type": "array",
          "description": "Represents the purchasing flows for which the price is applicable.",
          "items": {
            "$ref": "#/definitions/ProcessType"
          }
        },
        "place": {
          "type": "array",
          "description": "Place references where the products are sold or delivered.",
          "items": {
            "$ref": "#/definitions/PlaceRef"
          }
        },
        "constraint": {
          "type": "array",
          "description": "Not Sent.",
          "items": {
            "$ref": "#/definitions/ConstraintRef"
          }
        },
        "pricingLogicAlgorithm": {
          "type": "array",
          "description": "Not Sent.",
          "items": {
            "$ref": "#/definitions/PricingLogicAlgorithm"
          }
        },
        "tax": {
          "type": "array",
          "description": "Not Sent.",
          "items": {
            "$ref": "#/definitions/Tax"
          }
        },
        "channel": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ChannelRef"
          }
        },
        "relatedParty": {
          "$ref": "#/definitions/RelatedPartyRef"
        }
      }
    },
    "RecurringPriceCharge": {
      "description": "A price charge  paid recursively.",
      "allOf": [
        {
          "$ref": "#/definitions/ProductOfferingPrice"
        },
        {
          "type": "object",
          "properties": {
            "cycle": {
              "$ref": "#/definitions/Cycle",
              "description": "Represents the start time, and end time of the recurring cycle (the first 3 months) . If empty, the cycle is the entire recurring period. "
            }
          }
        }
      ]
    },
    "OneTimePriceCharge": {
      "description": "A price charge paid only once.",
      "allOf": [
        {
          "$ref": "#/definitions/ProductOfferingPrice"
        },
        {
          "type": "object",
          "properties": {
          }
        }
      ]
    },
    "UsagePriceCharge": {
      "discriminator": "@type",
      "description": "A price per usage unit, either volume overage or tier price.",
      "allOf": [
        {
          "$ref": "#/definitions/ProductOfferingPrice"
        },
        {
          "type": "object",
          "properties": {
            "usageType": {
              "type": "string",
              "description": "Usage price type. Could be highest applicable tier or each respective tier."
            },
            "usageUnit": {
              "description": "Usage unit applicable for the price.",
              "$ref": "#/definitions/UsageUnit"
            }
          }
        }
      ]
    },
    "ProdOfferPriceAlteration": {
      "description": "A price alteration of the ProductOfferingPrice",
      "allOf": [
        {
          "$ref": "#/definitions/ProductOfferingPrice"
        },
        {
          "type": "object",
          "properties": {
            "cycle": {
              "$ref": "#/definitions/Cycle",
              "description": "Represents the start time, and end time of the recurring cycle (the first 3 months) . If empty, the cycle is the entire recurring period. "
            }
          }
        }
      ]
    },
    "ProdOfferPriceAllowance": {
      "description": "A price alteration of type Allowance",
      "allOf": [
        {
          "$ref": "#/definitions/ProdOfferPriceAlteration"
        }
      ]
    },
    "Channel": {
      "description": "The channel defines the channel for selling product offerings where order has been submitted.",
      "required": [
        "id"
      ],
      "type": "object",
      "properties": {
        "id": {
          "description": "Unique identifier of  the channel",
          "type": "string"
        },
        "href": {
          "description": "Unique reference of the channel",
          "type": "string"
        },
        "name": {
          "description": "Name of the channel",
          "type": "string"
        },
        "role": {
          "description": "Role of the channel - could be 'initChannel', 'submitChannel' for example.",
          "type": "string"
        },
        "@type": {
          "description": "Indicates the (class) type of resource.",
          "type": "string"
        }
      }
    },
    "ChannelRef": {
      "type": "object",
      "description": "Channel reference. The channel defines the channel for selling product offerings.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier of the channel"
        },
        "href": {
          "type": "string",
          "description": "Not Sent.Reference of the channel."
        },
        "name": {
          "type": "string",
          "description": "Not Sent"
        },
        "@referredType": {
          "type": "string",
          "description": "(Class) type of the referred channel"
        }
      }
    },
    "ProductSpecificationRef": {
      "type": "object",
      "description": "Product specification reference: A ProductSpecification is a detailed description of a tangible or intangible object made available externally in the form of a ProductOffering to customers or other parties playing a party role.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier of the product specification"
        },
        "href": {
          "type": "string",
          "description": "Reference of the product specification.(Not supported yet)"
        },
        "version": {
          "type": "string",
          "description": "Version of the product specification API (Not supported yet)"
        },
        "name": {
          "type": "string",
          "description": "Name of the product specification"
        },
        "@referredType": {
          "type": "string",
          "description": "class type of referred Product Specification"
        }
      }
    },
    "CategoryRef": {
      "type": "object",
      "description": "Category reference. The category resource is used to group product offerings, service and resource candidates in logical containers. Categories can contain other categories and/or product offerings.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique reference of the category"
        },
        "href": {
          "type": "string",
          "description": "Not Sent.Unique reference of the category."
        },
        "version": {
          "type": "string",
          "description": "Not Sent.Category version."
        },
        "name": {
          "type": "string",
          "description": "Name of the category"
        },
        "type": {
          "type": "string",
          "description": "Category type, can be Category,VariantCategory or VariantValueCategory."
        },
        "@referredType": {
          "type": "string",
          "description": "The class type of the referred Category"
        }
      }
    },
    "ProductOfferingTerm": {
      "type": "object",
      "description": "A condition under which a ProductOffering is made available to Customers. For instance, a productOffering can be offered with multiple commitment periods.",
      "properties": {
        "name": {
          "type": "string",
          "description": "Name of the productOfferingTerm"
        },
        "id": {
          "type": "string",
          "description": "Id of the productOfferingTerm"
        },
        "description": {
          "type": "string",
          "description": "Not Sent.Description of the productOfferingTerm"
        },
        "duration": {
          "$ref": "#/definitions/Quantity",
          "description": "Duration of the productOfferingTerm"
        },
        "validFor": {
          "$ref": "#/definitions/TimePeriod",
          "description": "Not Sent.The period for which the productOfferingterm is valid"
        },
        "@type": {
          "type": "string",
          "description": "The class type of ProductOfferingTerm"
        },
        "@schemaLocation": {
          "type": "string",
          "description": "A link to the schema describing this product offering term"
        }
      }
    },
    "Attachment": {
      "type": "object",
      "description": "Media items configured for a product offering (images, videos).",
      "properties": {
        "description": {
          "type": "string",
          "description": "A narrative text describing the content of the attachment"
        },
        "href": {
          "type": "string",
          "description": "Not Sent.Reference of the attachment."
        },
        "id": {
          "type": "string",
          "description": "Unique identifier of the attachment"
        },
        "type": {
          "type": "string",
          "description": "Attachment type format."
        },
        "url": {
          "type": "string",
          "description": "Uniform Resource Locator, is a web page address (a subset of URI)"
        },
        "mimeType": {
          "type": "string",
          "description": "Attachment mime type such as extension file for video, picture and document"
        },
        "validFor": {
          "description": "Not Sent.",
          "$ref": "#/definitions/TimePeriod"
        },
        "@type": {
          "type": "string",
          "description": "the class type of the Attachment"
        },
        "@baseType": {
          "type": "string",
          "description": "The immediate base class type of the attachment"
        },
        "@schemaLocation": {
          "type": "string",
          "description": "A link to the schema describing this attachment entity"
        }
      }
    },
    "AttachmentRefOrValue": {
      "type": "object",
      "description": "An attachment by value or by reference. For AttachmentRefOrValue, the attribute type,schemaLocation and referredType are related to the contained entity and not to AttchmentRefOrValue itself",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for this particular attachment"
        },
        "href": {
          "type": "string",
          "description": "URI for this Attachment"
        },
        "attachmentType": {
          "type": "string",
          "description": "Attachment type such as video, picture"
        },
        "content": {
          "type": "string",
          "description": "The actual contents of the attachment object, if embedded, encoded as base64"
        },
        "description": {
          "type": "string",
          "description": "A narrative text describing the content of the attachment"
        },
        "mimeType": {
          "type": "string",
          "description": "Attachment mime type such as extension file for video, picture and document"
        },
        "name": {
          "type": "string",
          "description": "The name of the attachment"
        },
        "url": {
          "type": "string",
          "description": "Uniform Resource Locator, is a web page address (a subset of URI)"
        },
        "size": {
          "$ref": "#/definitions/Quantity",
          "description": "The size of the attachment."
        },
        "validFor": {
          "$ref": "#/definitions/TimePeriod",
          "description": "The period of time for which the attachment is valid"
        },
        "@baseType": {
          "type": "string",
          "description": "When sub-classing, this defines the super-class"
        },
        "@schemaLocation": {
          "type": "string",
          "format": "uri",
          "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
        },
        "@type": {
          "type": "string",
          "description": "When sub-classing, this defines the sub-class entity name"
        },
        "@referredType": {
          "type": "string",
          "description": "The actual type of the target instance when needed for disambiguation."
        }
      }
    },
    "BundledProductOffering": {
      "type": "object",
      "description": "A type of ProductOffering that belongs to a grouping of ProductOfferings made available to the market. It inherits of all attributes of ProductOffering.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Product Offering Id."
        },
        "href": {
          "type": "string",
          "description": "Unique reference of the ProductOffering."
        },
        "lifecycleStatus": {
          "type": "string",
          "description": "Used to indicate the current lifecycle status(approved/checked/unapproved)."
        },
        "name": {
          "type": "string",
          "description": "Name of the ProductOffering."
        },
        "bundledProductOffering": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/BundledProductOffering"
          },
          "description": "Not Sent"
        }
      }
    },
    "ProdSpecCharValueUse": {
      "type": "object",
      "description": "A use of the ProdSpecCharacteristicValue by a ProductOffering to which additional properties (attributes) apply or override the properties of similar properties contained in ProdSpecCharacteristicValue. It should be noted that characteristics which their value(s) addressed by this object must exist in corresponding product specification. The available characteristic values for a ProductSpecCharacteristic in a Product specification can be modified at the ProductOffering level. For example, a characteristic 'Color' might have values White, Blue, Green, and Red. But, the list of values can be restricted to e.g. White and Blue in an associated product offering. It should be noted that the list of values in 'ProdSpecCharValueUse' is a strict subset of the list of values as defined in the corresponding product specification characteristics.",
      "properties": {
        "name": {
          "type": "string",
          "description": "Not Sent"
        },
        "description": {
          "type": "string",
          "description": "A narrative that explains in detail what the productSpecCharacteristic is."
        },
        "valueType": {
          "type": "string",
          "description": "Not Sent"
        },
        "minCardinality": {
          "type": "integer",
          "description": "Not Sent"
        },
        "maxCardinality": {
          "type": "integer",
          "description": "Not Sent"
        },
        "validFor": {
          "$ref": "#/definitions/TimePeriod",
          "description": "Not Sent"
        },
        "productSpecCharacteristicValue": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ProductSpecCharacteristicValue"
          }
        },
        "productSpecification": {
          "$ref": "#/definitions/ProductSpecificationRef"
        }
      }
    },
    "ProductSpecCharacteristicValue": {
      "type": "object",
      "description": "A number or text that can be assigned to a ProductSpecCharacteristic.",
      "properties": {
        "isDefault": {
          "type": "boolean",
          "description": "Not Sent"
        },
        "unitOfMeasure": {
          "type": "string",
          "description": "Could be minutes, GB..."
        },
        "validFor": {
          "$ref": "#/definitions/TimePeriod",
          "description": "Not Sent"
        },
        "value": {
          "type": "string",
          "description": "The value of characteristic.The type of value is determined by ‘valueType’ characteristic."
        },
        "valueFrom": {
          "type": "string",
          "description": "Not Sent"
        },
        "valueTo": {
          "type": "string",
          "description": "Not Sent"
        },
        "valueType": {
          "type": "string",
          "description": "A kind of value that the characteristic can take on, such as numeric, string, boolean.  "
        },
        "rangeInterval": {
          "type": "string",
          "description": "Not Sent"
        },
        "regex": {
          "type": "string",
          "description": "Not Sent"
        },
        "@type": {
          "type": "string",
          "description": "The class type of the characteristic value"
        },
        "@schemaLocation": {
          "type": "string",
          "description": "Hyperlink reference to schema describing this object"
        }
      }
    },
    "ProcessType": {
      "type": "object",
      "description": "Process type. It could be ACQUISITION, RETENTION, CHANGE TARIFF",
      "properties": {
        "id": {
          "type": "string",
          "description": "Process Type id."
        },
        "href": {
          "type": "string",
          "description": "Reference of the Process Type."
        },
        "@type": {
          "description": "Indicated the type of the ProcessType",
          "type": "string"
        },
        "@schemaLocation": {
          "description": "A link to the schema describing the ProcessType",
          "type": "string"
        }
      }
    },
    "QualifiedProcessType": {
      "type": "object",
      "description": "The list of process types that the related party is eligible for.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier of a qualified process type"
        },
        "relatedParty": {
          "$ref": "#/definitions/RelatedPartyRef",
          "description": "The relatedParty that the ProcessType belongs to."
        },
        "processType": {
          "$ref": "#/definitions/ProcessType",
          "description": "The ProcessType that the related party is eligible for."
        },
        "href": {
          "type": "string",
          "description": "Reference of the EligibleProcessType."
        },
        "@type": {
          "description": "Indicated the type of the EligibleProcessType",
          "type": "string"
        },
        "@schemaLocation": {
          "description": "A link to the schema describing the EligibleProcessType",
          "type": "string"
        }
      }
    },
    "Cycle": {
      "type": "object",
      "description": "Represents the billing cycle.",
      "properties": {
        "cycleStart": {
          "type": "integer",
          "description": "Starting cycle."
        },
        "cycleEnd": {
          "type": "integer",
          "description": "Ending cycle."
        }
      }
    },
    "UsageUnit": {
      "type": "object",
      "description": "Represents a usage unit.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier of the usageUnit"
        },
        "name": {
          "type": "string",
          "description": "Name of the usageUnit."
        }
      }
    },
    "UsagePriceChargeEntry": {
      "description": "UsageChargeEntry reference. The UsageChargeEntry defines the usage charge entries of usageCharge for selling product offerings.",
      "allOf": [
        {
          "$ref": "#/definitions/UsagePriceCharge"
        },
        {
          "type": "object",
          "properties": {
            "tierEnd": {
              "type": "integer",
              "format": "int32",
              "description": "Tier end of usageChargeEntry."
            },
            "tierStart": {
              "type": "integer",
              "format": "int32",
              "description": "Tier start of usageChargeEntry."
            },
            "usageSpecification": {
              "$ref": "#/definitions/UsageSpecificationRef"
            }
          }
        }
      ]
    },
    "OfferingGroup": {
      "type": "object",
      "description": "Represents a product offering group entity.",
      "properties": {
        "id": {
          "description": "Unique identifier of the offering group.",
          "type": "string"
        },
        "name": {
          "description": "Name of the offering group.",
          "type": "string"
        },
        "childProductOffering": {
          "type": "array",
          "description": "List of containing product offerings.",
          "items": {
            "$ref": "#/definitions/BundledProductOffering"
          }
        }
      },
      "required": [
        "id"
      ]
    },
    "VariantOption": {
      "type": "object",
      "description": "Variant characteristics.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique reference of the variant option"
        },
        "variantCategory": {
          "type": "string",
          "description": "Variant Category."
        },
        "variantValue": {
          "type": "string",
          "description": "Variant Value."
        }
      },
      "required": [
        "variantCategory",
        "variantValue"
      ]
    },
    "StatusType": {
      "description": "",
      "type": "string",
      "enum": [
        "created",
        "pendingActive",
        "cancelled",
        "active",
        "pendingTerminate",
        "terminated",
        "suspended",
        "aborted"
      ]
    },
    "ErrorRepresentation": {
      "description": "Error Representation",
      "required": [
        "code",
        "reason"
      ],
      "type": "object",
      "properties": {
        "code": {
          "description": "",
          "type": "integer",
          "format": "int32"
        },
        "reason": {
          "description": "",
          "type": "string"
        },
        "message": {
          "description": "",
          "type": "string"
        },
        "status": {
          "description": "",
          "type": "string"
        },
        "referenceError": {
          "description": "",
          "type": "string"
        },
        "@type": {
          "description": "",
          "type": "string"
        },
        "@schemaLocation": {
          "description": "",
          "type": "string"
        }
      }
    },
    "Product": {
      "description": "A Product represents the subscription of a ProductOffering by a Party playing a PartyRole, such as a Customer.  For example, Jean has subscribed to company ABC’s internet ProductOffering.\nThe association between ProductSpecification and Product allows ProductSpecification, to be instantiated as Product and related to customers or other involved parties.",
      "type": "object",
      "properties": {
        "id": {
          "description": "Unique identifier of the product",
          "type": "string"
        },
        "href": {
          "description": "Reference of the product",
          "type": "string"
        },
        "description": {
          "description": "The description of the product. It could be copied from the description of the Product Offering.",
          "type": "string"
        },
        "isBundle": {
          "description": "If true, the product is a ProductBundle which is an instantiation of a BundledProductOffering. If false, the product is a ProductComponent which is an instantiation of a SimpleProductOffering",
          "type": "boolean"
        },
        "isCustomerVisible": {
          "description": "If true, the product is visible by the customer",
          "type": "boolean"
        },
        "name": {
          "description": "The name of the product. It could be the same as the name of the Product Offering",
          "type": "string"
        },
        "productSerialNumber": {
          "description": "Serial number for the product. This is typically applicable to tangible products e.g. Broadband Router.",
          "type": "string"
        },
        "startDate": {
          "description": "The date from which the product starts",
          "type": "string",
          "format": "date-time"
        },
        "status": {
          "$ref": "#/definitions/StatusType"
        },
        "terminationDate": {
          "description": "The date when the product was terminated. Not applicable to active products",
          "type": "string",
          "format": "date-time"
        },
        "@baseType": {
          "description": "Indicates the base type of the resource. Here can be 'Product'",
          "type": "string"
        },
        "@type": {
          "description": "Indicated the type of resource.",
          "type": "string"
        },
        "@schemaLocation": {
          "description": "A link to the schema describing this REST resource.",
          "type": "string"
        },
        "place": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Place"
          }
        },
        "productOffering": {
          "$ref": "#/definitions/ProductOfferingRef"
        },
        "productSpecification": {
          "$ref": "#/definitions/ProductSpecification"
        },
        "characteristic": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ProductCharacteristic"
          }
        },
        "productRelationship": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ProductRelationship"
          }
        },
        "billingAccount": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/BillingAccountRef"
          }
        },
        "relatedParty": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/RelatedParty"
          }
        },
        "realizingResource": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/RealizingResource"
          }
        },
        "realizingService": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/RealizingService"
          }
        },
        "productPrice": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ProductPrice"
          }
        },
        "productOrder": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ProductOrderRef"
          }
        },
        "productTerm": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ProductTerm"
          }
        }
      }
    },
    "ProductOfferingRef": {
      "discriminator": "@type",
      "description": "ProductOffering reference. A product offering represents entities that are orderable from the provider of the catalog, this resource includes pricing information.",
      "required": [
        "id"
      ],
      "type": "object",
      "properties": {
        "id": {
          "description": "Unique identifier of the product offering",
          "type": "string"
        },
        "href": {
          "description": "Reference of the product offering",
          "type": "string"
        },
        "name": {
          "description": "Name of the product offering",
          "type": "string"
        },
        "image": {
          "description": "Thumbnail image of the product offering",
          "$ref": "#/definitions/Attachment"
        },
        "variantOption": {
          "description": "Variant options, in case of a variant product offering.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/VariantOption"
          }
        },
        "@referredType": {
          "description": "Type (class) of the product offering",
          "type": "string"
        },
        "@type": {
          "description": "Type (class) of the product offering",
          "type": "string"
        }
      }
    },
    "ProductSpecification": {
      "description": "A ProductSpecification is a detailed description of a tangible or intangible object made available externally in the form of a ProductOffering to customers or other parties playing a party role.",
      "required": [
        "id"
      ],
      "type": "object",
      "properties": {
        "id": {
          "description": "Unique identifier of the product specification",
          "type": "string"
        },
        "href": {
          "description": "Reference of the product specification",
          "type": "string"
        },
        "version": {
          "description": "Version of the product specification",
          "type": "string"
        },
        "name": {
          "description": "Name of the product specification",
          "type": "string"
        },
        "brand": {
          "type": "string",
          "description": "The manufacturer or trademark of the specification"
        },
        "description": {
          "type": "string",
          "description": "A narrative that explains in detail what the product specification is"
        },
        "isBundle": {
          "type": "boolean",
          "description": "isBundle determines whether a productSpecification represents a single productSpecification (false), or a bundle of productSpecification (true)."
        },
        "lastUpdate": {
          "type": "string",
          "format": "date-time",
          "description": "Date and time of the last update"
        },
        "lifecycleStatus": {
          "type": "string",
          "description": "Used to indicate the current lifecycle status"
        },
        "productNumber": {
          "type": "string",
          "description": "An identification number assigned to uniquely identity the specification"
        },
        "bundledProductSpecification": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/BundledProductSpecification"
          },
          "description": "A type of ProductSpecification that belongs to a grouping of ProductSpecifications made available to the market. It inherits of all attributes of ProductSpecification."
        },
        "productSpecCharacteristic": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ProductSpecCharacteristic"
          },
          "description": "A characteristic quality or distinctive feature of a ProductSpecification.  The characteristic can be take on a discrete value, such as color, can take on a range of values, (for example, sensitivity of 100-240 mV), or can be derived from a formula (for example, usage time (hrs) = 30 - talk time *3). Certain characteristics, such as color, may be configured during the ordering or some other process."
        },
        "serviceSpecification": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ServiceSpecificationRef"
          },
          "description": "ServiceSpecification(s) required to realize a ProductSpecification."
        },
        "validFor": {
          "$ref": "#/definitions/TimePeriod",
          "description": "The period for which the product specification is valid"
        },
        "usageSpecification": {
          "$ref": "#/definitions/UsageSpecificationRef",
          "description": "The Product Usage Specification which describes the types of Usage events generated by offerings with this Product Specification"
        },
        "productSpecType": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ProductSpecType"
          },
          "description": "Represents the product specification type"
        },
        "@baseType": {
          "type": "string",
          "description": "When sub-classing, this defines the super-class"
        },
        "@schemaLocation": {
          "type": "string",
          "format": "uri",
          "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
        },
        "@type": {
          "type": "string",
          "description": "When sub-classing, this defines the sub-class entity name"
        }
      }
    },
    "ProductCharacteristic": {
      "description": "Characteristics of the product to instantiate or to modify.",
      "type": "object",
      "properties": {
        "name": {
          "description": "Name of the characteristic",
          "type": "string"
        },
        "value": {
          "description": "Value of the characteristic",
          "type": "string"
        },
        "@type": {
          "description": "Indicates the (class) type of resource",
          "type": "string"
        },
        "@schemaLocation": {
          "description": "This field provided a link to the schema describing this REST resource.",
          "type": "string"
        }
      }
    },
    "ProductRelationship": {
      "description": "Type of the product relationship. it can be 'bundled' if the product is a bundle and you want to describe the 'bundled' products inside this bundle, 'reliesOn' if the product needs another already owned product to rely on \n(e.g. an option on an already owned mobile access product) or 'targets' or 'isTargeted' (depending on the way of expressing the link) for any other kind of links that may be useful",
      "required": [
        "product"
      ],
      "type": "object",
      "properties": {
        "type": {
          "description": "Type of the product relationship",
          "type": "string"
        },
        "product": {
          "$ref": "#/definitions/ProductRef"
        }
      }
    },
    "BillingAccountRef": {
      "description": "A BillingAccount is a detailed description of a bill structure",
      "required": [
        "id"
      ],
      "type": "object",
      "properties": {
        "id": {
          "description": "Unique identier of the billing account",
          "type": "string"
        },
        "href": {
          "description": "Reference of the billing account",
          "type": "string"
        },
        "name": {
          "description": "Name of the billing account",
          "type": "string"
        },
        "@referredType": {
          "description": "Indicates the (class) type of the billing account",
          "type": "string"
        }
      }
    },
    "RelatedParty": {
      "description": "The party which the product is related with.",
      "type": "object",
      "properties": {
        "id": {
          "description": "Unique identifier of the related party",
          "type": "string"
        },
        "href": {
          "description": "Reference of the related party",
          "type": "string"
        },
        "name": {
          "description": "Name of the related party",
          "type": "string"
        },
        "role": {
          "description": "Role played by the related party",
          "type": "string"
        },
        "@schemaLocation": {
          "type": "string",
          "format": "uri",
          "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
        },
        "@type": {
          "type": "string",
          "description": "When sub-classing, this defines the sub-class entity name"
        }
      }
    },
    "RealizingResource": {
      "description": "RealizingResource reference. RealizingResource is a link to the resource that realizes the product.",
      "required": [
        "id"
      ],
      "type": "object",
      "properties": {
        "id": {
          "description": "Unique identifier of the resource",
          "type": "string"
        },
        "href": {
          "description": "Reference of the resource",
          "type": "string"
        },
        "name": {
          "description": "Name of the resource.",
          "type": "string"
        },
        "role": {
          "description": "Role of the resource",
          "type": "string"
        },
        "@referredType": {
          "description": "Indicate the class (type) of the realizing resource",
          "type": "string"
        }
      }
    },
    "RealizingService": {
      "description": "RealizingService reference. RealizingService is a link to the service that realizes the product.",
      "required": [
        "id"
      ],
      "type": "object",
      "properties": {
        "id": {
          "description": "Unique identifier of the service",
          "type": "string"
        },
        "href": {
          "description": "Reference of the service",
          "type": "string"
        },
        "name": {
          "description": "Name of the service",
          "type": "string"
        },
        "role": {
          "description": "Role of the realizing service",
          "type": "string"
        },
        "@referredType": {
          "description": "Indicate the class (type) of the realizing service.",
          "type": "string"
        }
      }
    },
    "ProductPrice": {
      "description": "An amount, usually of money, that represents the actual price paid by a Customer for a purchase, a rent or a lease of a Product. The price is valid for a defined period of time.",
      "type": "object",
      "properties": {
        "id": {
          "description": "Unique identifier of a productOfferingPrice",
          "type": "string"
        },
        "name": {
          "description": "A short descriptive name such as \"Subscription price\"",
          "type": "string"
        },
        "description": {
          "description": "A narrative that explains in detail the semantics of this product price",
          "type": "string"
        },
        "priceType": {
          "description": "A category that describes the price, such as recurring, discount, allowance, penalty, and so forth",
          "type": "string"
        },
        "recurringChargePeriod": {
          "description": "Could be month, week...",
          "type": "string"
        },
        "unitOfMeasure": {
          "description": "Could be minutes, GB...",
          "type": "string"
        },
        "@type": {
          "description": "Indicates the type of ProductPrice class",
          "type": "string"
        },
        "@schemaLocation": {
          "description": "A link to the schema describing this REST resource",
          "type": "string"
        },
        "price": {
          "$ref": "#/definitions/Price"
        },
        "prodPriceAlteration": {
          "$ref": "#/definitions/PriceAlteration"
        },
        "billingAccount": {
          "$ref": "#/definitions/BillingAccountRef"
        }
      }
    },
    "Price": {
      "description": "Provides all amounts (tax included, duty free, tax rate), used currency and percentage applied for price and price alteration",
      "type": "object",
      "properties": {
        "taxIncludedAmount": {
          "$ref": "#/definitions/Money"
        },
        "dutyFreeAmount": {
          "$ref": "#/definitions/Money"
        },
        "percentage": {
          "description": "Percentage applied",
          "type": "number",
          "format": "float"
        },
        "taxRate": {
          "description": "Applied tax rate on amount",
          "type": "number",
          "format": "float"
        },
        "@type": {
          "description": "Indicates the (class) type of the price",
          "type": "string"
        },
        "@schemaLocation": {
          "description": "Link to the schema describing this REST resource.",
          "type": "string"
        }
      }
    },
    "TimePeriod": {
      "description": "A time period described through 2 dates",
      "type": "object",
      "properties": {
        "startDateTime": {
          "type": "string",
          "format": "date-time"
        },
        "endDateTime": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "ProductRef": {
      "description": "A product reference to be used for relationship target",
      "required": [
        "id"
      ],
      "type": "object",
      "properties": {
        "id": {
          "description": "Unique identifier of the product",
          "type": "string"
        },
        "href": {
          "description": "Reference of the product",
          "type": "string"
        }
      }
    },
    "Place": {
      "description": "Place defines the places where the products are sold, delivered. A place may be used for marking a geo location.",
      "required": [
        "role"
      ],
      "type": "object",
      "properties": {
        "id": {
          "description": "Unique identifier of the place",
          "type": "string"
        },
        "href": {
          "description": "Reference of the place",
          "type": "string"
        },
        "name": {
          "description": "A user-friendly name for the place",
          "type": "string"
        },
        "role": {
          "description": "Role of the place (for instance: 'installation site', 'A-extremity site', 'Supervised Perimeter' etc...)",
          "type": "string"
        },
        "@referredType": {
          "description": "Indicate the type of Place class (example: 'geographicAddress')",
          "type": "string"
        },
        "@schemaLocation": {
          "description": "A link to the schema describing this REST resource",
          "type": "string"
        }
      }
    },
    "PriceAlteration": {
      "type": "object",
      "description": "Is an amount, usually of money, that modifies the price charged for an order item.",
      "properties": {
        "@baseType": {
          "type": "string",
          "description": "Generic attribute indicating the base class type of the extension class of the current object. Useful only when the class type of the current  object is unknown to the implementation."
        },
        "@schemaLocation": {
          "type": "string",
          "description": "Generic attribute containing the link to the schema that defines the structure of the class type of the current object."
        },
        "@type": {
          "type": "string",
          "description": "Generic attribute containing the name of the resource class type"
        },
        "applicationDuration": {
          "type": "integer",
          "description": "Duration during which the alteration applies on the order item price (for instance 2 months free of charge for the recurring charge)"
        },
        "description": {
          "type": "string",
          "description": "A narrative that explains in detail the semantics of this order item price alteration"
        },
        "name": {
          "type": "string",
          "description": "A short descriptive name such as \"Monthly discount\""
        },
        "priceType": {
          "type": "string",
          "description": "A category that describes the price such as recurring, one time and usage."
        },
        "priority": {
          "type": "integer",
          "description": "Priority level for applying this alteration among all the defined alterations on the order item price"
        },
        "recurringChargePeriod": {
          "type": "string",
          "description": "Could be month, week..."
        },
        "unitOfMeasure": {
          "type": "string",
          "description": "Could be minutes, GB..."
        },
        "price": {
          "$ref": "#/definitions/Price"
        },
        "cycle": {
          "$ref": "#/definitions/Cycle"
        },
        "productOfferingPrice": {
          "$ref": "#/definitions/ProductOfferingPriceRef"
        }
      }
    },
    "ProductOrderRef": {
      "description": "The product order(s) related to this product inventory",
      "required": [
        "orderItemId"
      ],
      "type": "object",
      "properties": {
        "id": {
          "description": "Unique identifier of product order",
          "type": "string"
        },
        "href": {
          "description": "Hypertext Reference of the product order",
          "type": "string"
        },
        "@referredType": {
          "description": "Indicate the class (type) of productOrder",
          "type": "string"
        },
        "orderItemId": {
          "description": "Identifier of the order item where the product was managed",
          "type": "string"
        },
        "orderItemAction": {
          "description": "Action of the order item for this product",
          "type": "string"
        }
      }
    },
    "ProductTerm": {
      "description": "This represent a commitment with a duration",
      "type": "object",
      "properties": {
        "name": {
          "description": "Name of the commitment term",
          "type": "string"
        },
        "description": {
          "description": "Description of the commitment term",
          "type": "string"
        },
        "duration": {
          "$ref": "#/definitions/Quantity"
        },
        "validFor": {
          "$ref": "#/definitions/TimePeriod"
        },
        "@type": {
          "description": "Indicate the class (type) of the product term",
          "type": "string"
        }
      }
    },
    "Money": {
      "description": "A base / value business entity used to represent money.",
      "required": [
        "value",
        "unit"
      ],
      "type": "object",
      "properties": {
        "value": {
          "description": "A positive floating point number",
          "type": "string"
        },
        "unit": {
          "description": "Currency (ISO4217 norm uses 3 letters to define the currency).",
          "type": "string"
        }
      }
    },
    "TargetResourceSchema": {
      "description": "Target to the schema describing the product spec resource",
      "required": [
        "@type"
      ],
      "type": "object",
      "properties": {
        "@type": {
          "description": "Indicated the type of the productSpec described there - for example an E-Line Spec, a CPE spec",
          "type": "string"
        },
        "@schemaLocation": {
          "description": "A link to the schema describing the product spec",
          "type": "string"
        }
      }
    },
    "Quantity": {
      "description": "Description of a quantity like for the Duration attribute",
      "required": [
        "amount",
        "units"
      ],
      "type": "object",
      "properties": {
        "amount": {
          "description": "A value for the quantity",
          "type": "number",
          "format": "float"
        },
        "units": {
          "description": "A unit associated with the quantity (for example months)",
          "type": "string"
        }
      }
    },
    "DeliveryMode": {
      "type": "object",
      "description": "",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier of the delivery mode."
        },
        "href": {
          "type": "string",
          "description": "Reference of the delivery mode."
        },
        "name": {
          "type": "string",
          "description": "Name of the delivery mode."
        },
        "description": {
          "type": "string",
          "description": "Description of the delivery mode."
        },
        "@type": {
          "type": "string",
          "description": "Class type of the delivery mode"
        },
        "@schemaLocation": {
          "type": "string",
          "description": "A link to the schema describing this delivery mode"
        },
        "price": {
          "$ref": "#/definitions/Money",
          "description": "The price of the delivery mode."
        },
        "shoppingCart": {
          "$ref": "#/definitions/ShoppingCartRef",
          "description": "Reference to the shopping cart."
        },
        "relatedParty": {
          "$ref": "#/definitions/RelatedPartyRef",
          "description": "Reference to the related party."
        }
      }
    },
    "DeliveryModeRef": {
      "type": "object",
      "description": "",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier of the delivery mode."
        },
        "name": {
          "type": "string",
          "description": "Name of the delivery mode."
        },
        "href": {
          "type": "string",
          "description": "Reference of the delivery mode."
        },
        "@type": {
          "type": "string",
          "description": "Class type of the delivery mode"
        },
        "@referredType": {
          "type": "string",
          "description": "(Class) type of the referred delivery mode"
        }
      }
    },
    "ShoppingCartRef": {
      "type": "object",
      "description": "Reference to the shopping cart",
      "required": [
        "id"
      ],
      "properties": {
        "id": {
          "description": "Unique identifier of the shopping cart",
          "type": "string"
        },
        "href": {
          "description": "Reference of the shopping cart",
          "type": "string"
        }
      }
    },
    "ProductOffering_Create": {
      "type": "object",
      "description": "Represents entities that are orderable from the provider of the catalog, this resource includes pricing information.\nSkipped properties: id,href",
      "required": [
        "name"
      ],
      "properties": {
        "name": {
          "type": "string",
          "description": "Name of the productOffering"
        },
        "description": {
          "type": "string",
          "description": "Description of the productOffering"
        },
        "isBundle": {
          "type": "boolean",
          "description": "isBundle determines whether a productOffering represents a single productOffering (false), or a bundle of productOfferings (true)."
        },
        "lastUpdate": {
          "type": "string",
          "format": "date-time",
          "description": "Date and time of the last update"
        },
        "lifecycleStatus": {
          "type": "string",
          "description": "Used to indicate the current lifecycle status"
        },
        "validFor": {
          "$ref": "#/definitions/TimePeriod",
          "description": "The period for which the productOffering is valid"
        },
        "version": {
          "type": "string",
          "description": "ProductOffering version"
        },
        "@type": {
          "type": "string",
          "description": "Class type of the product offering"
        },
        "@baseType": {
          "type": "string",
          "description": "Immediate base (class) type of the product offering"
        },
        "@schemaLocation": {
          "type": "string",
          "description": "A link to the schema describing this product offering"
        },
        "isSellable": {
          "type": "boolean",
          "description": "A flag indicating if this product offer can be sold stand-alone for sale or not. If this flag is false it indicates that the offer can only be sold within a bundle."
        },
        "place": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PlaceRef"
          }
        },
        "serviceLevelAgreement": {
          "$ref": "#/definitions/SLARef"
        },
        "productSpecification": {
          "$ref": "#/definitions/ProductSpecificationRef"
        },
        "channel": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ChannelRef"
          }
        },
        "serviceCandidate": {
          "$ref": "#/definitions/ServiceCandidateRef"
        },
        "attachment": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Attachment"
          }
        },
        "category": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CategoryRef"
          }
        },
        "resourceCandidate": {
          "$ref": "#/definitions/ResourceCandidateRef"
        },
        "productOfferingTerm": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ProductOfferingTerm"
          }
        },
        "marketSegment": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MarketSegmentRef"
          }
        },
        "productOfferingPrice": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ProductOfferingPrice"
          }
        },
        "agreement": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AgreementRef"
          }
        },
        "bundledProductOffering": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/BundledProductOffering"
          }
        },
        "prodSpecCharValueUse": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ProdSpecCharValueUse"
          }
        }
      }
    },
    "ProductOffering_Update": {
      "type": "object",
      "description": "Represents entities that are orderable from the provider of the catalog, this resource includes pricing information.\nSkipped properties: id,href,id,href,lastUpdate",
      "properties": {
        "name": {
          "type": "string",
          "description": "Name of the productOffering"
        },
        "description": {
          "type": "string",
          "description": "Description of the productOffering"
        },
        "isBundle": {
          "type": "boolean",
          "description": "isBundle determines whether a productOffering represents a single productOffering (false), or a bundle of productOfferings (true)."
        },
        "lifecycleStatus": {
          "type": "string",
          "description": "Used to indicate the current lifecycle status"
        },
        "validFor": {
          "$ref": "#/definitions/TimePeriod",
          "description": "The period for which the productOffering is valid"
        },
        "version": {
          "type": "string",
          "description": "ProductOffering version"
        },
        "@type": {
          "type": "string",
          "description": "Class type of the product offering"
        },
        "@baseType": {
          "type": "string",
          "description": "Immediate base (class) type of the product offering"
        },
        "@schemaLocation": {
          "type": "string",
          "description": "A link to the schema describing this product offering"
        },
        "isSellable": {
          "type": "boolean",
          "description": "A flag indicating if this product offer can be sold stand-alone for sale or not. If this flag is false it indicates that the offer can only be sold within a bundle."
        },
        "place": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PlaceRef"
          }
        },
        "serviceLevelAgreement": {
          "$ref": "#/definitions/SLARef"
        },
        "productSpecification": {
          "$ref": "#/definitions/ProductSpecificationRef"
        },
        "channel": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ChannelRef"
          }
        },
        "serviceCandidate": {
          "$ref": "#/definitions/ServiceCandidateRef"
        },
        "attachment": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Attachment"
          }
        },
        "category": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CategoryRef"
          }
        },
        "resourceCandidate": {
          "$ref": "#/definitions/ResourceCandidateRef"
        },
        "productOfferingTerm": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ProductOfferingTerm"
          }
        },
        "marketSegment": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MarketSegmentRef"
          }
        },
        "productOfferingPrice": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ProductOfferingPrice"
          }
        },
        "agreement": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AgreementRef"
          }
        },
        "bundledProductOffering": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/BundledProductOffering"
          }
        },
        "prodSpecCharValueUse": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ProdSpecCharValueUse"
          }
        }
      }
    },
    "ImportJob": {
      "type": "object",
      "description": "Represents a task used to import resources from a file",
      "properties": {
        "id": {
          "type": "string",
          "description": "Identifier of the import job"
        },
        "href": {
          "type": "string",
          "description": "Reference of the import job"
        },
        "contentType": {
          "type": "string",
          "description": "Indicates the format of the imported data"
        },
        "path": {
          "type": "string",
          "description": "URL of the root resource where the content of the file specified by the import job must be applied"
        },
        "status": {
          "type": "string",
          "description": "Status of the import job (not started, running, succeeded, failed)"
        },
        "url": {
          "type": "string",
          "description": "URL of the file containing the data to be imported"
        },
        "completionDate": {
          "type": "string",
          "format": "date-time",
          "description": "Date at which the job was completed"
        },
        "creationDate": {
          "type": "string",
          "format": "date-time",
          "description": "Date at which the job was created"
        },
        "errorLog": {
          "type": "string",
          "description": "Reason for failure if status is failed"
        }
      }
    },
    "ImportJob_Create": {
      "type": "object",
      "description": "Represents a task used to import resources from a file\nSkipped properties: id,href",
      "required": [
        "url"
      ],
      "properties": {
        "contentType": {
          "type": "string",
          "description": "Indicates the format of the imported data"
        },
        "path": {
          "type": "string",
          "description": "URL of the root resource where the content of the file specified by the import job must be applied"
        },
        "status": {
          "type": "string",
          "description": "Status of the import job (not started, running, succeeded, failed)"
        },
        "url": {
          "type": "string",
          "description": "URL of the file containing the data to be imported"
        },
        "completionDate": {
          "type": "string",
          "format": "date-time",
          "description": "Date at which the job was completed"
        },
        "creationDate": {
          "type": "string",
          "format": "date-time",
          "description": "Date at which the job was created"
        },
        "errorLog": {
          "type": "string",
          "description": "Reason for failure if status is failed"
        }
      }
    },
    "ProductSpecification_Create": {
      "type": "object",
      "description": "Is a detailed description of a tangible or intangible object made available externally in the form of a ProductOffering to customers or other parties playing a party role.\nSkipped properties: id,href",
      "required": [
        "name"
      ],
      "properties": {
        "name": {
          "type": "string",
          "description": "Name of the product specification"
        },
        "description": {
          "type": "string",
          "description": "A narrative that explains in detail what the product specification is"
        },
        "brand": {
          "type": "string",
          "description": "The manufacturer or trademark of the specification"
        },
        "isBundle": {
          "type": "boolean",
          "description": "isBundle determines whether a productSpecification represents a single productSpecification (false), or a bundle of productSpecification (true)."
        },
        "lastUpdate": {
          "type": "string",
          "format": "date-time",
          "description": "Date and time of the last update"
        },
        "lifecycleStatus": {
          "type": "string",
          "description": "Used to indicate the current lifecycle status"
        },
        "productNumber": {
          "type": "string",
          "description": "An identification number assigned to uniquely identity the specification"
        },
        "validFor": {
          "$ref": "#/definitions/TimePeriod",
          "description": "The period for which the product specification is valid"
        },
        "version": {
          "type": "string",
          "description": "Product specification version"
        },
        "@type": {
          "type": "string",
          "description": "class type of the product specification"
        },
        "@baseType": {
          "type": "string",
          "description": "base class type  (immediate parent) of the product specification"
        },
        "@schemaLocation": {
          "type": "string",
          "description": "hyperlink reference to schema describing this object"
        },
        "relatedParty": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/RelatedPartyRef"
          }
        },
        "productSpecCharacteristic": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ProductSpecCharacteristic"
          }
        },
        "serviceSpecification": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ServiceSpecificationRef"
          }
        },
        "targetProductSchema": {
          "$ref": "#/definitions/TargetProductSchemaRef"
        },
        "productSpecificationRelationship": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ProductSpecificationRelationship"
          }
        },
        "resourceSpecification": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ResourceSpecificationRef"
          }
        },
        "attachment": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Attachment"
          }
        },
        "bundledProductSpecification": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/BundledProductSpecification"
          }
        }
      }
    },
    "ProductSpecification_Update": {
      "type": "object",
      "description": "Is a detailed description of a tangible or intangible object made available externally in the form of a ProductOffering to customers or other parties playing a party role.\nSkipped properties: id,href,id,href",
      "properties": {
        "name": {
          "type": "string",
          "description": "Name of the product specification"
        },
        "description": {
          "type": "string",
          "description": "A narrative that explains in detail what the product specification is"
        },
        "brand": {
          "type": "string",
          "description": "The manufacturer or trademark of the specification"
        },
        "isBundle": {
          "type": "boolean",
          "description": "isBundle determines whether a productSpecification represents a single productSpecification (false), or a bundle of productSpecification (true)."
        },
        "lastUpdate": {
          "type": "string",
          "format": "date-time",
          "description": "Date and time of the last update"
        },
        "lifecycleStatus": {
          "type": "string",
          "description": "Used to indicate the current lifecycle status"
        },
        "productNumber": {
          "type": "string",
          "description": "An identification number assigned to uniquely identity the specification"
        },
        "validFor": {
          "$ref": "#/definitions/TimePeriod",
          "description": "The period for which the product specification is valid"
        },
        "version": {
          "type": "string",
          "description": "Product specification version"
        },
        "@type": {
          "type": "string",
          "description": "class type of the product specification"
        },
        "@baseType": {
          "type": "string",
          "description": "base class type  (immediate parent) of the product specification"
        },
        "@schemaLocation": {
          "type": "string",
          "description": "hyperlink reference to schema describing this object"
        },
        "relatedParty": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/RelatedPartyRef"
          }
        },
        "productSpecCharacteristic": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ProductSpecCharacteristic"
          }
        },
        "serviceSpecification": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ServiceSpecificationRef"
          }
        },
        "targetProductSchema": {
          "$ref": "#/definitions/TargetProductSchemaRef"
        },
        "productSpecificationRelationship": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ProductSpecificationRelationship"
          }
        },
        "resourceSpecification": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ResourceSpecificationRef"
          }
        },
        "attachment": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Attachment"
          }
        },
        "bundledProductSpecification": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/BundledProductSpecification"
          }
        }
      }
    },
    "Catalog": {
      "discriminator": "@type",
      "type": "object",
      "description": "The root entity for entity catalog management. An entity catalog can be defined as a collection of entity catalog items and arranging them in a particular manner based on the need.\nIn comparison to Product, Service and Resource catalogs, the entity catalog is intended for the purpose of providing any SID entity to consumers via a catalog, with its specification and policy providing governance over its content. Even Entity catalog may have an overlap with Product, Service or Resource catalog, it doesn't replace them. It is primarily intended to address those SID entities which may not be addressed by any of Product, Service or Resource catalog.\nAn entity catalog comprises of a list of RootEntities made available through EntityCatalogItems. This API addresses only RootEntity extended items as EntitySpecification. An entity catalog typically includes name, description and time period that it is valid for.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier of the Catalog"
        },
        "href": {
          "type": "string",
          "description": "Unique reference of the catalog"
        },
        "name": {
          "type": "string",
          "description": "Name of the catalog"
        },
        "description": {
          "type": "string",
          "description": "Description of this catalog"
        },
        "@type": {
          "type": "string",
          "description": "Indicates the (class) type of catalog. For entity catalogs, this will be 'EntityCatalog'."
        },
        "@schemaLocation": {
          "type": "string",
          "description": "This field provides a link to the schema describing this REST resource"
        },
        "@baseType": {
          "type": "string",
          "description": "Indicates<b> </b>the base (class) type of this REST resource"
        },
        "version": {
          "type": "string",
          "description": "Catalog version"
        },
        "validFor": {
          "$ref": "#/definitions/TimePeriod",
          "description": "The period for which the catalog is valid"
        },
        "lastUpdate": {
          "type": "string",
          "format": "date-time",
          "description": "Date and time of the last update"
        },
        "lifecycleStatus": {
          "type": "string",
          "description": "Used to indicate the current lifecycle status"
        },
        "baseStore": {
          "$ref": "#/definitions/BaseStoreRef",
          "description": "Reference to the baseStore"
        }
      }
    },
    "ClassificationSystem": {
      "description": "Classification System subtype of the Catalog entity.",
      "allOf": [
        {
          "$ref": "#/definitions/Catalog"
        }
      ]
    },
    "ContentCatalog": {
      "description": "Content Catalog subtype of the Catalog entity.",
      "allOf": [
        {
          "$ref": "#/definitions/Catalog"
        }
      ]
    },
    "BaseStoreRef": {
      "type": "object",
      "description": "Reference to the base store.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier of the BaseStore"
        },
        "href": {
          "type": "string",
          "description": "Unique reference of the BaseStore"
        },
        "name": {
          "type": "string",
          "description": "Name of the BaseStore"
        }
      }
    },
    "Catalog_Create": {
      "type": "object",
      "description": "The root entity for entity catalog management. An entity catalog can be defined as a collection of entity catalog items and arranging them in a particular manner based on the need.\nIn comparison to Product, Service and Resource catalogs, the entity catalog is intended for the purpose of providing any SID entity to consumers via a catalog, with its specification and policy providing governance over its content. Even Entity catalog may have an overlap with Product, Service or Resource catalog, it doesn't replace them. It is primarily intended to address those SID entities which may not be addressed by any of Product, Service or Resource catalog.\nAn entity catalog comprises of a list of RootEntities made available through EntityCatalogItems. This API addresses only RootEntity extended items as EntitySpecification. An entity catalog typically includes name, description and time period that it is valid for.\nSkipped properties: id,href",
      "required": [
        "name"
      ],
      "properties": {
        "name": {
          "type": "string",
          "description": "Name of the catalog"
        },
        "description": {
          "type": "string",
          "description": "Description of this catalog"
        },
        "@type": {
          "type": "string",
          "description": "Indicates the (class) type of catalog. For entity catalogs, this will be 'EntityCatalog'."
        },
        "@schemaLocation": {
          "type": "string",
          "description": "This field provides a link to the schema describing this REST resource"
        },
        "@baseType": {
          "type": "string",
          "description": "Indicates<b> </b>the base (class) type of this REST resource"
        },
        "version": {
          "type": "string",
          "description": "Catalog version"
        },
        "validFor": {
          "$ref": "#/definitions/TimePeriod",
          "description": "The period for which the catalog is valid"
        },
        "lastUpdate": {
          "type": "string",
          "format": "date-time",
          "description": "Date and time of the last update"
        },
        "lifecycleStatus": {
          "type": "string",
          "description": "Used to indicate the current lifecycle status"
        }
      }
    },
    "Catalog_Update": {
      "type": "object",
      "description": "The root entity for entity catalog management. An entity catalog can be defined as a collection of entity catalog items and arranging them in a particular manner based on the need.\nIn comparison to Product, Service and Resource catalogs, the entity catalog is intended for the purpose of providing any SID entity to consumers via a catalog, with its specification and policy providing governance over its content. Even Entity catalog may have an overlap with Product, Service or Resource catalog, it doesn't replace them. It is primarily intended to address those SID entities which may not be addressed by any of Product, Service or Resource catalog.\nAn entity catalog comprises of a list of RootEntities made available through EntityCatalogItems. This API addresses only RootEntity extended items as EntitySpecification. An entity catalog typically includes name, description and time period that it is valid for.\nSkipped properties: id,href,id,href",
      "properties": {
        "name": {
          "type": "string",
          "description": "Name of the catalog"
        },
        "description": {
          "type": "string",
          "description": "Description of this catalog"
        },
        "@type": {
          "type": "string",
          "description": "Indicates the (class) type of catalog. For entity catalogs, this will be 'EntityCatalog'."
        },
        "@schemaLocation": {
          "type": "string",
          "description": "This field provides a link to the schema describing this REST resource"
        },
        "@baseType": {
          "type": "string",
          "description": "Indicates<b> </b>the base (class) type of this REST resource"
        },
        "version": {
          "type": "string",
          "description": "Catalog version"
        },
        "validFor": {
          "$ref": "#/definitions/TimePeriod",
          "description": "The period for which the catalog is valid"
        },
        "lastUpdate": {
          "type": "string",
          "format": "date-time",
          "description": "Date and time of the last update"
        },
        "lifecycleStatus": {
          "type": "string",
          "description": "Used to indicate the current lifecycle status"
        }
      }
    },
    "ExportJob": {
      "type": "object",
      "description": "Represents a task used to export resources to a file",
      "properties": {
        "id": {
          "type": "string",
          "description": "Identifier of the export job"
        },
        "href": {
          "type": "string",
          "description": "Reference of the export job"
        },
        "query": {
          "type": "string",
          "description": "Used to scope the exported data"
        },
        "path": {
          "type": "string",
          "description": "URL of the root resource acting as the source for streaming content to the file specified by the export job"
        },
        "contentType": {
          "type": "string",
          "description": "The format of the exported data"
        },
        "status": {
          "type": "string",
          "description": "Status of the export job (not started, running, succeeded, failed)"
        },
        "url": {
          "type": "string",
          "description": "URL of the file containing the data to be exported"
        },
        "completionDate": {
          "type": "string",
          "format": "date-time",
          "description": "Data at which the job was completed"
        },
        "creationDate": {
          "type": "string",
          "format": "date-time",
          "description": "Date at which the job was created"
        },
        "errorLog": {
          "type": "string",
          "description": "Reason for failure"
        }
      }
    },
    "ExportJob_Create": {
      "type": "object",
      "description": "Represents a task used to export resources to a file\nSkipped properties: id,href",
      "required": [
        "url"
      ],
      "properties": {
        "query": {
          "type": "string",
          "description": "Used to scope the exported data"
        },
        "path": {
          "type": "string",
          "description": "URL of the root resource acting as the source for streaming content to the file specified by the export job"
        },
        "contentType": {
          "type": "string",
          "description": "The format of the exported data"
        },
        "status": {
          "type": "string",
          "description": "Status of the export job (not started, running, succeeded, failed)"
        },
        "url": {
          "type": "string",
          "description": "URL of the file containing the data to be exported"
        },
        "completionDate": {
          "type": "string",
          "format": "date-time",
          "description": "Data at which the job was completed"
        },
        "creationDate": {
          "type": "string",
          "format": "date-time",
          "description": "Date at which the job was created"
        },
        "errorLog": {
          "type": "string",
          "description": "Reason for failure"
        }
      }
    },
    "Category": {
      "type": "object",
      "description": "The category resource is used to group product offerings, service and resource candidates in logical containers. Categories can contain other categories and/or product offerings, resource or service candidates.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier of the category"
        },
        "href": {
          "type": "string",
          "description": "Reference of the catalog"
        },
        "lastUpdate": {
          "type": "string",
          "format": "date-time",
          "description": "Date and time of the last update"
        },
        "version": {
          "type": "string",
          "description": "Category version"
        },
        "lifecycleStatus": {
          "type": "string",
          "description": "Used to indicate the current lifecycle status"
        },
        "validFor": {
          "$ref": "#/definitions/TimePeriod",
          "description": "The period for which the category is valid"
        },
        "parentId": {
          "type": "string",
          "description": "Unique identifier of the parent category"
        },
        "isRoot": {
          "type": "boolean",
          "description": "If true, this Boolean indicates that the category is a root of categories"
        },
        "name": {
          "type": "string",
          "description": "Name of the category"
        },
        "description": {
          "type": "string",
          "description": "Description of the category"
        },
        "type": {
          "type": "string",
          "description": "Category type, can be Category,VariantCategory or VariantValueCategory."
        },
        "@type": {
          "type": "string",
          "description": "the class type of the Category"
        },
        "@baseType": {
          "type": "string",
          "description": "the base class type of the category"
        },
        "@schemaLocation": {
          "type": "string",
          "description": "link to the schema describing this category"
        },
        "subCategory": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CategoryRef"
          }
        },
        "superCategory": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CategoryRef"
          }
        },
        "productOffering": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ProductOfferingRef"
          }
        }
      }
    },
    "Category_Create": {
      "type": "object",
      "description": "The category resource is used to group product offerings, service and resource candidates in logical containers. Categories can contain other categories and/or product offerings, resource or service candidates.\nSkipped properties: id,href",
      "required": [
        "name"
      ],
      "properties": {
        "lastUpdate": {
          "type": "string",
          "format": "date-time",
          "description": "Date and time of the last update"
        },
        "version": {
          "type": "string",
          "description": "Category version"
        },
        "lifecycleStatus": {
          "type": "string",
          "description": "Used to indicate the current lifecycle status"
        },
        "validFor": {
          "$ref": "#/definitions/TimePeriod",
          "description": "The period for which the category is valid"
        },
        "parentId": {
          "type": "string",
          "description": "Unique identifier of the parent category"
        },
        "isRoot": {
          "type": "boolean",
          "description": "If true, this Boolean indicates that the category is a root of categories"
        },
        "name": {
          "type": "string",
          "description": "Name of the category"
        },
        "description": {
          "type": "string",
          "description": "Description of the category"
        },
        "@type": {
          "type": "string",
          "description": "the class type of the Category"
        },
        "@baseType": {
          "type": "string",
          "description": "the base class type of the category"
        },
        "@schemaLocation": {
          "type": "string",
          "description": "link to the schema describing this category"
        },
        "subCategory": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CategoryRef"
          }
        },
        "productOffering": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ProductOfferingRef"
          }
        }
      }
    },
    "Category_Update": {
      "type": "object",
      "description": "The category resource is used to group product offerings, service and resource candidates in logical containers. Categories can contain other categories and/or product offerings, resource or service candidates.\nSkipped properties: id,href,id,href",
      "properties": {
        "lastUpdate": {
          "type": "string",
          "format": "date-time",
          "description": "Date and time of the last update"
        },
        "version": {
          "type": "string",
          "description": "Category version"
        },
        "lifecycleStatus": {
          "type": "string",
          "description": "Used to indicate the current lifecycle status"
        },
        "validFor": {
          "$ref": "#/definitions/TimePeriod",
          "description": "The period for which the category is valid"
        },
        "parentId": {
          "type": "string",
          "description": "Unique identifier of the parent category"
        },
        "isRoot": {
          "type": "boolean",
          "description": "If true, this Boolean indicates that the category is a root of categories"
        },
        "name": {
          "type": "string",
          "description": "Name of the category"
        },
        "description": {
          "type": "string",
          "description": "Description of the category"
        },
        "@type": {
          "type": "string",
          "description": "the class type of the Category"
        },
        "@baseType": {
          "type": "string",
          "description": "the base class type of the category"
        },
        "@schemaLocation": {
          "type": "string",
          "description": "link to the schema describing this category"
        },
        "subCategory": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CategoryRef"
          }
        },
        "productOffering": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ProductOfferingRef"
          }
        }
      }
    },
    "GeographicPoint": {
      "type": "object",
      "description": "A GeographicPoint defines a geographic point through coordinates.",
      "properties": {
        "x": {
          "description": "x coordinate (usually latitude)",
          "type": "string"
        },
        "y": {
          "description": "y coordinate (usually longitude)",
          "type": "string"
        },
        "z": {
          "description": "z coordinate (usually elevation)",
          "type": "string"
        }
      }
    },
    "GeographicLocation": {
      "type": "object",
      "description": "A GeographicLocation allows describing through coordinate(s) a point, a line or a space",
      "required": [
        "accuracy",
        "spatialRef"
      ],
      "properties": {
        "id": {
          "description": "Unique Identifier of a GeoLocation",
          "type": "string"
        },
        "href": {
          "description": "href of the GeoLocation",
          "type": "string"
        },
        "name": {
          "description": "Name of a GeoLocation",
          "type": "string"
        },
        "geometryType": {
          "description": "Type allows describing Geolocation form: it could be a point, a line, a polygon, a cylinder, etc....",
          "type": "string"
        },
        "accuracy": {
          "description": "",
          "type": "string"
        },
        "spatialRef": {
          "description": "",
          "type": "string"
        },
        "@type": {
          "description": "Indicates the type of resource",
          "type": "string"
        },
        "@schemaLocation": {
          "description": "A link to the schema describing this REST Resource",
          "type": "string"
        },
        "geometry": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/GeographicPoint"
          }
        }
      }
    },
    "GeographicSubAddress": {
      "type": "object",
      "description": "It is used for addressing within a property in an urban area (country properties are often defined differently). It may refer to a building, a building cluster, or a floor of a multistory building.",
      "properties": {
        "id": {
          "description": "Unique Identifier of the subAddress",
          "type": "string"
        },
        "href": {
          "description": "Href of the subAddress",
          "type": "string"
        },
        "type": {
          "description": "Type of subAddress : it can be a subunit or a private street",
          "type": "string"
        },
        "name": {
          "description": "Name of the subAddress to identify it with a meaningful identification",
          "type": "string"
        },
        "subUnitType": {
          "description": "The type of subunit\ne.g.BERTH, FLAT, PIER, SUITE, SHOP, TOWER, UNIT, WHARF.",
          "type": "string"
        },
        "subUnitNumber": {
          "description": "The discriminator used for the subunit\noften just a simple number e.g. FLAT 5, may also be a range",
          "type": "string"
        },
        "levelType": {
          "description": "Describes level types within a building",
          "type": "string"
        },
        "levelNumber": {
          "description": "Used where a level type may be repeated e.g. BASEMENT 1, BASEMENT 2",
          "type": "string"
        },
        "buildingName": {
          "description": "Allows for buildings that have well-known names",
          "type": "string"
        },
        "privateStreetNumber": {
          "description": "Private streets numbers internal to a private street",
          "type": "string"
        },
        "privateStreetName": {
          "description": "Private streets internal to a property (e.g. a university) may have internal names that are not recorded by the land title office",
          "type": "string"
        },
        "@type": {
          "description": "Type of the resource for this subAdress",
          "type": "string"
        },
        "@schemaLocation": {
          "description": "A link to the schema describing this REST Resource",
          "type": "string"
        }
      }
    },
    "GeographicAddress": {
      "type": "object",
      "description": "A geographic address is a structured textual way of describing how to find a Property in an urban area (country properties are often defined differently)",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier of the address"
        },
        "href": {
          "type": "string",
          "description": "An URI used to access to the address resource"
        },
        "streetNr": {
          "type": "string",
          "description": "Number identifying a specific property on a public street. It may be combined with streetNrLast for ranged addresses"
        },
        "streetNrSuffix": {
          "type": "string",
          "description": "The first street number suffix"
        },
        "streetNrLast": {
          "type": "string",
          "description": "Last number in a range of street numbers allocated to a property"
        },
        "streetNrLastSuffix": {
          "type": "string",
          "description": "Last street number suffix for a ranged address"
        },
        "streetName": {
          "type": "string",
          "description": "Name of the street or other street type"
        },
        "streetType": {
          "type": "string",
          "description": "Alley, avenue, boulevard, brae, crescent, drive, highway, lane, terrace, parade, place, tarn, way, wharf"
        },
        "streetSuffix": {
          "type": "string",
          "description": "A modifier denoting a relative direction"
        },
        "postcode": {
          "type": "string",
          "description": "Descriptor for a postal delivery area, used to speed and simplify the delivery of mail (also known as zipcode)"
        },
        "locality": {
          "type": "string",
          "description": "An area of defined or undefined boundaries within a local authority or other legislatively defined area, usually rural or semi-rural in nature"
        },
        "city": {
          "type": "string",
          "description": "City that the address is in"
        },
        "stateOfProvince": {
          "type": "string",
          "description": "The State or Province that the address is in"
        },
        "country": {
          "type": "string",
          "description": "Country that the address is in"
        },
        "relatedParty": {
          "type": "array",
          "description": "Party role references that the current address is associated with",
          "items": {
            "$ref": "#/definitions/RelatedPartyRef"
          }
        },
        "geographicLocationRefOrValue": {
          "$ref": "#/definitions/GeographicLocation"
        },
        "geographicSubAddress": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/GeographicSubAddress"
          }
        },
        "@type": {
          "type": "string",
          "description": "Indicates the type of the resource. Here can be 'UrbanPropertyAddress', ‘FormattedAddress’, ‘JapanesePropertyAddress’ , ‘AustralianPropertyAddress’, etc…"
        },
        "@schemaLocation": {
          "type": "string",
          "description": "A Link to the schema describing this REST Resource. The resource described 'UrbanPropertyAddress' but a schema could be used for other property address description."
        },
        "isShippingAddress": {
          "type": "boolean",
          "description": "Flag that specifies if the geographic address is a shipping address."
        },
        "isBillingAddress": {
          "type": "boolean",
          "description": "Flag that specifies if the geographic address is a billing address."
        },
        "isContactAddress": {
          "type": "boolean",
          "description": "Flag that specifies if the geographic address is a contact address."
        },
        "isUnloadingAddress": {
          "type": "boolean",
          "description": "Flag that specifies if the geographic address is an unloading address."
        },
        "isInstallationAddress": {
          "type": "boolean",
          "description": "Flag that specifies if the geographic address is an installation address."
        }
      }
    },
    "ProductOfferingPrice_Create": {
      "type": "object",
      "description": "An amount, usually of money, that is asked for or allowed when a ProductOffering is bought, rented, or leased. The price is valid for a defined period of time and may not represent the actual price paid by a customer.\nSkipped properties: id,href",
      "required": [
        "name"
      ],
      "properties": {
        "name": {
          "type": "string",
          "description": "Name of the productOfferingPrice"
        },
        "description": {
          "type": "string",
          "description": "Description of the productOfferingPrice"
        },
        "version": {
          "type": "string",
          "description": "ProductOffering version"
        },
        "validFor": {
          "$ref": "#/definitions/TimePeriod",
          "description": "The period for which the productOfferingPrice is valid"
        },
        "priceType": {
          "type": "string",
          "description": "A category that describes the price, such as recurring, discount, allowance, penalty, and so forth."
        },
        "unitOfMeasure": {
          "$ref": "#/definitions/Money",
          "description": "A number and unit representing how many (for instance 1 dozen) of an ProductOffering is available at the offered price. Its meaning depends on the priceType. It could be a price, a rate, or a discount."
        },
        "recurringChargePeriodType": {
          "type": "string",
          "description": "The period to repeat the application of the price\nCould be month, week..."
        },
        "recurringChargePeriodLength": {
          "type": "integer",
          "description": "the period of the recurring charge:  1, 2, ... .It sets to zero if it is not applicable"
        },
        "@type": {
          "type": "string",
          "description": "The class type of this Product offering"
        },
        "@baseType": {
          "type": "string",
          "description": "the immediate base class type of this product offering"
        },
        "@schemaLocation": {
          "type": "string",
          "description": "hyperlink reference to the schema describing this resource"
        },
        "lastUpdate": {
          "type": "string",
          "format": "date-time",
          "description": "the last update time of this POP"
        },
        "isBundle": {
          "type": "boolean",
          "description": "A flag indicating if this POP is composite (bundle) or not"
        },
        "lifecycleStatus": {
          "type": "string",
          "description": "the lifecycle status of this POP"
        },
        "price": {
          "$ref": "#/definitions/Money",
          "description": "The amount of money that characterizes the price."
        },
        "percentage": {
          "type": "number",
          "format": "float",
          "description": "Percentage to apply for ProdOfferPriceAlteration (Discount)"
        },
        "bundledPopRelationship": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/BundledPopRelationship"
          }
        },
        "popRelationship": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PopRelationship"
          }
        },
        "prodSpecCharValueUse": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ProdSpecCharValueUse"
          }
        },
        "productOfferingTerm": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ProductOfferingTerm"
          }
        },
        "place": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PlaceRef"
          }
        },
        "constraint": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ConstraintRef"
          }
        },
        "pricingLogicAlgorithm": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PricingLogicAlgorithm"
          }
        },
        "tax": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Tax"
          }
        }
      }
    },
    "ProductOfferingPrice_Update": {
      "type": "object",
      "description": "An amount, usually of money, that is asked for or allowed when a ProductOffering is bought, rented, or leased. The price is valid for a defined period of time and may not represent the actual price paid by a customer.\nSkipped properties: id,href,id,href,lastUpdate",
      "properties": {
        "name": {
          "type": "string",
          "description": "Name of the productOfferingPrice"
        },
        "description": {
          "type": "string",
          "description": "Description of the productOfferingPrice"
        },
        "version": {
          "type": "string",
          "description": "ProductOffering version"
        },
        "validFor": {
          "$ref": "#/definitions/TimePeriod",
          "description": "The period for which the productOfferingPrice is valid"
        },
        "priceType": {
          "type": "string",
          "description": "A category that describes the price, such as recurring, discount, allowance, penalty, and so forth."
        },
        "unitOfMeasure": {
          "$ref": "#/definitions/Money",
          "description": "A number and unit representing how many (for instance 1 dozen) of an ProductOffering is available at the offered price. Its meaning depends on the priceType. It could be a price, a rate, or a discount."
        },
        "recurringChargePeriodType": {
          "type": "string",
          "description": "The period to repeat the application of the price\nCould be month, week..."
        },
        "recurringChargePeriodLength": {
          "type": "integer",
          "description": "the period of the recurring charge:  1, 2, ... .It sets to zero if it is not applicable"
        },
        "@type": {
          "type": "string",
          "description": "The class type of this Product offering"
        },
        "@baseType": {
          "type": "string",
          "description": "the immediate base class type of this product offering"
        },
        "@schemaLocation": {
          "type": "string",
          "description": "hyperlink reference to the schema describing this resource"
        },
        "isBundle": {
          "type": "boolean",
          "description": "A flag indicating if this POP is composite (bundle) or not"
        },
        "lifecycleStatus": {
          "type": "string",
          "description": "the lifecycle status of this POP"
        },
        "price": {
          "$ref": "#/definitions/Money",
          "description": "The amount of money that characterizes the price."
        },
        "percentage": {
          "type": "number",
          "format": "float",
          "description": "Percentage to apply for ProdOfferPriceAlteration (Discount)"
        },
        "bundledPopRelationship": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/BundledPopRelationship"
          }
        },
        "popRelationship": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PopRelationship"
          }
        },
        "prodSpecCharValueUse": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ProdSpecCharValueUse"
          }
        },
        "productOfferingTerm": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ProductOfferingTerm"
          }
        },
        "place": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PlaceRef"
          }
        },
        "constraint": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ConstraintRef"
          }
        },
        "pricingLogicAlgorithm": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PricingLogicAlgorithm"
          }
        },
        "tax": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Tax"
          }
        }
      }
    },
    "PaymentMethodType": {
      "description": "Representation of a payment method",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique id of the payment method in the server"
        },
        "href": {
          "type": "string",
          "description": "URI where to perform actions on the payment method"
        },
        "name": {
          "type": "string",
          "description": "Screen name of the payment method"
        },
        "description": {
          "type": "string",
          "description": "Description of the payment method"
        },
        "validFor": {
          "$ref": "#/definitions/TimePeriodType",
          "description": "Validity period of the payment method"
        },
        "account": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AccountRefType"
          },
          "description": "Account that owns or can use the payment method"
        },
        "preferred": {
          "type": "boolean",
          "description": "Defines whether this particular method is the preferred one"
        },
        "relatedParty": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/RelatedPartyRefType"
          },
          "description": "Account that owns the payment method"
        },
        "@type": {
          "type": "string",
          "enum": [
            "cash",
            "digitalWallet",
            "tokenizedCard",
            "bankAccountTransfer",
            "bankAccountDebit",
            "bankCard",
            "account",
            "bucket",
            "voucher",
            "check",
            "loyaltyAccount",
            "creditCard"
          ],
          "description": "Payment method type. The content of the details field depends on the value of this one"
        },
        "authorizationCode": {
          "type": "string",
          "description": "Authorization code provided by a financial institution. Typically this would be populated for recurring payments using the method, as payments have an authorization code of their own."
        },
        "status": {
          "type": "string",
          "description": "Current status of the payment method"
        },
        "statusDate": {
          "format": "date-time",
          "type": "string",
          "description": "Last time the status changed"
        },
        "details": {
          "$ref": "#/definitions/CreditCardType",
          "description": "Details of the payment method. This object's type depends on the value of the type field above"
        }
      },
      "required": [
        "id",
        "href",
        "@type",
        "details"
      ]
    },
    "QuantityType": {
      "description": "Representation of a quantity of something. I can also be used to represent a quantity range",
      "properties": {
        "amount": {
          "format": "decimal",
          "type": "number",
          "description": "Measured amount"
        },
        "units": {
          "type": "string",
          "description": "Units the quantity is measured in"
        }
      },
      "required": [
        "units",
        "amount"
      ]
    },
    "TimePeriodType": {
      "description": "Representation of a time period",
      "properties": {
        "startDateTime": {
          "format": "date-time",
          "type": "string",
          "description": "Start date of the period"
        },
        "endDateTime": {
          "format": "date-time",
          "type": "string",
          "description": "End date of the period"
        }
      },
      "required": [
        "startDateTime"
      ]
    },
    "RelatedPartyRefType": {
      "description": "Information about an associated entity and its role",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier of the related party"
        },
        "href": {
          "type": "string",
          "description": "Reference to the party"
        },
        "@referredType": {
          "type": "string",
          "description": "Type of party (e.g.: account, customer, user…)"
        },
        "name": {
          "type": "string",
          "description": "Name of the party"
        },
        "role": {
          "type": "string",
          "description": "Role of the related entity"
        }
      },
      "required": [
        "id",
        "href"
      ]
    },
    "PaymentMethodRequestType": {
      "description": "Request for the creation or modification of a payment method. It contains the same fields as paymentMethodType except the ones assigned by the server",
      "properties": {
        "name": {
          "type": "string",
          "description": "Screen name of the payment method"
        },
        "description": {
          "type": "string",
          "description": "Description of the payment method"
        },
        "validFor": {
          "$ref": "#/definitions/TimePeriodType",
          "description": "Validity period of the payment method"
        },
        "preferred": {
          "type": "boolean",
          "description": "Defines whether this particular method is the preferred one"
        },
        "account": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AccountRefType"
          },
          "description": "Account that owns or can use the payment method"
        },
        "relatedParty": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/RelatedPartyRefType"
          },
          "description": "Account that owns the payment method"
        },
        "type": {
          "type": "string",
          "enum": [
            "cash",
            "digitalWallet",
            "tokenizedCard",
            "bankAccountTransfer",
            "bankAccountDebit",
            "bankCard",
            "account",
            "bucket",
            "voucher",
            "check",
            "loyaltyAccount"
          ],
          "description": "Payment method type. The content of the details field depends on the value of this one"
        },
        "authorizationCode": {
          "type": "string",
          "description": "Authorization code provided by a financial institution. Typically this would be populated for recurring payments using the method, as payments have an authorization code of their own."
        },
        "status": {
          "type": "string",
          "description": "Current status of the payment method"
        },
        "details": {
          "type": "object",
          "description": "Details of the payment method. This object's type depends on the value of the type field above"
        }
      },
      "required": [
        "type",
        "details"
      ]
    },
    "BankCardType": {
      "description": "Details of a bank card",
      "properties": {
        "brand": {
          "type": "string",
          "description": "Credit card brand. E.g.: Visa, MasterCard, AmericanExpress..."
        },
        "type": {
          "type": "string",
          "enum": [
            "Debit",
            "Credit"
          ],
          "description": "Debit or credit"
        },
        "cardNumber": {
          "type": "string",
          "description": "Credit card number"
        },
        "expirationDate": {
          "type": "string",
          "format": "date-time",
          "description": "the card's expiration date"
        },
        "cvv": {
          "type": "string",
          "description": "the CVV or CVV2 code of the card"
        },
        "lastFourDigits": {
          "type": "string",
          "description": "Last four digits of the card"
        },
        "nameOnCard": {
          "type": "string",
          "description": "Name writen on the card"
        },
        "bank": {
          "type": "string",
          "description": "Bank that issued the card"
        }
      },
      "required": [
        "brand",
        "cardNumber",
        "expirationDate"
      ]
    },
    "CreditCardType": {
      "description": "Details of a credit card",
      "properties": {
        "brand": {
          "type": "string",
          "description": "Credit card brand. E.g.: Visa, MasterCard, AmericanExpress..."
        },
        "cardNumber": {
          "type": "string",
          "description": "Credit card number"
        },
        "expirationDate": {
          "type": "string",
          "format": "date-time",
          "description": "the card's expiration date"
        },
        "cvv": {
          "type": "string",
          "description": "the CVV or CVV2 code of the card"
        },
        "lastFourDigits": {
          "type": "string",
          "description": "Last four digits of the card"
        },
        "nameOnCard": {
          "type": "string",
          "description": "Name writen on the card"
        }
      },
      "required": [
        "brand",
        "cardNumber",
        "expirationDate"
      ]
    },
    "TokenizedCardType": {
      "description": "Details of a tokenized bank card",
      "properties": {
        "brand": {
          "type": "string",
          "description": "Credit card brand. E.g.: Visa, MasterCard, AmericanExpress... Might be used for display purposes"
        },
        "type": {
          "type": "string",
          "enum": [
            "Debit",
            "Credit"
          ],
          "description": "Card type. Might be used for display purposes"
        },
        "lastFourDigits": {
          "type": "string",
          "description": "Last four digits of the credit card. Might be used for display purposes"
        },
        "tokenType": {
          "type": "string",
          "description": "Token type (e.g.: emv)"
        },
        "token": {
          "type": "string",
          "description": "The token itself"
        },
        "issuer": {
          "type": "string",
          "description": "Whoever issued the token"
        }
      },
      "required": [
        "tokenType",
        "token"
      ]
    },
    "BankAccountTransferType": {
      "description": "Details of a bank account",
      "properties": {
        "accountNumber": {
          "type": "string",
          "description": "Bank Account Number (this could refer to the IBAN or SWIFT number)"
        },
        "accountNumberType": {
          "type": "string",
          "description": "Type of account number (e.g.: IBAN, SWIFT, ...)"
        },
        "BIC": {
          "type": "string",
          "description": "Business Identifier Code/Swift code of the financial institution where the account is located"
        },
        "owner": {
          "type": "string",
          "description": "Owner of the bank account"
        },
        "bank": {
          "type": "string",
          "description": "Screen name of the bank"
        }
      },
      "required": [
        "accountNumber",
        "accountNumberType"
      ]
    },
    "BankAccountDebitType": {
      "description": "Details of a bank account",
      "properties": {
        "accountNumber": {
          "type": "string",
          "description": "Bank Account Number (this could refer to the IBAN or SWIFT number)"
        },
        "accountNumberType": {
          "type": "string",
          "description": "Type of account number (e.g.: IBAN, SWIFT, ...)"
        },
        "BIC": {
          "type": "string",
          "description": "Business Identifier Code/Swift code of the financial institution where the account is located"
        },
        "owner": {
          "type": "string",
          "description": "Owner of the bank account"
        },
        "bank": {
          "type": "string",
          "description": "Screen name of the bank"
        }
      },
      "required": [
        "accountNumber",
        "accountNumberType"
      ]
    },
    "CashType": {
      "description": "Details of cash payer"
    },
    "CheckType": {
      "description": "Details of a check",
      "properties": {
        "checkId": {
          "description": "Unique identifier of the check in the bank that issues them. Typically writen on them and comprises bank, account and serial number.",
          "type": "string"
        },
        "drawer": {
          "description": "Person or entity writing the check",
          "type": "string"
        },
        "payee": {
          "description": "Person or entity the check is addressed to",
          "type": "string"
        },
        "bank": {
          "description": "Entity, typically a bank, performing the payment of the check",
          "type": "string"
        },
        "date": {
          "description": "Date when the check was signed",
          "type": "string",
          "format": "date-time"
        }
      },
      "required": [
        "drawer",
        "payee",
        "bank"
      ]
    },
    "DigitalWalletType": {
      "description": "Details of a digital wallet",
      "properties": {
        "service": {
          "type": "string",
          "description": "Wallet service (e.g.: PayPal)"
        },
        "walletId": {
          "type": "string",
          "description": "Unique Id of the account in the service"
        },
        "walletUrl": {
          "type": "string",
          "description": "URI pointing at the digital wallet (e.g.: https://paypal.me/johndoe)"
        }
      },
      "required": [
        "service",
        "walletId"
      ]
    },
    "AccountRefType": {
      "description": "Reference to an external entity that can be tipically queried with another API such as a customer account, a ticket, etc.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier of the entity"
        },
        "href": {
          "type": "string",
          "description": "URI where to query or perform actions on the entity"
        },
        "name": {
          "type": "string",
          "description": "Screen name of the entity"
        },
        "description": {
          "type": "string",
          "description": "Description of the entity"
        },
        "@referredType": {
          "type": "string",
          "description": "Type of the referred account (s.g.: financialAccount)"
        }
      },
      "required": [
        "id",
        "href"
      ]
    },
    "VoucherType": {
      "description": "Details of a voucher",
      "properties": {
        "code": {
          "type": "string",
          "description": "Code that identifies the voucher or provides the discount"
        },
        "description": {
          "type": "string",
          "description": "Description of the voucher (e.g.: get one and receive one free)"
        },
        "value": {
          "description": "Discount that the voucher applies when it's a discount voucher",
          "type": "array",
          "items": {
            "$ref": "#/definitions/QuantityType"
          }
        },
        "expirationDate": {
          "type": "string",
          "format": "date-time",
          "description": "the voucher's expiration date"
        },
        "campaign": {
          "type": "string",
          "description": "Campaign this voucher belongs to"
        }
      },
      "required": [
        "code"
      ]
    },
    "PlaceRef": {
      "type": "object",
      "description": "Place reference. Place defines the places where the products are sold or delivered.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier of the place"
        },
        "href": {
          "type": "string",
          "description": "Unique reference of the place"
        },
        "name": {
          "type": "string",
          "description": "A user-friendly name for the place, such as \"Paris Store\", \"London Store\", \"Main Home\""
        },
        "geoLocationUrl": {
          "type": "string",
          "description": "A url providing a map for localizing the place"
        },
        "address": {
          "type": "string",
          "description": "A string characterizing an address (for instance a formatted address or an identifier taken from an address database or an address API)."
        },
        "@referredType": {
          "type": "string",
          "description": "class type of the referred Place object"
        },
        "role": {
          "type": "string",
          "description": "Role of the place (for instance: 'home delivery', 'shop retrieval')"
        }
      }
    },
    "SLARef": {
      "type": "object",
      "description": "ServiceLevelAgreement reference: A service level agreement (SLA) is a type of agreement that represents a formal negotiated agreement between two parties designed to create a common understanding about products, services, priorities, responsibilities, and so forth. The SLA is a set of appropriate procedures and targets formally or informally agreed between parties in order to achieve and maintain specified Quality of Service.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier of service level agreement"
        },
        "href": {
          "type": "string",
          "description": "Reference of the service level agreement"
        },
        "name": {
          "type": "string",
          "description": "Name of the service level agreement"
        },
        "@referredType": {
          "type": "string",
          "description": "class type of referred Service Level Agreement"
        }
      }
    },
    "ServiceCandidateRef": {
      "type": "object",
      "description": "ServiceCandidate reference. ServiceCandidate is an entity that makes a ServiceSpecification available to a catalog.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier of the service candidate"
        },
        "href": {
          "type": "string",
          "description": "Unique reference of the service candidate"
        },
        "version": {
          "type": "string",
          "description": "Version of the service candidate"
        },
        "name": {
          "type": "string",
          "description": "Name of the service candidate"
        },
        "@referredType": {
          "type": "string",
          "description": "The Class type of  referred Service Candidate"
        }
      }
    },
    "ResourceCandidateRef": {
      "type": "object",
      "description": "ResourceCandidate reference: A resource candidate is an entity that makes a ResourceSpecification available to a catalog.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier of the resource candidate"
        },
        "href": {
          "type": "string",
          "description": "Reference of the resource candidate"
        },
        "version": {
          "type": "string",
          "description": "Version of the resource candidate"
        },
        "name": {
          "type": "string",
          "description": "Name of the resource candidate"
        },
        "@referredType": {
          "type": "string",
          "description": "The Class type of referred Resource Candidate"
        }
      }
    },
    "MarketSegmentRef": {
      "type": "object",
      "description": "provides references to the corresponding market segment as target of product offerings. A market segment is grouping of Parties, GeographicAreas, SalesChannels, and so forth.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier of the market segment"
        },
        "href": {
          "type": "string",
          "description": "Reference of the market segment"
        },
        "name": {
          "type": "string",
          "description": "Name of the market segment"
        },
        "@referredType": {
          "type": "string",
          "description": "(Class) type of the referred market segment"
        }
      }
    },
    "AgreementRef": {
      "type": "object",
      "description": "Agreement reference. An agreement represents a contract or arrangement, either written or verbal and sometimes enforceable by law, such as a service level agreement or a customer price agreement. An agreement involves a number of other business entities, such as products, services, and resources and/or their specifications.",
      "properties": {
        "href": {
          "type": "string",
          "description": "Reference of the agreement"
        },
        "id": {
          "type": "string",
          "description": "Identifier of the agreement"
        },
        "name": {
          "type": "string",
          "description": "Name of the agreement"
        },
        "@referredType": {
          "type": "string",
          "description": "class type of the referred Agreement"
        }
      }
    },
    "BundledProdOfferOption": {
      "type": "object",
      "description": "A set of numbers that specifies the lower and upper limits for a ProductOffering that can be procured as part of the related BundledProductOffering. Values can range from 0 to unbounded",
      "properties": {
        "numberRelOfferLowerLimit": {
          "type": "integer",
          "description": "lower limit for a product offering that can be procured as part of the related BundledProductOffering"
        },
        "numberRelOfferUpperLimit": {
          "type": "integer",
          "description": "upper limit for a product offering that can be procured as part of the related BundledProductOffering"
        },
        "numberRelOfferDefault": {
          "type": "integer",
          "description": "Default number of produc offereings that should be procured as part of the related BundledProductOffering"
        }
      }
    },
    "RelatedPartyRef": {
      "type": "object",
      "description": "RelatedParty reference. A related party defines party or party role linked to a specific entity.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier of a related party"
        },
        "href": {
          "type": "string",
          "description": "Reference of the related party, could be a party reference or a party role reference"
        },
        "role": {
          "type": "string",
          "description": "Role of the related party."
        },
        "name": {
          "type": "string",
          "description": "Name of the related party"
        },
        "validFor": {
          "$ref": "#/definitions/TimePeriod",
          "description": "Validity period of the related party"
        },
        "@referredType": {
          "type": "string",
          "description": "The class type of referred party/party role reference"
        }
      }
    },
    "ProductSpecCharacteristic": {
      "type": "object",
      "description": "A characteristic quality or distinctive feature of a ProductSpecification.  The characteristic can be take on a discrete value, such as color, can take on a range of values, (for example, sensitivity of 100-240 mV), or can be derived from a formula (for example, usage time (hrs) = 30 - talk time *3). Certain characteristics, such as color, may be configured during the ordering or some other process.",
      "properties": {
        "name": {
          "type": "string",
          "description": "Name of the productSpecCharacteristic"
        },
        "description": {
          "type": "string",
          "description": "A narrative that explains in detail what the productSpecCharacteristic is"
        },
        "valueType": {
          "type": "string",
          "description": "A kind of value that the characteristic can take on, such as numeric, text and so forth"
        },
        "configurable": {
          "type": "boolean",
          "description": "If true, the Boolean indicates that the productSpecCharacteristic is configurable"
        },
        "validFor": {
          "$ref": "#/definitions/TimePeriod",
          "description": "The period for which the productSpecCharacteristic is valid"
        },
        "@type": {
          "type": "string",
          "description": "the class type of this characteristic"
        },
        "@schemaLocation": {
          "type": "string",
          "description": "hyperlink reference to the schema describing this characteristic"
        },
        "@valueSchemaLocation": {
          "type": "string",
          "description": "This (optional) field provides a link to the schema describing the value type."
        },
        "minCardinality": {
          "type": "integer",
          "description": "The minimum number of instances a CharacteristicValue can take on. For example, zero to five phone numbers in a group calling plan, where zero is the value for the minCardinality"
        },
        "maxCardinality": {
          "type": "integer",
          "description": "The maximum number of instances a CharacteristicValue can take on. For example, zero to five phone numbers in a group calling plan, where five is the value for the maxCardinality"
        },
        "isUnique": {
          "type": "boolean",
          "description": "An indicator that specifies if a value is unique for the specification. Possible values are; \"unique while value is in effect\" and \"unique whether value is in effect or not\""
        },
        "regex": {
          "type": "string",
          "description": "A rule or principle represented in regular expression used to derive the value of a characteristic value"
        },
        "extensible": {
          "type": "boolean",
          "description": "An indicator that specifies that the values for the characteristic can be extended by adding new values when instantiating a characteristic for a product"
        },
        "productSpecCharRelationship": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ProductSpecCharRelationship"
          }
        },
        "productSpecCharacteristicValue": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ProductSpecCharacteristicValue"
          }
        },
        "@baseType": {
          "type": "string",
          "description": "When sub-classing, this defines the super-class"
        }
      }
    },
    "TargetProductSchema": {
      "type": "object",
      "description": "The reference object to the schema and type of target product which is described by product specification",
      "required": [
        "@schemaLocation",
        "@type"
      ],
      "properties": {
        "@baseType": {
          "type": "string",
          "description": "When sub-classing, this defines the super-class"
        },
        "@schemaLocation": {
          "type": "string",
          "description": "This field provides a link to the schema describing the target product"
        },
        "@type": {
          "type": "string",
          "description": "Class type of the target product"
        }
      }
    },
    "ServiceSpecificationRef": {
      "type": "object",
      "description": "Service specification reference: ServiceSpecification(s) required to realize a ProductSpecification.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier of the service specification"
        },
        "href": {
          "type": "string",
          "description": "Reference of the serviceSpecification"
        },
        "name": {
          "type": "string",
          "description": "Name of the requiredServiceSpecification"
        },
        "version": {
          "type": "string",
          "description": "Service specification version"
        },
        "@referredType": {
          "type": "string",
          "description": "the class type of associated service specification"
        },
        "targetServiceSchema": {
          "$ref": "#/definitions/TargetServiceSchema",
          "description": "A target service schema reference (TargetServiceSchemaRef). The reference object to the schema and type of target service which is described by service specification."
        },
        "@baseType": {
          "type": "string",
          "description": "When sub-classing, this defines the super-class"
        },
        "@schemaLocation": {
          "type": "string",
          "format": "uri",
          "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
        },
        "@type": {
          "type": "string",
          "description": "When sub-classing, this defines the sub-class entity name"
        },
        "externalIdentifier": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ExternalIdentifier"
          }
        }
      },
      "required": [
        "id"
      ]
    },
    "TargetProductSchemaRef": {
      "type": "object",
      "description": "The reference object to the schema and type of target product which is described by product specification",
      "properties": {
        "@referredType": {
          "type": "string",
          "description": "class type of the target product"
        },
        "@schemaLocation": {
          "type": "string",
          "description": "This field provides a link to the schema describing the target product"
        }
      }
    },
    "ProductSpecificationRelationship": {
      "type": "object",
      "description": "A migration, substitution, dependency or exclusivity relationship between/among product specifications.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier of the productSpecification"
        },
        "href": {
          "type": "string",
          "description": "Reference of the productSpecification"
        },
        "validFor": {
          "$ref": "#/definitions/TimePeriod",
          "description": "The period for which the productSpecificationRelationship is valid"
        },
        "relationshipType": {
          "type": "string",
          "description": "Type of relationship such as migration, substitution, dependency, exclusivity"
        },
        "@baseType": {
          "type": "string",
          "description": "When sub-classing, this defines the super-class"
        },
        "@schemaLocation": {
          "type": "string",
          "format": "uri",
          "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
        },
        "@type": {
          "type": "string",
          "description": "When sub-classing, this defines the sub-class entity name"
        }
      }
    },
    "TargetServiceSchema": {
      "type": "object",
      "description": "The reference object to the schema and type of target service which is described by service specification",
      "required": [
        "@schemaLocation",
        "@type"
      ],
      "properties": {
        "@baseType": {
          "type": "string",
          "description": "When sub-classing, this defines the super-class"
        },
        "@schemaLocation": {
          "type": "string",
          "description": "This field provides a link to the schema describing the target service"
        },
        "@type": {
          "type": "string",
          "description": "Class type of the target service"
        }
      }
    },
    "ResourceSpecificationRef": {
      "type": "object",
      "description": "Resource Specification reference: The ResourceSpecification is required to realize a ProductSpecification.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier of the resource specification"
        },
        "href": {
          "type": "string",
          "description": "Reference of the resource specification"
        },
        "name": {
          "type": "string",
          "description": "Name of the requiredResourceSpecification"
        },
        "version": {
          "type": "string",
          "description": "Resource specification version"
        },
        "@referredType": {
          "type": "string",
          "description": "the class type of associated resource specification"
        },
        "@baseType": {
          "type": "string",
          "description": "When sub-classing, this defines the super-class"
        },
        "@schemaLocation": {
          "type": "string",
          "format": "uri",
          "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
        },
        "@type": {
          "type": "string",
          "description": "When sub-classing, this defines the sub-class entity name"
        }
      },
      "required": [
        "id"
      ]
    },
    "BundledProductSpecification": {
      "type": "object",
      "description": "A type of ProductSpecification that belongs to a grouping of ProductSpecifications made available to the market. It inherits of all attributes of ProductSpecification.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier of the product specification"
        },
        "href": {
          "type": "string",
          "description": "Reference of the product specification"
        },
        "lifecycleStatus": {
          "type": "string",
          "description": "Used to indicate the current lifecycle status"
        },
        "name": {
          "type": "string",
          "description": "Name of the product specification"
        },
        "@baseType": {
          "type": "string",
          "description": "When sub-classing, this defines the super-class"
        },
        "@schemaLocation": {
          "type": "string",
          "format": "uri",
          "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
        },
        "@type": {
          "type": "string",
          "description": "the class type of the corresponding product specification"
        }
      }
    },
    "ProductSpecCharRelationship": {
      "type": "object",
      "description": "An aggregation, migration, substitution, dependency or exclusivity relationship between/among productSpecCharacteristics.",
      "properties": {
        "type": {
          "type": "string",
          "description": "Type of relationship such as aggregation, migration, substitution, dependency, exclusivity"
        },
        "validFor": {
          "$ref": "#/definitions/TimePeriod",
          "description": "The period for which the productSpecCharRelationship is valid"
        },
        "charSpecSeq": {
          "type": "integer",
          "description": "The order in which a CharacteristicSpecification appears within another CharacteristicSpecification that defines a grouping of CharacteristicSpecifications.\n\nFor example, a grouping may represent the name of an individual. The given name is first, the middle name is second, and the last name is third."
        },
        "id": {
          "type": "string",
          "description": "the identifier of the associated product specification"
        },
        "name": {
          "type": "string",
          "description": "Name of the target product specification characteristic"
        },
        "href": {
          "type": "string",
          "description": "Hyperlink reference to the target product specification"
        },
        "@type": {
          "type": "string",
          "description": "Class type of target product specification"
        }
      }
    },
    "BundledPopRelationship": {
      "type": "object",
      "description": "this object represents a bundle relationship from a bundle product offering (parent) to a simple product offering (child). A simple product offering may participate in more than one bundle relationships.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier of the associated product offering"
        },
        "href": {
          "type": "string",
          "description": "hyperlink reference of the associated product offering"
        },
        "name": {
          "type": "string",
          "description": "Name of  the associated product offering"
        },
        "@type": {
          "type": "string",
          "description": "(Class) type of the associated product offering"
        }
      }
    },
    "PopRelationship": {
      "type": "object",
      "description": "product offering relationship",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier of the associated product offering"
        },
        "relationshipType": {
          "type": "string",
          "description": "type of the relationship, for example override, discount, etc."
        },
        "href": {
          "type": "string",
          "description": "hyperlink reference of the associated product offering"
        },
        "name": {
          "type": "string",
          "description": "Name of  the associated product offering"
        },
        "@type": {
          "type": "string",
          "description": "(Class) type of the associated product offering"
        }
      }
    },
    "PoRelationshipRef": {
      "type": "object",
      "properties": {
        "@referredType": {
          "type": "string",
          "description": "(Class) type of the referred productOffering"
        },
        "bpoId": {
          "type": "string",
          "description": "Id of the BPO where current POP is defined in case the current BPO is a price override"
        },
        "href": {
          "type": "string",
          "description": "Reference of the productOffering"
        },
        "id": {
          "type": "string",
          "description": "Unique identifier of the productOffering."
        },
        "name": {
          "type": "string",
          "description": "Name of the productOffering."
        },
        "poAttributeType": {
          "type": "string",
          "description": "PoAttributeType of the PoRelationshipRef",
          "enum": [
            "AFFECTED_PRODUCT",
            "REQUIRED_PRODUCT"
          ]
        }
      },
      "description": "PoRelationshipRef reference. The PoRelationshipRef defines the affectedProductOffering and requiredProductOfferings of price for selling product offerings."
    },
    "ConstraintRef": {
      "type": "object",
      "description": "Constraint reference. The Constraint resource represents a policy/rule applied to an entity or entity spec.",
      "properties": {
        "id": {
          "type": "string",
          "description": "reference id to the target constraint"
        },
        "href": {
          "type": "string",
          "description": "Hyperlink reference to the target constraint"
        },
        "version": {
          "type": "string",
          "description": "constraint version"
        },
        "name": {
          "type": "string",
          "description": "Name given to the constraint"
        },
        "@referredType": {
          "type": "string",
          "description": "The (class) type of the referred constraint"
        }
      }
    },
    "PricingLogicAlgorithm": {
      "type": "object",
      "description": "The PricingLogicAlgorithm entity represents an instantiation of an interface specification to external rating function (without a modeled behavior in SID). Some of the parameters of the interface definition may be already set (such as price per unit) and some may be gathered during the rating process from the event (such as call duration) or from ProductCharacteristicValues (such as assigned bandwidth)",
      "properties": {
        "id": {
          "type": "string",
          "description": "unique id of the PricingLogicAlgorithm"
        },
        "externalIdentifier": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ExternalIdentifier"
          }
        },
        "href": {
          "type": "string",
          "description": "hyperlink reference of this PricingLogicAlgorithm"
        },
        "name": {
          "type": "string",
          "description": "Name given to the PricingLogicAlgorithm"
        },
        "description": {
          "type": "string",
          "description": "Description of the PricingLogicAlgorithm"
        },
        "validFor": {
          "$ref": "#/definitions/TimePeriod",
          "description": "The period for which the PricingLogicAlgorithm is valid"
        },
        "plaSpecId": {
          "type": "string",
          "description": "id of corresponding PricingLogicAlgorithm specification"
        },
        "@baseType": {
          "type": "string",
          "description": "When sub-classing, this defines the super-class"
        },
        "@schemaLocation": {
          "type": "string",
          "format": "uri",
          "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
        },
        "@type": {
          "type": "string",
          "description": "When sub-classing, this defines the sub-class entity name"
        }
      }
    },
    "Tax": {
      "type": "object",
      "description": "An amount of money levied on the price of a Product by a legislative body.",
      "properties": {
        "taxAmount": {
          "$ref": "#/definitions/Money",
          "description": "tax amount"
        },
        "taxCategory": {
          "$ref": "#/definitions/Money",
          "description": "A categorization of the tax rate."
        },
        "taxRate": {
          "type": "number",
          "format": "float",
          "description": "Tax rate"
        }
      }
    },
    "Review": {
      "type": "object",
      "description": "The review resource contains the users opinion for a product",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier of the review"
        },
        "relatedParty": {
          "$ref": "#/definitions/RelatedPartyRef"
        },
        "headline": {
          "type": "string",
          "description": "Headline of the review"
        },
        "comment": {
          "type": "string",
          "description": "Comment of the review"
        },
        "rating": {
          "type": "string",
          "description": "Rating of the review"
        },
        "creationDate": {
          "type": "string",
          "format": "date-time",
          "description": "Date and time of the creation"
        },
        "alias": {
          "type": "string",
          "description": "The name of the user, otherwise is Anonymous"
        },
        "productOffering": {
          "$ref": "#/definitions/ProductOfferingRef",
          "description": "Product offering reference."
        },
        "language": {
          "type": "string",
          "description": "Language of the review"
        },
        "status": {
          "$ref": "#/definitions/ReviewStatus"
        }
      }
    },
    "ReviewStatus": {
      "type": "string",
      "description": "Type of the lifecycle status available.",
      "enum": [
        "approved",
        "pending",
        "rejected"
      ]
    },
    "ShoppingCart": {
      "type": "object",
      "description": "Shopping Cart resource is used for the temporarily selection and reservation of product offerings in e-commerce, call center and retail purchase. Shopping cart supports purchase of both physical and digital goods and service (e.g. handset, telecom network service). Shopping Cart contain list of cart items, a reference to customer (partyRole) or contact medium in case customer not exist, and the total items price including promotions",
      "properties": {
        "@baseType": {
          "type": "string",
          "description": "Generic attribute indicating the base class type of the extension class of the current object. Useful only when the class type of the current  object is unknown to the implementation."
        },
        "@schemaLocation": {
          "type": "string",
          "description": "Generic attribute containing the link to the schema that defines the structure of the class type of the current object."
        },
        "@type": {
          "type": "string",
          "description": "Generic attribute containing the name of the resource class type"
        },
        "href": {
          "type": "string",
          "description": "Hyperlink to access the shopping cart"
        },
        "id": {
          "type": "string",
          "description": "Unique identifier created on provider side (e.g. Order Capture system)"
        },
        "baseSiteId": {
          "type": "string",
          "description": "Identifier of the base site"
        },
        "validFor": {
          "$ref": "#/definitions/TimePeriod",
          "description": "The period for which the shopping cart is valid (e.g. 90 if no activity or 7 days if cart is empty)"
        },
        "contactMedium": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ContactMedium"
          }
        },
        "cartTotalPrice": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CartPrice"
          },
          "description": "Total amount of the shopping cart, usually of money, that represents the actual price paid by the Customer for cart (considering only \"Active\" cart items)"
        },
        "cartCosts": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CartPrice"
          },
          "description": "Represents the delivery and payment costs for the cart"
        },
        "cartItem": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CartItem"
          }
        },
        "relatedParty": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/RelatedPartyRef"
          }
        },
        "deliveryMode": {
          "$ref": "#/definitions/DeliveryModeRef",
          "description": "Reference to the delivery mode"
        },
        "message": {
          "description": "Deprecated since 1911",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Message"
          }
        },
        "paymentMethod": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PaymentMethodRef"
          },
          "description": " The payment methods of the cart."
        },
        "place": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Place"
          }
        },
        "validation": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ValidationItem"
          }
        },
        "promotion": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PromotionRef"
          }
        },
        "status": {
          "type": "string",
          "description": "status of the shopping cart"
        }
      }
    },
    "ShoppingCart_Create": {
      "type": "object",
      "description": "Shopping Cart resource is used for the temporarily selection and reservation of product offerings in e-commerce, call center and retail purchase. Shopping cart supports purchase of both physical and digital goods and service (e.g. handset, telecom network service). Shopping Cart contain list of cart items, a reference to customer (partyRole) or contact medium in case customer not exist, and the total items price including promotions\nSkipped properties: id,href",
      "properties": {
        "@baseType": {
          "type": "string",
          "description": "Generic attribute indicating the base class type of the extension class of the current object. Useful only when the class type of the current  object is unknown to the implementation."
        },
        "@schemaLocation": {
          "type": "string",
          "description": "Generic attribute containing the link to the schema that defines the structure of the class type of the current object."
        },
        "@type": {
          "type": "string",
          "description": "Generic attribute containing the name of the resource class type"
        },
        "validFor": {
          "$ref": "#/definitions/TimePeriod",
          "description": "The period for which the shopping cart is valid (e.g. 90 if no activity or 7 days if cart is empty)"
        },
        "contactMedium": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ContactMedium"
          }
        },
        "cartTotalPrice": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CartPrice"
          },
          "description": "Total amount of the shopping cart, usually of money, that represents the actual price paid by the Customer for cart (considering only \"Active\" cart items)"
        },
        "cartItem": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CartItem"
          }
        },
        "relatedParty": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/RelatedPartyRef"
          }
        },
        "validationError": {
          "type": "string",
          "description": " Text that provide details for validation error."
        }
      }
    },
    "ShoppingCart_Update": {
      "type": "object",
      "description": "Shopping Cart resource is used for the temporarily selection and reservation of product offerings in e-commerce, call center and retail purchase. Shopping cart supports purchase of both physical and digital goods and service (e.g. handset, telecom network service). Shopping Cart contain list of cart items, a reference to customer (partyRole) or contact medium in case customer not exist, and the total items price including promotions\nSkipped properties: id,href,id,href,validFor,cartTotalPrice",
      "properties": {
        "@baseType": {
          "type": "string",
          "description": "Generic attribute indicating the base class type of the extension class of the current object. Useful only when the class type of the current  object is unknown to the implementation."
        },
        "@schemaLocation": {
          "type": "string",
          "description": "Generic attribute containing the link to the schema that defines the structure of the class type of the current object."
        },
        "@type": {
          "type": "string",
          "description": "Generic attribute containing the name of the resource class type"
        },
        "contactMedium": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ContactMedium"
          }
        },
        "cartItem": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CartItem"
          }
        },
        "relatedParty": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/RelatedPartyRef"
          }
        }
      }
    },
    "ContactMedium": {
      "type": "object",
      "description": "Indicates the contact medium that could be used to contact the party.",
      "properties": {
        "@baseType": {
          "type": "string",
          "description": "Generic attribute indicating the base class type of the extension class of the current object. Useful only when the class type of the current  object is unknown to the implementation."
        },
        "@schemaLocation": {
          "type": "string",
          "description": "Generic attribute containing the link to the schema that defines the structure of the class type of the current object."
        },
        "@type": {
          "type": "string",
          "description": "Generic attribute containing the name of the resource class type"
        },
        "preferred": {
          "type": "boolean",
          "description": "If true, indicates that is the preferred contact medium"
        },
        "type": {
          "type": "string",
          "description": "Type of the contact medium, such as: email address, telephone number, postal address"
        },
        "validFor": {
          "$ref": "#/definitions/TimePeriod",
          "description": "The time period that the contact medium is valid for"
        },
        "characteristic": {
          "$ref": "#/definitions/MediumCharacteristic"
        }
      }
    },
    "CartPrice": {
      "discriminator": "@type",
      "type": "object",
      "description": "An amount, usually of money, that represents the actual price paid by the customer for this item. May represent the total price of the shopping cart or the total of the cart item depending on the relation",
      "properties": {
        "@baseType": {
          "type": "string",
          "description": "Generic attribute indicating the base class type of the extension class of the current object. Useful only when the class type of the current  object is unknown to the implementation."
        },
        "@schemaLocation": {
          "type": "string",
          "description": "Generic attribute containing the link to the schema that defines the structure of the class type of the current object."
        },
        "@type": {
          "type": "string",
          "description": "Generic attribute containing the name of the resource class type"
        },
        "description": {
          "type": "string",
          "description": "A narrative that explains in detail the semantics of this order item price."
        },
        "name": {
          "type": "string",
          "description": "A short descriptive name such as \"Subscription price\"."
        },
        "id": {
          "type": "string",
          "description": "The id of the price."
        },
        "priceType": {
          "description": "Type of price, such as: OneTime, Recurring, Usage.",
          "type": "string"
        },
        "recurringChargePeriod": {
          "type": "string",
          "description": "Could be month, week..."
        },
        "unitOfMeasure": {
          "type": "string",
          "description": "Could be minutes, GB..."
        },
        "usageChargeType": {
          "type": "string",
          "description": "The type of the usage charge"
        },
        "price": {
          "$ref": "#/definitions/Price"
        },
        "cartPrice": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CartPrice"
          }
        },
        "priceAlteration": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PriceAlteration"
          }
        }
      }
    },
    "CartItem": {
      "type": "object",
      "description": "An identified part of the shopping cart. A shopping cart  is decomposed into one or more shopping cart item. Cart item represents a product offering or bundled product offering that user wish to purchase, as well as the pricing of the product offering, reference to product in case of configured characteristic or installation address. Cart items can be related to other cart item to related bundled offerings or reference cart Items to a shipping options",
      "properties": {
        "@baseType": {
          "type": "string",
          "description": "Generic attribute indicating the base class type of the extension class of the current object. Useful only when the class type of the current  object is unknown to the implementation."
        },
        "@schemaLocation": {
          "type": "string",
          "description": "Generic attribute containing the link to the schema that defines the structure of the class type of the current object."
        },
        "@type": {
          "type": "string",
          "description": "Generic attribute containing the name of the resource class type"
        },
        "action": {
          "$ref": "#/definitions/ActionType",
          "description": "The action to be carried out on the Product. Can be \"add\" / \"update\" / \"keep\" / \"remove\""
        },
        "id": {
          "type": "string",
          "description": "Identifier of the cart item (generally it is a sequence number 01, 02, 03, ...) in the shopping cart"
        },
        "processType": {
          "$ref": "#/definitions/ProcessTypeRef",
          "description": "CartItem process type"
        },
        "quantity": {
          "type": "integer",
          "description": "Quantity of cart items"
        },
        "status": {
          "type": "string",
          "description": "status of cart item. e.g \"Active\" , \"SavedForLater\"."
        },
        "itemTerm": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CartTerm"
          }
        },
        "cartItem": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CartItem"
          }
        },
        "note": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Note"
          }
        },
        "itemTotalPrice": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CartPrice"
          }
        },
        "product": {
          "$ref": "#/definitions/Product"
        },
        "itemPrice": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CartPrice"
          }
        },
        "productOffering": {
          "$ref": "#/definitions/ProductOfferingRef"
        },
        "validationError": {
          "description": "Deprecated since 1911",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "cartItemRelationship": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CartItemRelationship"
          }
        },
        "appointment": {
          "$ref": "#/definitions/AppointmentRef",
          "description": "Appointment"
        },
        "validation": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ValidationItem"
          }
        },
        "promotion": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PromotionRef"
          }
        },
        "contractStartDate": {
          "description": "Date when the contract was created",
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "MediumCharacteristic": {
      "type": "object",
      "description": "Describes the contact medium characteristics that could be used to contact a party (an individual or an organization)",
      "properties": {
        "city": {
          "type": "string",
          "description": "The city"
        },
        "country": {
          "type": "string",
          "description": "The country"
        },
        "emailAddress": {
          "type": "string",
          "description": "Full email address in standard format"
        },
        "faxNumber": {
          "type": "string",
          "description": "The fax number of the contact"
        },
        "phoneNumber": {
          "type": "string",
          "description": "The primary phone number of the contact"
        },
        "postCode": {
          "type": "string",
          "description": "Postcode"
        },
        "stateOrProvince": {
          "type": "string",
          "description": "State or province"
        },
        "street1": {
          "type": "string",
          "description": "Describes the street"
        },
        "street2": {
          "type": "string",
          "description": "Complementary street description"
        },
        "type": {
          "type": "string",
          "description": "Type of medium (fax, mobile phone...)"
        }
      }
    },
    "CartTerm": {
      "type": "object",
      "properties": {
        "@baseType": {
          "type": "string",
          "description": "Generic attribute indicating the base class type of the extension class of the current object. Useful only when the class type of the current  object is unknown to the implementation."
        },
        "@schemaLocation": {
          "type": "string",
          "description": "Generic attribute containing the link to the schema that defines the structure of the class type of the current object."
        },
        "@type": {
          "type": "string",
          "description": "Generic attribute containing the name of the resource class type"
        },
        "description": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "duration": {
          "$ref": "#/definitions/Quantity"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "Note": {
      "type": "object",
      "description": "Extra information about a given entity",
      "properties": {
        "author": {
          "type": "string",
          "description": "Author of the note"
        },
        "date": {
          "type": "string",
          "format": "date-time",
          "description": "Date of the note"
        },
        "text": {
          "type": "string",
          "description": "Text of the note"
        }
      }
    },
    "CartItemRelationship": {
      "type": "object",
      "description": "Relationship among cart items mainly other than hierarchical relationships such as \"RelyOn\", \"DependentOn\", \"Shipping\" etc.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier of the referred cart item"
        },
        "type": {
          "type": "string",
          "description": "Type of the cart item relationship"
        },
        "cartItem": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CartItemRef"
          }
        }
      }
    },
    "CartItemRef": {
      "type": "object",
      "description": "CartIIem reference. A CartItem is an identified part of the shopping cart.",
      "properties": {
        "@referredType": {
          "type": "string",
          "description": "Generic attribute indicating the name of the class type of the referred resource entity."
        },
        "id": {
          "type": "string",
          "description": "Unique identifier of the cart item"
        }
      }
    },
    "EventSubscription": {
      "required": [
        "id",
        "callback"
      ],
      "properties": {
        "id": {
          "type": "string",
          "description": "Id of the listener"
        },
        "callback": {
          "type": "string",
          "description": "The callback being registered."
        },
        "query": {
          "type": "string",
          "description": "additional data to be passed"
        }
      }
    },
    "EventSubscriptionInput": {
      "required": [
        "callback"
      ],
      "properties": {
        "callback": {
          "type": "string",
          "description": "The callback being registered."
        },
        "query": {
          "type": "string",
          "description": "additional data to be passed"
        }
      }
    },
    "Message": {
      "type": "object",
      "description": "Indicates the messages that could appear on cart configuration",
      "properties": {
        "value": {
          "type": "string",
          "description": "Content of message"
        },
        "@baseType": {
          "type": "string",
          "description": "Generic attribute indicating the base class type of the extension class of the current object. Useful only when the class type of the current  object is unknown to the implementation."
        },
        "@schemaLocation": {
          "type": "string",
          "description": "Generic attribute containing the link to the schema that defines the structure of the class type of the current object."
        },
        "@type": {
          "type": "string",
          "description": "Generic attribute containing the name of the resource class type"
        },
        "type": {
          "description": "Type of message, such as: error, warning ",
          "type": "string",
          "enum": [
            "error",
            "warning",
            "success",
            "wrong"
          ]
        }
      }
    },
    "PromotionRef": {
      "type": "object",
      "description": "Reference to promotion.",
      "properties": {
        "@type": {
          "type": "string",
          "description": "Generic attribute containing the name of the resource class type"
        },
        "@referredType": {
          "type": "string",
          "description": "Class type of the referred promotion."
        },
        "href": {
          "type": "string",
          "description": "Url used to reference the promotion."
        },
        "id": {
          "type": "string",
          "description": "Unique identifier for promotion."
        },
        "status": {
          "$ref": "#/definitions/Status",
          "description": "The status of the promotion."
        },
        "message": {
          "type": "string",
          "description": "Promotion description"
        }
      }
    },
    "Status": {
      "description": "Status of the promotion.",
      "type": "string",
      "enum": [
        "APPLIED",
        "POTENTIAL"
      ]
    },
    "PartyRole": {
      "type": "object",
      "description": "The part played by a party in a given context.",
      "required": [
        "name",
        "type"
      ],
      "properties": {
        "@baseType": {
          "type": "string",
          "description": "Generic attribute indicating the base class type of the extension class of the current object. Useful only when the class type of the current  object is unknown to the implementation."
        },
        "@schemaLocation": {
          "type": "string",
          "description": "Generic attribute containing the link to the schema that defines the structure of the class type of the current object."
        },
        "@type": {
          "type": "string",
          "description": "Generic attribute containing the name of the resource class type"
        },
        "href": {
          "type": "string",
          "description": "Url used to reference the party role."
        },
        "id": {
          "type": "string",
          "description": "Unique identifier for PartyRoles"
        },
        "name": {
          "type": "string",
          "description": "A word, term, or phrase by which the PartyRole is known and distinguished from other PartyRoles."
        },
        "subscriptionAccess": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SubscriptionAccess"
          }
        },
        "individualIdentification": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/IndividualIdentification"
          }
        }
      }
    },
    "SubscriptionAccess": {
      "type": "object",
      "description": "Customer's role on a certain subscription base",
      "properties": {
        "accessType": {
          "type": "string",
          "$ref": "#/definitions/AccessType"
        },
        "subscriptionBase": {
          "$ref": "#/definitions/SubscriptionBaseRef"
        },
        "relatedParty": {
          "$ref": "#/definitions/RelatedPartyRef"
        }
      }
    },
    "SubscriptionBaseRef": {
      "type": "object",
      "description": "SubscriptionBase reference.",
      "required": [
        "id"
      ],
      "properties": {
        "id": {
          "type": "string",
          "description": "Identifier of the subscription base"
        },
        "href": {
          "type": "string",
          "description": "Url used to reference the SubscriptionBase"
        }
      }
    },
    "AccessType": {
      "type": "string",
      "description": "Type of the administration access available.",
      "enum": [
        "OWNER",
        "ADMINISTRATOR",
        "BENEFICIARY"
      ]
    },
    "SubscriptionBase": {
      "type": "object",
      "description": "The subscription base.",
      "required": [
        "id"
      ],
      "properties": {
        "id": {
          "type": "string",
          "description": "Identifier of the subscription base."
        },
        "href": {
          "type": "string",
          "description": "Reference of the subscription base."
        },
        "subscriberIdentity": {
          "type": "string",
          "description": "The subscriber's identity."
        },
        "@type": {
          "type": "string",
          "description": "Class type of the subscription base."
        },
        "@schemaLocation": {
          "type": "string",
          "description": "A link to the schema describing this subscription base."
        },
        "subscriptionAccess": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SubscriptionAccess"
          },
          "description": "Customer's role on a certain subscription base."
        },
        "billingSystem": {
          "$ref": "#/definitions/BillingSystemRef",
          "description": "Reference to the billing system."
        },
        "billingAccount": {
          "$ref": "#/definitions/BillingAccountRef",
          "description": "Reference to the billing account."
        }
      }
    },
    "BillingSystemRef": {
      "type": "object",
      "description": "Billing system reference.",
      "required": [
        "id"
      ],
      "properties": {
        "id": {
          "type": "string",
          "description": "The id of the billing system."
        },
        "href": {
          "type": "string",
          "description": "Url used to reference the BillingSystem."
        }
      }
    },
    "ChecklistAction": {
      "type": "object",
      "description": "Represents a Checklist Action resource.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier of the Checklist Action."
        },
        "href": {
          "type": "string",
          "description": "Reference of the Checklist Action."
        },
        "name": {
          "type": "string",
          "description": "Name of the Checklist Action."
        },
        "description": {
          "type": "string",
          "description": "Description of the Checklist Action."
        },
        "actionType": {
          "type": "string",
          "description": "Action type"
        },
        "productSpecCharacteristic": {
          "$ref": "#/definitions/ProductSpecCharacteristicRef",
          "description": "Product specification characteristic reference"
        },
        "processType": {
          "type": "array",
          "description": "Represents the purchasing flows for which the checklist action is applicable.",
          "items": {
            "$ref": "#/definitions/ProcessType"
          }
        },
        "productOffering": {
          "type": "array",
          "description": "List of references to product offering fow which the checkout action is applicable.",
          "items": {
            "$ref": "#/definitions/ProductOfferingRef"
          }
        },
        "@type": {
          "type": "string",
          "description": "Class type of the Checklist Action."
        },
        "@schemaLocation": {
          "type": "string",
          "description": "A link to the schema describing this Checklist Action entity."
        }
      }
    },
    "ProductSpecCharacteristicRef": {
      "type": "object",
      "description": "Product Spec Characteristic reference.",
      "properties": {
        "href": {
          "type": "string",
          "description": "Reference of the product spec characteristic"
        },
        "id": {
          "type": "string",
          "description": "Identifier of the product spec characteristic"
        },
        "name": {
          "type": "string",
          "description": "Name of the product spec characteristic"
        },
        "@referredType": {
          "type": "string",
          "description": "Class type of the referred product spec characteristic"
        }
      }
    },
    "Recommendation": {
      "discriminator": "@type",
      "type": "object",
      "description": "Recommendation API is used to recommend offering quickly based on the history and real-time context of customer. It is a real-time and personalized recommendation API. It is usually provided by e-commerce or BSS, CRM system in omni-channel.",
      "properties": {
        "description": {
          "type": "string"
        },
        "href": {
          "type": "string",
          "description": "Hypertext Reference of the recommendation."
        },
        "id": {
          "type": "string",
          "description": "Unique identifier of recommendation"
        },
        "name": {
          "type": "string",
          "description": "Name of recommendation"
        },
        "type": {
          "type": "string",
          "description": "Type of recommendation.\nThe basic type is :\n\u00a1\u00aeAD\u00a1\u00af: it means the recommendation is the advertisement for display\n\u00a1\u00aeOFFER\u00a1\u00af: it means the recommended content is the offer entry page. By clicking it, the user can be forwarded to the details of the offering"
        },
        "validFor": {
          "$ref": "#/definitions/TimePeriod",
          "description": "The period in which the recommendation is valid."
        },
        "order": {
          "$ref": "#/definitions/ProductOrderRef"
        },
        "location": {
          "$ref": "#/definitions/Place",
          "description": "The place which the recommendation is related with"
        },
        "channel": {
          "$ref": "#/definitions/ChannelRef"
        },
        "category": {
          "$ref": "#/definitions/CategoryRef",
          "description": "The category for grouping recommendations"
        },
        "shoppingCart": {
          "$ref": "#/definitions/ShoppingCartRef",
          "description": "The shopping cart which the recommendation is related with."
        },
        "relatedParty": {
          "$ref": "#/definitions/RelatedPartyRef"
        },
        "item": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/RecommendationItem"
          }
        },
        "@type": {
          "type": "string",
          "description": "The class type of the actual resource (for type extension)."
        },
        "@schemaLocation": {
          "type": "string",
          "description": "A link to the schema describing a resource (for type extension)."
        },
        "@baseType": {
          "type": "string",
          "description": "The base type for use in polymorphic collections"
        }
      }
    },
    "ProcessTypeRecommendation": {
      "description": "Process Type Recommendation subtype of the Recommendation entity.",
      "allOf": [
        {
          "$ref": "#/definitions/Recommendation"
        },
        {
          "type": "object",
          "properties": {
            "subscriptionBase": {
              "$ref": "#/definitions/SubscriptionBaseRef"
            },
            "processType": {
              "$ref": "#/definitions/ProcessTypeRef"
            }
          }
        }
      ]
    },
    "RecommendationItem": {
      "type": "object",
      "description": "A list of recommendation items. Every item is a product offering and its rank.",
      "properties": {
        "priority": {
          "type": "integer",
          "description": "The rank of the list of recommended offering."
        },
        "offering": {
          "$ref": "#/definitions/ProductOfferingRef",
          "description": "Recommended product offering"
        },
        "price": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ProductOfferingPrice"
          }
        },
        "@type": {
          "type": "string",
          "description": "The class type of the actual resource (for type extension)."
        },
        "@schemaLocation": {
          "type": "string",
          "description": "A link to the schema describing a resource (for type extension)."
        },
        "@baseType": {
          "type": "string",
          "description": "The base type for use in polymorphic collections"
        }
      }
    },
    "ProcessTypeRef": {
      "type": "object",
      "description": "A reference to the process type",
      "properties": {
        "id": {
          "type": "string",
          "description": "The identifier of the process type"
        },
        "href": {
          "type": "string",
          "description": "Url used to reference the process type"
        },
        "@referredType": {
          "type": "string",
          "description": "(Class) type of the referred process type"
        },
        "@type": {
          "type": "string",
          "description": "(Class) type of the process type"
        }
      }
    },
    "ProductOfferingTermRef": {
      "type": "object",
      "description": "A reference to the product offering term",
      "properties": {
        "id": {
          "type": "string",
          "description": "The identifier of the product offering term"
        },
        "href": {
          "type": "string",
          "description": "Url used to reference the product offering term"
        },
        "@referredType": {
          "type": "string",
          "description": "(Class) type of the referred product offering term"
        },
        "@type": {
          "type": "string",
          "description": "(Class) type of the product offering term"
        }
      }
    },
    "ProductOfferingRecommendationRef": {
      "description": "ProductOfferingRecommendationRef subtype of the ProductOfferingRef entity.",
      "allOf": [
        {
          "$ref": "#/definitions/ProductOfferingRef"
        },
        {
          "type": "object",
          "properties": {
            "productOfferingTerm": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ProductOfferingTermRef"
              }
            }
          }
        }
      ]
    },
    "Error": {
      "required": [
        "code",
        "message"
      ],
      "properties": {
        "code": {
          "type": "integer",
          "description": "An integer coding the error type. This is given to caller so he can translate them if required."
        },
        "message": {
          "type": "string",
          "description": "A short localized string that describes the error."
        },
        "description": {
          "type": "string",
          "description": "(optional) A long localized error description if needed. It can contain precise information about which parameter is missing, or what are the identifier acceptable values."
        },
        "infoURL": {
          "type": "string",
          "description": "(optional) A URL to online documentation that provides more information about the error."
        }
      }
    },
    "RecurringChargeCartPrice": {
      "description": "A cart price charge  paid recursively.",
      "allOf": [
        {
          "$ref": "#/definitions/CartPrice"
        },
        {
          "type": "object",
          "properties": {
            "cycle": {
              "$ref": "#/definitions/Cycle",
              "description": "Represents the start time, and end time of the recurring cycle (the first 3 months) . If empty, the cycle is the entire recurring period. "
            }
          }
        }
      ]
    },
    "OneTimeChargeCartPrice": {
      "description": "A cart price charge paid only once.",
      "allOf": [
        {
          "$ref": "#/definitions/CartPrice"
        }
      ]
    },
    "UsageChargeCartPrice": {
      "description": "A cart price per usage unit, either volume overage or tier price.",
      "allOf": [
        {
          "$ref": "#/definitions/CartPrice"
        },
        {
          "type": "object",
          "properties": {
            "tierStart": {
              "type": "string",
              "description": "The start limit of the usage tier"
            },
            "tierEnd": {
              "type": "string",
              "description": "The end limit of the usage tier"
            }
          }
        }
      ]
    },
    "ProductOrder": {
      "description": "Product order resource",
      "type": "object",
      "properties": {
        "id": {
          "description": "ID created on repository side (OM system)",
          "type": "string"
        },
        "href": {
          "description": "Hyperlink to access the order",
          "type": "string"
        },
        "externalId": {
          "description": "ID given by the consumer and only understandable by him (to facilitate his searches afterwards).",
          "type": "string"
        },
        "shoppingCart": {
          "description": "Reference to the shopping cart resource collecting purchase entries used as input for place order",
          "$ref": "#/definitions/ShoppingCartRef"
        },
        "baseSiteId": {
          "type": "string",
          "description": "Identifier of the base site"
        },
        "priority": {
          "$ref": "#/definitions/PriorityType"
        },
        "description": {
          "description": "Description of the product order",
          "type": "string"
        },
        "category": {
          "description": "Used to categorize the order from a business perspective that can be useful for the OM system (e.g. 'enterprise', 'residential', ...).",
          "type": "string"
        },
        "state": {
          "$ref": "#/definitions/StateType"
        },
        "orderDate": {
          "description": "Date when the order was created",
          "type": "string",
          "format": "date-time"
        },
        "completionDate": {
          "description": "Date when the order was completed.",
          "type": "string",
          "format": "date-time"
        },
        "requestedStartDate": {
          "description": "Order start date wished by the requestor",
          "type": "string",
          "format": "date-time"
        },
        "requestedCompletionDate": {
          "description": "Requested delivery date from the requestor perspective",
          "type": "string",
          "format": "date-time"
        },
        "expectedCompletionDate": {
          "description": "Expected delivery date amended by the provider",
          "type": "string",
          "format": "date-time"
        },
        "notificationContact": {
          "description": "Contact attached to the order to send back information regarding this order",
          "type": "string"
        },
        "@baseType": {
          "description": "Indicates the base type of the resource. Here can be 'ProductOrder'.",
          "type": "string"
        },
        "@type": {
          "description": "Indicates the type of resource. Here can be 'ProductOrder'.",
          "type": "string"
        },
        "@schemaLocation": {
          "description": "A link to the schema describing this REST resource.",
          "type": "string"
        },
        "channel": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Channel"
          }
        },
        "note": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Note"
          }
        },
        "relatedParty": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/RelatedPartyRef"
          }
        },
        "payment": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PaymentRef"
          }
        },
        "billingAccount": {
          "$ref": "#/definitions/BillingAccountRef"
        },
        "orderTotalPrice": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/OrderPrice"
          }
        },
        "orderItem": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/OrderItem"
          }
        },
        "promotion": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PromotionRef"
          }
        },
        "orderCost": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/OrderPrice"
          },
          "description": "Represents the delivery and payment costs for the order"
        },
        "deliveryMode": {
          "$ref": "#/definitions/DeliveryModeRef",
          "description": "Reference to the delivery mode"
        },
        "place": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Place"
          }
        }
      }
    },
    "PriorityType": {
      "description": "Priority",
      "type": "string",
      "enum": [
        "0",
        "1",
        "2",
        "3",
        "4"
      ]
    },
    "ActionType": {
      "description": "",
      "type": "string",
      "enum": [
        "ADD",
        "UPDATE",
        "KEEP",
        "REMOVE"
      ]
    },
    "StateType": {
      "description": "",
      "type": "string",
      "enum": [
        "CANCELLING",
        "CHECKED_VALID",
        "CREATED",
        "OPEN",
        "CHECKED_INVALID",
        "ON_VALIDATION",
        "PENDING_APPROVAL",
        "SUSPENDED",
        "COMPLETED",
        "PAYMENT_AUTHORIZED",
        "PENDING_APPROVAL_FROM_MERCHANT",
        "CANCELLED",
        "PAYMENT_NOT_AUTHORIZED",
        "PENDING_QUOTE",
        "APPROVED_QUOTE",
        "PAYMENT_AMOUNT_RESERVED",
        "PAYMENT_AMOUNT_NOT_RESERVED",
        "REJECTED_QUOTE",
        "APPROVED",
        "PAYMENT_CAPTURED",
        "PAYMENT_NOT_CAPTURED",
        "REJECTED",
        "APPROVED_BY_MERCHANT",
        "FRAUD_CHECKED",
        "ORDER_SPLIT",
        "REJECTED_BY_MERCHANT",
        "ASSIGNED_TO_ADMIN",
        "PROCESSING_ERROR",
        "B2B_PROCESSING_ERROR",
        "WAIT_FRAUD_MANUAL_CHECK",
        "PAYMENT_NOT_VOIDED",
        "TAX_NOT_VOIDED",
        "TAX_NOT_COMMITTED",
        "TAX_NOT_REQUOTED"
      ]
    },
    "RelationShipType": {
      "description": "",
      "type": "string",
      "enum": [
        "reliesOn",
        "brings",
        "hasParent",
        "hasChild"
      ]
    },
    "PaymentRef": {
      "description": "If an immediate payment has been done at the product order submission, the payment information are captured and stored (as a reference) in the order.",
      "required": [
        "id",
        "href"
      ],
      "type": "object",
      "properties": {
        "id": {
          "description": "Identifier of a payment.",
          "type": "string"
        },
        "href": {
          "description": "Hyperlink to access to a payment.",
          "type": "string"
        },
        "name": {
          "description": "Name of a payment.",
          "type": "string"
        },
        "code": {
          "type": "string",
          "description": "Unique identifier of the voucher"
        },
        "type": {
          "type": "string",
          "enum": [
            "VOUCHER",
            "CREDITCARD"
          ],
          "description": "Payment method type. The content of the details field depends on the value of this one"
        },
        "@referredType": {
          "description": "Indicates the type of resource. Here can be 'cash', 'BankCard', ‘Check’, etc...",
          "type": "string"
        }
      }
    },
    "QualificationRef": {
      "description": "It could be a serviceQualification or a productOfferingQualification that has been executed previously and captured in the productOrder to provide 'eligibility' information.",
      "required": [
        "id",
        "href"
      ],
      "type": "object",
      "properties": {
        "id": {
          "description": "Identifier of a pre-existing qualification.",
          "type": "string"
        },
        "href": {
          "description": "href of the qualification.",
          "type": "string"
        },
        "qualificationItemId": {
          "description": "Id of an item of a qualification.",
          "type": "string"
        },
        "@referredType": {
          "description": "Indicates the type of resource. Here it can be a type of qualification. (could a service qualification or a product offering qualification).",
          "type": "string"
        }
      }
    },
    "OrderTerm": {
      "description": "Description of a productTerm linked to this orderItem. This represent a commitment with a duration.\nDuration or name must be provided.",
      "type": "object",
      "properties": {
        "name": {
          "description": "Name of the productOrderTerm.",
          "type": "string"
        },
        "description": {
          "description": "Description of the productOrderTerm.",
          "type": "string"
        },
        "duration": {
          "$ref": "#/definitions/Quantity"
        },
        "@type": {
          "description": "Indicated the type of Term.",
          "type": "string"
        }
      }
    },
    "PriceType": {
      "description": "",
      "type": "string",
      "enum": [
        "recurring",
        "oneTime",
        "usage",
        "PRODUCT_PRICE",
        "DELIVERY_COST",
        "PAYMENT_COST",
        "DISCOUNT"
      ]
    },
    "OrderItem": {
      "description": "An identified part of the order. A product order is decomposed into one or more order items.",
      "required": [
        "id",
        "action"
      ],
      "type": "object",
      "properties": {
        "id": {
          "description": "Identifier of the line item (generally it is a sequence number 01, 02, 03, ...)",
          "type": "string"
        },
        "action": {
          "$ref": "#/definitions/ActionType",
          "description": "The action to be carried out on the Product. Can be \"add\" / \"update\" / \"keep\" / \"remove\""
        },
        "state": {
          "$ref": "#/definitions/StateType"
        },
        "quantity": {
          "description": "Quantity ordered",
          "type": "integer",
          "format": "int64"
        },
        "@type": {
          "description": "Indicates the type of resource. Here it can be a type of productOrderItem.",
          "type": "string"
        },
        "@schemaLocation": {
          "description": "An URL to the schema describing this REST resource.",
          "type": "string"
        },
        "appointment": {
          "$ref": "#/definitions/AppointmentRef"
        },
        "billingAccount": {
          "$ref": "#/definitions/BillingAccountRef"
        },
        "itemPrice": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/OrderPrice"
          }
        },
        "itemTotalPrice": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/OrderPrice"
          }
        },
        "productOffering": {
          "$ref": "#/definitions/ProductOfferingRef"
        },
        "product": {
          "$ref": "#/definitions/Product"
        },
        "orderItemRelationship": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/OrderItemRelationShip"
          }
        },
        "qualification": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/QualificationRef"
          }
        },
        "payment": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PaymentRef"
          }
        },
        "itemTerm": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/OrderTerm"
          }
        },
        "orderItem": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/OrderItem"
          }
        },
        "processType": {
          "$ref": "#/definitions/ProcessType",
          "description": "Process type"
        },
        "promotion": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PromotionRef"
          }
        },
        "contractStartDate": {
          "description": "Date when the contract was created",
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "AppointmentRef": {
      "description": "If the product order item requires an appointment between the service provider and the customer.",
      "required": [
        "id"
      ],
      "type": "object",
      "properties": {
        "href": {
          "description": "Hyperlink to access the appointment",
          "type": "string"
        },
        "id": {
          "description": "id of the appointment",
          "type": "string"
        },
        "@referredType": {
          "description": "Indicates the (class) type of resource.",
          "type": "string"
        }
      }
    },
    "OrderPrice": {
      "discriminator": "@type",
      "description": "An amount, usually of money, that represents the actual price paid by the Customer for this item or this order.",
      "required": [
        "price"
      ],
      "type": "object",
      "properties": {
        "name": {
          "description": "A short descriptive name such as \"Subscription price\".",
          "type": "string"
        },
        "id": {
          "type": "string",
          "description": "id"
        },
        "description": {
          "description": "A narrative that explains in detail the semantics of this order item price",
          "type": "string"
        },
        "priceType": {
          "$ref": "#/definitions/PriceType"
        },
        "unitOfMeasure": {
          "description": "Could be minutes, gigaBytes,...",
          "type": "string"
        },
        "recurringChargePeriod": {
          "description": "Could be month, week,...",
          "type": "string"
        },
        "usageChargeType": {
          "type": "string",
          "description": "The type of the usage charge."
        },
        "@type": {
          "description": "Indicate the type of orderPrice.",
          "type": "string"
        },
        "@baseType": {
          "description": "Indicate the base type of orderPrice.",
          "type": "string"
        },
        "@schemaLocation": {
          "description": "A link to the schema describing this orderPrice extension.",
          "type": "string"
        },
        "price": {
          "$ref": "#/definitions/Price"
        },
        "priceAlteration": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PriceAlteration"
          }
        },
        "billingAccount": {
          "$ref": "#/definitions/BillingAccountRef"
        },
        "orderPrice": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/OrderPrice"
          }
        },
        "productOfferingPrice": {
          "$ref": "#/definitions/ProductOfferingPriceRef",
          "description": "An amount, usually of money, that is asked for or allowed when a ProductOffering is bought, rented, or leased. The price is valid for a defined period of time."
        }
      }
    },
    "RecurringChargeOrderPrice": {
      "description": "An order price charge  paid recursively.",
      "allOf": [
        {
          "$ref": "#/definitions/OrderPrice"
        },
        {
          "type": "object",
          "properties": {
            "cycle": {
              "$ref": "#/definitions/Cycle",
              "description": "Represents the start time, and end time of the recurring cycle (the first 3 months) . If empty, the cycle is the entire recurring period. "
            }
          }
        }
      ]
    },
    "OneTimeChargeOrderPrice": {
      "description": "An order price charge paid only once.",
      "allOf": [
        {
          "$ref": "#/definitions/OrderPrice"
        }
      ]
    },
    "UsageChargeOrderPrice": {
      "description": "An order price per usage unit, either volume overage or tier price.",
      "allOf": [
        {
          "$ref": "#/definitions/OrderPrice"
        },
        {
          "type": "object",
          "properties": {
            "tierStart": {
              "type": "string",
              "description": "The start limit of the usage tier"
            },
            "tierEnd": {
              "type": "string",
              "description": "The end limit of the usage tier"
            }
          }
        }
      ]
    },
    "BaseProductRefOrValue": {
      "description": "This resource is aimed to act as a reference to a Product resource or to provide a subset of data defined on a Product reference",
      "type": "object",
      "properties": {
        "id": {
          "description": "",
          "type": "string"
        },
        "href": {
          "description": "",
          "type": "string"
        },
        "name": {
          "description": "",
          "type": "string"
        },
        "place": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Place"
          }
        },
        "characteristic": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ProductCharacteristic"
          }
        },
        "relatedParty": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/RelatedPartyRef"
          }
        },
        "productRelationship": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ProductRelationship"
          }
        },
        "productSpecification": {
          "$ref": "#/definitions/ProductSpecificationRef"
        },
        "@type": {
          "description": "",
          "type": "string"
        },
        "@schemaLocation": {
          "description": "",
          "type": "string"
        }
      }
    },
    "OrderItemRelationShip": {
      "description": "Linked order items to the one instantiate.",
      "required": [
        "type",
        "id"
      ],
      "type": "object",
      "properties": {
        "type": {
          "$ref": "#/definitions/RelationShipType"
        },
        "id": {
          "description": "The identifier of the related ordered item.",
          "type": "string"
        }
      }
    },
    "ValidationItem": {
      "description": "Validation object",
      "type": "object",
      "properties": {
        "code": {
          "description": "The code of the related validation object",
          "type": "string"
        },
        "message": {
          "description": "The message of the related validation object",
          "type": "string"
        }
      }
    },
    "PaymentMethodRef": {
      "type": "object",
      "description": "PaymentMethod reference. A payment method defines a specific mean of payment (e.g direct debit).",
      "required": [
        "id"
      ],
      "properties": {
        "@referredType": {
          "type": "string",
          "description": "Generic attribute indicating the name of the class type of the referred resource entity."
        },
        "href": {
          "type": "string",
          "description": "Reference of the payment method"
        },
        "id": {
          "type": "string",
          "description": "Unique identifier of the payment method"
        },
        "code": {
          "type": "string",
          "description": "Unique identifier of the voucher"
        },
        "name": {
          "type": "string",
          "description": "Name of the payment method"
        },
        "type": {
          "type": "string",
          "enum": [
            "VOUCHER",
            "CREDITCARD"
          ],
          "description": "Payment method type. The content of the details field depends on the value of this one"
        }
      }
    },
    "IndividualIdentification": {
      "type": "object",
      "description": "Represents our registration of information used as proof of identity by an individual (passport, national identity card, driver’s license, social security number, birth certificate).",
      "required": [
        "identificationId",
        "identificationType"
      ],
      "properties": {
        "identificationId": {
          "description": "A string. Identifier.",
          "type": "string"
        },
        "identificationType": {
          "description": "A string. Identification type (passport, national identity card, driver’s license, social security number, birth certificate).",
          "type": "string"
        },
        "issuingAuthority": {
          "description": "A string. Authority which has issued the identifier, such as: social security, town hall.",
          "type": "string"
        },
        "issuingDate": {
          "description": "A date time (DateTime). Date at which the identifier was issued.",
          "type": "string",
          "format": "date-time"
        },
        "validFor": {
          "$ref": "#/definitions/TimePeriod",
          "description": "A time period. The period for which the identification information is valid."
        },
        "attachment": {
          "type": "array",
          "description": "An attachment ref or value (AttachmentRefOrValue). An attachment by value or by reference.",
          "items": {
            "$ref": "#/definitions/Attachment"
          }
        }
      }
    },
    "UsageSpecificationRef": {
      "type": "object",
      "description": "Usage Specification reference.",
      "required": [
        "id"
      ],
      "properties": {
        "@referredType": {
          "type": "string",
          "description": "Generic attribute indicating the name of the class type of the referred resource entity."
        },
        "href": {
          "type": "string",
          "description": "Reference of the Usage Specification."
        },
        "id": {
          "type": "string",
          "description": "Unique identifier of the Usage Specification."
        },
        "name": {
          "type": "string",
          "description": "Name of the Usage Specification."
        },
        "externalIdentifier": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ExternalIdentifier"
          }
        }
      }
    },
    "ExternalIdentifier": {
      "properties": {
        "owner": {
          "type": "string",
          "description": "Name of the external system that owns the entity.",
          "examples": [
            "SAP Billing System"
          ]
        },
        "externalIdentifierType": {
          "type": "string",
          "description": "Type of the identification, typically would be the type of the entity within the external system",
          "examples": [
            "ProductOfferingPrice"
          ]
        },
        "id": {
          "type": "string",
          "description": "Identification of the entity within the external system.",
          "examples": [
            "BS-5672"
          ]
        }
      }
    },
    "ProductOfferingPriceRef": {
      "type": "object",
      "description": "ProductPriceOffering reference. An amount, usually of money, that is asked for or allowed when a ProductOffering is bought, rented, or leased",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier of a related entity."
        },
        "href": {
          "type": "string",
          "description": "Reference of the related entity."
        },
        "name": {
          "type": "string",
          "description": "Name of the related entity."
        },
        "@baseType": {
          "type": "string",
          "description": "When sub-classing, this defines the super-class"
        },
        "@schemaLocation": {
          "type": "string",
          "format": "uri",
          "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
        },
        "@type": {
          "type": "string",
          "description": "When sub-classing, this defines the sub-class entity name"
        },
        "@referredType": {
          "type": "string",
          "description": "The actual type of the target instance when needed for disambiguation."
        }
      },
      "required": [
        "id"
      ]
    },
    "ProductSpecType": {
      "type": "object",
      "description": "Product Specification type.",
      "required": [
        "id",
        "description"
      ],
      "properties": {
        "id": {
          "type": "string",
          "description": "Identifier of the Product Spec Type."
        },
        "description": {
          "description": "Description of the Product Spec Type.",
          "type": "string"
        }
      }
    }
  }
}
