{
  "swagger": "2.0",
  "info": {
    "title": "Tmu - Tmf Apis",
    "description": "This is Swagger UI environment generated for the Tmf Apis implemented in Tmu",
    "version": "3.0"
  },
  "host": "serverRoot",
  "schemes": [
    "https"
  ],
  "consumes": [
    "application/json;charset=utf-8"
  ],
  "produces": [
    "application/json;charset=utf-8"
  ],
  "tags": [
    {
      "name": "Tmu - Tmf Apis",
      "description": ""
    }
  ],
  "paths": {
    "/productOffering": {
      "get": {
        "operationId": "listProductOffering",
        "summary": "List or find 'ProductOffering' objects",
        "tags": [
          "productOffering"
        ],
        "parameters": [
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "baseSiteId",
            "description": "Identifier of the BaseSite"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "fields",
            "description": "Comma separated properties to display in response"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "name",
            "description": "For filtering: Name of the productOffering"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "offeringGroup.id",
            "description": "For filtering: Id of the productOfferingGroup"
          },
          {
            "type": "boolean",
            "required": false,
            "in": "query",
            "name": "isBundle",
            "description": "For filtering: isBundle determines whether a productOffering represents a single productOffering (false), or a bundle of productOfferings (true)."
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "parentBundledProductOffering.id",
            "description": "For filtering: Id of the parentBundledProductOffering"
          },
          {
            "name": "lastUpdate",
            "format": "date-time",
            "required": false,
            "in": "query",
            "type": "string",
            "description": "For filtering: Date and time of the last update"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "lifecycleStatus",
            "description": "For filtering: Used to indicate the current lifecycle status"
          },
          {
            "name": "validFor.startDateTime",
            "format": "date-time",
            "required": false,
            "in": "query",
            "type": "string",
            "description": "For filtering: An instant of time, starting at the TimePeriod"
          },
          {
            "name": "validFor.endDateTime",
            "format": "date-time",
            "required": false,
            "in": "query",
            "type": "string",
            "description": "For filtering: An instant of time, ending at the TimePeriod."
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "version",
            "description": "For filtering: ProductOffering version"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "@type",
            "description": "For filtering: Class type of the product offering"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "@baseType",
            "description": "For filtering: Immediate base (class) type of the product offering"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "@schemaLocation",
            "description": "For filtering: A link to the schema describing this product offering"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "place.name",
            "description": "For filtering: A user-friendly name for the place, such as \"Paris Store\", \"London Store\", \"Main Home\""
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "place.address",
            "description": "For filtering: A string characterizing an address (for instance a formatted address or an identifier taken from an address database or an address API)."
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "place.@referredType",
            "description": "For filtering: class type of the referred Place object"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "place.role",
            "description": "For filtering: Role of the place (for instance: 'home delivery', 'shop retrieval')"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "serviceLevelAgreement.name",
            "description": "For filtering: Name of the service level agreement"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "serviceLevelAgreement.@referredType",
            "description": "For filtering: class type of referred Service Level Agreement"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "productSpecification.version",
            "description": "For filtering: Version of the product specification"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "productSpecification.name",
            "description": "For filtering: Name of the product specification"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "productSpecification.@referredType",
            "description": "For filtering: class type of referred Product Specification"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "channel.name",
            "description": "For filtering: Name of the channel"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "channel.@referredType",
            "description": "For filtering: (Class) type of the referred channel like DistributionChannel, SalesChannel and so on"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "serviceCandidate.version",
            "description": "For filtering: Version of the service candidate"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "serviceCandidate.name",
            "description": "For filtering: Name of the service candidate"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "serviceCandidate.@referredType",
            "description": "For filtering: The Class type of  referred Service Candidate"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "attachment.type",
            "description": "For filtering: Attachment type such as video, picture"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "attachment.url",
            "description": "For filtering: Uniform Resource Locator, is a web page address (a subset of URI)"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "attachment.mimeType",
            "description": "For filtering: Attachment mime type such as extension file for video, picture and document"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "attachment.@type",
            "description": "For filtering: the class type of the Attachment"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "attachment.@baseType",
            "description": "For filtering: The immediate base class type of the attachment"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "attachment.@schemaLocation",
            "description": "For filtering: A link to the schema describing this attachment entity"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "category.version",
            "description": "For filtering: Category version"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "category.name",
            "description": "For filtering: Name of the category"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "category.@referredType",
            "description": "For filtering: the class type of the referred Category"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "resourceCandidate.version",
            "description": "For filtering: Version of the resource candidate"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "resourceCandidate.name",
            "description": "For filtering: Name of the resource candidate"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "resourceCandidate.@referredType",
            "description": "For filtering: The Class type of referred Resource Candidate"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "productOfferingTerm.name",
            "description": "For filtering: Name of the productOfferingTerm"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "productOfferingTerm.@type",
            "description": "For filtering: The class type of ProductOfferingTerm"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "productOfferingTerm.@schemaLocation",
            "description": "For filtering: A link to the schema describing this product offering term"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "marketSegment.name",
            "description": "For filtering: Name of the market segment"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "marketSegment.@referredType",
            "description": "For filtering: (Class) type of the referred market segment"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "productOfferingPrice.name",
            "description": "For filtering: Name of the productOfferingPrice"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "productOfferingPrice.priceType",
            "description": "For filtering: Indicates the price type: recurring, one time, usage"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "productOfferingPrice.unitOfMeasure",
            "description": "For filtering: Could be minutes, GB..."
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "productOfferingPrice.recurringChargePeriod",
            "description": "For filtering: Could be month, week..."
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "productOfferingPrice.version",
            "description": "For filtering: ProductOffering version"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "productOfferingPrice.@type",
            "description": "For filtering: The class type of the product offering price"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "productOfferingPrice.@baseType",
            "description": "For filtering: the immediate base class of product offering price"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "productOfferingPrice.@schemaLocation",
            "description": "For filtering: hyperlink reference to the product offering price schema"
          },
          {
            "type": "boolean",
            "required": false,
            "in": "query",
            "name": "productOfferingPrice.isBundle",
            "description": "For filtering: a flag indicating if this product offering price is bundle (composite) or not"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "agreement.name",
            "description": "For filtering: Name of the agreement"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "agreement.@referredType",
            "description": "For filtering: class type of the referred Agreement"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "bundledProductOffering.lifecycleStatus",
            "description": "For filtering: Used to indicate the current lifecycle status"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "bundledProductOffering.name",
            "description": "For filtering: Name of the BundledProductOffering"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "prodSpecCharValueUse.name",
            "description": "For filtering: Name of the associated productSpecCharacteristic"
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "prodSpecCharValueUse.valueType",
            "description": "For filtering: A kind of value that the characteristic can take on, such as numeric, text and so forth"
          },
          {
            "type": "integer",
            "required": false,
            "in": "query",
            "name": "prodSpecCharValueUse.minCardinality",
            "description": "For filtering: The minimum number of instances a CharacteristicValue can take on. For example, zero to five phone numbers in a group calling plan, where zero is the value for the minCardinality."
          },
          {
            "type": "integer",
            "required": false,
            "in": "query",
            "name": "prodSpecCharValueUse.maxCardinality",
            "description": "For filtering: The maximum number of instances a CharacteristicValue can take on. For example, zero to five phone numbers in a group calling plan, where five is the value for the maxCardinality."
          },
          {
            "type": "string",
            "required": false,
            "in": "query",
            "name": "priceContext.place.id",
            "description": "For filtering: Identifier of the place for which product offering has prices available."
          },
          {
            "name": "facetSearchOption.id",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "description": "For filtering by facet options. The identifier of the facet search option."
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "required": false,
            "in": "query",
            "name": "sort",
            "description": "The options the product offerings can be sorted by.",
            "collectionFormat": "multi"
          },
          {
            "name": "priceContext.relatedParty.id",
            "in": "query",
            "description": "For filtering: Identifier of the related party for which the price applies.",
            "required": false,
            "type": "string"
          },
          {
            "type": "integer",
            "required": false,
            "in": "query",
            "name": "offset",
            "description": "Requested index for start of resources to be provided in response requested by client."
          },
          {
            "type": "integer",
            "required": false,
            "in": "query",
            "name": "limit",
            "description": "Requested number of resources to be provided in response requested by client."
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "schema": {
              "items": {
                "$ref": "#/definitions/ProductOffering"
              },
              "type": "array"
            }
          },
          "206": {
            "description": "Partial Content",
            "schema": {
              "items": {
                "$ref": "#/definitions/ProductOffering"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/productOffering/{id}": {
      "get": {
        "operationId": "retrieveProductOffering",
        "summary": "Retrieves a 'ProductOffering' by Id",
        "tags": [
          "productOffering"
        ],
        "parameters": [
          {
            "required": true,
            "type": "string",
            "name": "id",
            "in": "path",
            "description": "Identifier of the Product Offering"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Response configuration. This is the list of fields that should be returned in the response body",
            "required": false,
            "type": "string"
          },
          {
            "name": "baseSiteId",
            "in": "query",
            "description": "Identifier of the BaseSite",
            "required": false,
            "type": "string"
          },
          {
            "name": "priceContext.processType.id",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "description": "For filtering by the process type of the product offering price."
          },
          {
            "name": "priceContext.place.id",
            "in": "query",
            "description": "Identifier of the place for which product offering has prices available",
            "required": false,
            "type": "string"
          },
          {
            "name": "priceContext.relatedParty.id",
            "in": "query",
            "description": "For filtering: Identifier of the related party for which the price applies.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "schema": {
              "items": {
                "$ref": "#/definitions/ProductOffering"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "security": [
          {
            "oauth2_password": []
          },
          {
            "oauth2_client_credentials": []
          }
        ]
      }
    },
    "/productOfferingPrice/{id}": {
      "get": {
        "operationId": "retrieveProductOfferingPrice",
        "summary": "Retrieves a ProductOfferingPrice by ID",
        "description": "This operation retrieves a ProductOfferingPrice entity. Attribute selection is enabled for all first level attributes.",
        "tags": [
          "productOfferingPrice"
        ],
        "parameters": [
          {
            "name": "id",
            "description": "Identifier of the ProductOfferingPrice",
            "required": true,
            "type": "string",
            "in": "path"
          },
          {
            "name": "fields",
            "description": "Comma-separated properties to provide in response",
            "required": false,
            "type": "string",
            "in": "query"
          },
          {
            "name": "baseSiteId",
            "in": "query",
            "description": "Identifier of the BaseSite",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ProductOfferingPrice"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/product/{id}": {
            "get": {
                "operationId": "retrieveProduct",
                "summary": "Retrieves a Product by ID",
                "description": "This operation retrieves a Product entity. Attribute selection is enabled for all first level attributes.",
                "tags": [
                    "product"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "description": "Identifier of the Product",
                        "required": true,
                        "type": "string",
                        "in": "path"
                    },
                    {
                        "name": "fields",
                        "description": "Comma-separated properties to provide in response",
                        "required": false,
                        "type": "string",
                        "in": "query"
                    },
                    {
            			"name": "baseSiteId",
            			"in": "query",
            			"description": "Identifier of the BaseSite",
            			"required": false,
            			"type": "string"
          			}
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/Product"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
            }
  },
  "definitions": {
    "ProductOffering": {
      "discriminator": "@type",
      "type": "object",
      "description": "Represents entities that are orderable from the provider of the catalog, this resource includes pricing information.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier of the ProductOffering."
        },
        "href": {
          "type": "string",
          "description": "Reference of the ProductOffering."
        },
        "name": {
          "type": "string",
          "description": "Name of the ProductOffering."
        },
        "description": {
          "type": "string",
          "description": "Description of the ProductOffering."
        },
        "isBundle": {
          "type": "boolean",
          "description": "isBundle determines whether a productOffering represents a simple product Offering (false), or a bundled product offering(true).If false, then a productSpecification will be returned, but the bundledProductOfferings will be absent or empty and vice-versa if isBundle is true.",
          "example": false
        },
        "lastUpdate": {
          "type": "string",
          "format": "date-time",
          "description": "Date and time of the last update."
        },
        "lifecycleStatus": {
          "type": "string",
          "description": "Used to indicate the current product offering approval status (approved/check/unapproved)."
        },
        "validFor": {
          "$ref": "#/definitions/TimePeriod",
          "description": "The period for which the productOffering is valid (online date - offline date)."
        },
        "version": {
          "type": "string",
          "description": "Not Sent.Product offering version."
        },
        "@type": {
          "type": "string",
          "description": "Class type of the product offering"
        },
        "@baseType": {
          "type": "string",
          "description": "Immediate base (class) type of the product offering"
        },
        "@schemaLocation": {
          "type": "string",
          "description": "A link to the schema describing this product offering"
        },
        "isSellable": {
          "type": "boolean",
          "description": "A flag indicating if this product offering can be sold as stand-alone or not. If this flag is false it indicates that the offer can only be sold within a bundled product offering."
        },
        "place": {
          "type": "array",
          "description": "Not Sent",
          "items": {
            "$ref": "#/definitions/PlaceRef"
          }
        },
        "serviceLevelAgreement": {
          "description": "Not Sent",
          "$ref": "#/definitions/SLARef"
        },
        "productSpecification": {
          "$ref": "#/definitions/ProductSpecificationRef"
        },
        "channel": {
          "type": "array",
          "description": "Not Sent",
          "items": {
            "$ref": "#/definitions/ChannelRef"
          }
        },
        "serviceCandidate": {
          "description": "Not Sent",
          "$ref": "#/definitions/ServiceCandidateRef"
        },
        "attachment": {
          "type": "array",
          "description": "Media items configured for a product offering (images, videos).",
          "items": {
            "$ref": "#/definitions/Attachment"
          }
        },
        "category": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CategoryRef"
          }
        },
        "resourceCandidate": {
          "description": "Not Sent",
          "$ref": "#/definitions/ResourceCandidateRef"
        },
        "productOfferingTerm": {
          "type": "array",
          "description": "not sent",
          "items": {
            "$ref": "#/definitions/ProductOfferingTerm"
          }
        },
        "marketSegment": {
          "type": "array",
          "description": "Not Sent.",
          "items": {
            "$ref": "#/definitions/MarketSegmentRef"
          }
        },
        "priceContext": {
          "type": "array",
          "description": "Price context list.",
          "items": {
            "$ref": "#/definitions/PriceContext"
          }
        },
        "productOfferingPrice": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ProductOfferingPrice"
          }
        },
        "agreement": {
          "type": "array",
          "description": "Not Sent",
          "items": {
            "$ref": "#/definitions/AgreementRef"
          }
        },
        "bundledProductOffering": {
          "type": "array",
          "description": "List of children product offering reference (sent only for bundled product offerings).",
          "items": {
            "$ref": "#/definitions/BundledProductOffering"
          }
        },
        "parentBundleProductOffering": {
          "type": "array",
          "description": "A list of BundledProductOffering representing all parents of the offering.",
          "items": {
            "$ref": "#/definitions/BundledProductOffering"
          }
        },
        "prodSpecCharValueUse": {
          "type": "array",
          "description": "The list of Product Specification Characteristic Values defined for the ProductOffering.",
          "items": {
            "$ref": "#/definitions/ProdSpecCharValueUse"
          }
        },
        "classificationAttributeValueUse": {
          "type": "array",
          "description": "The list of classification attributes defined for the ProductOffering.",
          "items": {
            "$ref": "#/definitions/ProdSpecCharValueUse"
          }
        },
        "offeringGroup": {
          "type": "array",
          "description": "List of containing offering groups (sent only for BundleProductOfferings).",
          "items": {
            "$ref": "#/definitions/OfferingGroup"
          }
        },
        "baseProduct": {
          "$ref": "#/definitions/ProductOfferingRef",
          "description": "Base product of a variant."
        },
        "variantProductOffering": {
          "type": "array",
          "description": "List of variants of the product offering.",
          "items": {
            "$ref": "#/definitions/ProductOfferingRef"
          }
        },
        "variantOption": {
          "description": "Variant options, in case of a variant product offering.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/VariantOption"
          }
        },
        "rating": {
          "description": "Rating of the product offering.",
          "type": "string"
        }
      }
    },
    "ProductOfferingPriceRef": {
      "type": "object",
      "description": "ProductPriceOffering reference. An amount, usually of money, that is asked for or allowed when a ProductOffering is bought, rented, or leased.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Reference id of the ProductOfferingPrice."
        },
        "href": {
          "type": "string",
          "description": "Reference of the ProductOfferingPrice."
        },
        "name": {
          "type": "string",
          "description": "Name of the ProductOfferingPrice."
        },
        "@referredType": {
          "type": "string",
          "description": "(Class) type of the referred ProductOfferingPrice"
        },
        "@schemaLocation": {
          "type": "string",
          "description": "Hyperlink reference to the schema describing this resource"
        }
      }
    },
    "ProductOfferingPrice": {
      "discriminator": "@type",
      "type": "object",
      "description": "Is based on both the basic cost to develop and produce products and the enterprises policy on revenue targets. This price may be further revised through discounting (productOfferPriceAlteration). The price, applied for a productOffering may also be influenced by the productOfferingTerm, the customer selected, eg: a productOffering can be offered with multiple terms, like commitment periods for the contract. The price may be influenced by this productOfferingTerm. A productOffering may be cheaper with a 24 month commitment than with a 12 month commitment.",
      "properties": {
        "id": {
          "type": "string",
          "description": "unique id of this resource"
        },
        "href": {
          "type": "string",
          "description": "Reference of the ProductOfferingPrice"
        },
        "description": {
          "type": "string",
          "description": "Description of the productOfferingPrice"
        },
        "priceEvent": {
          "type": "string",
          "description": "The price event"
        },
        "isBundle": {
          "type": "boolean",
          "description": "A flag indicating if this ProductOfferingPrice is composite (bundle) or not"
        },
        "lastUpdate": {
          "type": "string",
          "format": "date-time",
          "description": "not sent"
        },
        "lifecycleStatus": {
          "type": "string",
          "description": "not sent"
        },
        "name": {
          "type": "string",
          "description": "Name of the productOfferingPrice"
        },
        "percentage": {
          "type": "number",
          "format": "float",
          "description": "Percentage to apply for ProdOfferPriceAlteration (Discount)."
        },
        "priceType": {
          "type": "string",
          "description": "A category that describes the price, such as recurring, discount, allowance, penalty, and so forth."
        },
        "recurringChargePeriodLength": {
          "type": "integer",
          "description": "not sent"
        },
        "recurringChargePeriodType": {
          "type": "string",
          "description": "not sent"
        },
        "version": {
          "type": "string",
          "description": "not sent"
        },
        "bundledPopRelationship": {
          "type": "array",
          "description": "not sent",
          "items": {
            "$ref": "#/definitions/BundledPopRelationship"
          }
        },
        "constraint": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ConstraintRef"
          },
          "description": "not sent"
        },
        "place": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PlaceRef"
          },
          "description": "not sent"
        },
        "popRelationship": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PopRelationship"
          },
          "description": "not sent"
        },
        "bundledPop": {
          "type": "array",
          "description": "Represents the contained prices (charges), for a composed price.",
          "items": {
            "$ref": "#/definitions/ProductOfferingPrice"
          }
        },
        "price": {
          "$ref": "#/definitions/Money",
          "description": "The amount of money that characterizes the price."
        },
        "pricingLogicAlgorithm": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PricingLogicAlgorithm"
          },
          "description": "not sent"
        },
        "prodSpecCharValueUse": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ProdSpecCharValueUse"
          },
          "description": "not sent"
        },
        "productOfferingTerm": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ProductOfferingTerm"
          },
          "description": "not sent"
        },
        "tax": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Tax"
          },
          "description": "not sent"
        },
        "unitOfMeasure": {
          "$ref": "#/definitions/Quantity",
          "description": "A number and unit representing how many (for instance 1 dozen) of an ProductOffering is available at the offered price. Its meaning depends on the priceType. It could be a price, a rate, or a discount."
        },
        "usageUnit": {
          "description": "Usage unit applicable for the price.",
          "$ref": "#/definitions/UsageUnit"
        },
        "cycle": {
          "$ref": "#/definitions/Cycle",
          "description": "Represents the start time, and end time of the recurring cycle (the first 3 months) . If empty, the cycle is the entire recurring period. "
        },
        "validFor": {
          "$ref": "#/definitions/TimePeriod",
          "description": "not sent"
        },
        "tierStart": {
          "type": "integer",
          "format": "int32",
          "description": "Tier start of usage charge."
        },
        "tierEnd": {
          "type": "integer",
          "format": "int32",
          "description": "Tier end of usage charge."
        },
        "usageChargeType": {
          "type": "string",
          "description": "The type of the usage charge"
        },
        "usageSpecification": {
          "$ref": "#/definitions/UsageSpecificationRef"
        },
        "@schemaLocation": {
          "type": "string",
          "description": "hyperlink reference to the schema describing this resource"
        },
        "@type": {
          "type": "string",
          "description": "The class type of this Product offering price"
        }
      }
    },
    "PriceContext": {
      "discriminator": "@type",
      "type": "object",
      "description": "Represents the context in which the product offering price is available to customer.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Price context's identifier."
        },
        "poRelationship": {
          "type": "array",
          "description": "Represents the product offering affected, or required by the price. This field is used for bundle product offerings.",
          "items": {
            "$ref": "#/definitions/PoRelationshipRef"
          }
        },
        "isPriceOverride": {
          "type": "boolean",
          "description": "A flag indicating if the price is defined directly for a simple product offering, or for a product offering bought as part of a bundled product offering.",
          "example": false
        },
        "productOfferingPrice": {
          "$ref": "#/definitions/ProductOfferingPriceRef",
          "description": "Product offering price reference."
        },
        "validFor": {
          "$ref": "#/definitions/TimePeriod",
          "description": "The period for which the productOfferingPrice is valid."
        },
        "productOfferingTerm": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ProductOfferingTerm"
          }
        },
        "processType": {
          "type": "array",
          "description": "Represents the purchasing flows for which the price is applicable.",
          "items": {
            "$ref": "#/definitions/ProcessType"
          }
        },
        "channel": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ChannelRef"
          }
        },
        "place": {
          "type": "array",
          "description": "Place references where the products are sold or delivered.",
          "items": {
            "$ref": "#/definitions/PlaceRef"
          }
        },
        "priority": {
          "type": "integer",
          "description": "The priority."
        },
        "relatedParty": {
          "$ref": "#/definitions/RelatedPartyRef"
        }
      }
    },
    "IndexedProductOffering": {
      "description": "IndexedProductOffering subtype of the ProductOffering entity.",
      "allOf": [
        {
          "$ref": "#/definitions/ProductOffering"
        },
        {
          "type": "object",
          "properties": {
            "facetSearchOption": {
              "type": "array",
              "description": "Represents the facet search value field name and value used for filtering.",
              "items": {
                "$ref": "#/definitions/FacetSearchOption"
              }
            },
            "isInStock": {
              "type": "boolean",
              "description": "Flag to indicate if the product is in stock or not."
            }
          }
        }
      ]
    },
    "BundledProductOffering": {
      "type": "object",
      "description": "A type of ProductOffering that belongs to a grouping of ProductOfferings made available to the market. It inherits of all attributes of ProductOffering.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier of the BundledProductOffering"
        },
        "href": {
          "type": "string",
          "description": "Unique reference of the BundledProductOffering"
        },
        "lifecycleStatus": {
          "type": "string",
          "description": "Used to indicate the current lifecycle status"
        },
        "name": {
          "type": "string",
          "description": "Name of the BundledProductOffering"
        },
        "bundledProductOfferingOption": {
          "$ref": "#/definitions/BundledProductOfferingOption",
          "description": "A set of numbers that specifies the lower and upper limits for a ProductOffering that can be procured as part of the related BundledProductOffering. Values can range from 0 to unbounded."
        },
        "@baseType": {
          "type": "string",
          "description": "When sub-classing, this defines the super-class"
        },
        "@schemaLocation": {
          "type": "string",
          "format": "uri",
          "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
        },
        "@type": {
          "type": "string",
          "description": "When sub-classing, this defines the sub-class entity name"
        }
      }
    },
    "BundledProductOfferingOption": {
      "type": "object",
      "description": "A set of numbers that specifies the lower and upper limits for a ProductOffering that can be procured as part of the related BundledProductOffering. Values can range from 0 to unbounded",
      "properties": {
        "numberRelOfferDefault": {
          "type": "integer",
          "description": "Default number of product offerings that should be procured as part of the related BundledProductOffering"
        },
        "numberRelOfferLowerLimit": {
          "type": "integer",
          "description": "Lower limit for a product offering that can be procured as part of the related BundledProductOffering"
        },
        "numberRelOfferUpperLimit": {
          "type": "integer",
          "description": "Upper limit for a product offering that can be procured as part of the related BundledProductOffering"
        },
        "@baseType": {
          "type": "string",
          "description": "When sub-classing, this defines the super-class"
        },
        "@schemaLocation": {
          "type": "string",
          "format": "uri",
          "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
        },
        "@type": {
          "type": "string",
          "description": "When sub-classing, this defines the sub-class entity name"
        }
      }
    },
    "AgreementItemRef": {
            "type": "object",
            "description": "Agreement reference. An agreement represents a contract or arrangement, either written or verbal and sometimes enforceable by law, such as a service level agreement or a customer price agreement. An agreement involves a number of other business entities, such as products, services, and resources and/or their specifications.",
            "required": [
                "id"
            ],
            "properties": {
                "id": {
                    "type": "string",
                    "description": "Unique identifier of a related entity."
                },
                "href": {
                    "type": "string",
                    "description": "Reference of the related entity."
                },
                "agreementItemId": {
                    "type": "string",
                    "description": "Identifier of the agreement"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the related entity."
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class entity name"
                },
                "@referredType": {
                    "type": "string",
                    "description": "The actual type of the target instance when needed for disambiguation."
                }
            }
        },
	"RelatedProductOrderItem": {
            "type": "object",
            "description": "RelatedProductOrderItem (ProductOrder item) .The product order item which triggered product creation/change/termination.",
            "required": [
                "orderItemId",
                "productOrderId"
            ],
            "properties": {
                "orderItemAction": {
                    "type": "string",
                    "description": "Action of the order item for this product"
                },
                "orderItemId": {
                    "type": "string",
                    "description": "Identifier of the order item where the product was managed"
                },
                "productOrderHref": {
                    "type": "string",
                    "description": "Reference of the related entity."
                },
                "productOrderId": {
                    "type": "string",
                    "description": "Unique identifier of a related entity."
                },
                "role": {
                    "type": "string",
                    "description": "role of the product order item for this product"
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class entity name"
                },
                "@referredType": {
                    "type": "string",
                    "description": "The actual type of the target instance when needed for disambiguation."
                }
            }
        },
    "ResourceRef": {
            "type": "object",
            "required": [
                "id"
            ],
            "properties": {
                "id": {
                    "type": "string",
                    "description": "Unique identifier of a related entity."
                },
                "href": {
                    "type": "string",
                    "description": "Reference of the related entity."
                },
                "name": {
                    "type": "string",
                    "description": "Name of the resource"
                },
                "value": {
                    "type": "string",
                    "description": "The resource value that can be used to identify a resource with a public key (e.g.: a tel nr, an msisdn)"
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class entity name"
                },
                "@referredType": {
                    "type": "string",
                    "description": "The actual type of the target instance when needed for disambiguation."
                }
            }
        },
    "ServiceRef": {
            "type": "object",
            "description": "Service reference, for when Service is used by other entities",
            "required": [
                "id"
            ],
            "properties": {
                "id": {
                    "type": "string",
                    "description": "Unique identifier of a related entity."
                },
                "href": {
                    "type": "string",
                    "description": "Reference of the related entity."
                },
                "name": {
                    "type": "string",
                    "description": "Name of the related entity."
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class entity name"
                },
                "@referredType": {
                    "type": "string",
                    "description": "The actual type of the target instance when needed for disambiguation."
                }
            }
        },
    "Product": {
      "description": "A Product represents the subscription of a ProductOffering by a Party playing a PartyRole, such as a Customer.  For example, Jean has subscribed to company ABC�s internet ProductOffering.\nThe association between ProductSpecification and Product allows ProductSpecification, to be instantiated as Product and related to customers or other involved parties.",
      "type": "object",
      "properties": {
        "id": {
          "description": "Unique identifier of the product",
          "type": "string"
        },
        "href": {
          "description": "Reference of the product",
          "type": "string"
        },
        "description": {
          "description": "The description of the product. It could be copied from the description of the Product Offering.",
          "type": "string"
        },
        "isBundle": {
          "description": "If true, the product is a ProductBundle which is an instantiation of a BundledProductOffering. If false, the product is a ProductComponent which is an instantiation of a SimpleProductOffering",
          "type": "boolean"
        },
        "isCustomerVisible": {
          "description": "If true, the product is visible by the customer",
          "type": "boolean"
        },
        "name": {
          "description": "The name of the product. It could be the same as the name of the Product Offering",
          "type": "string"
        },
        "orderDate": {
          "description": "The date from which the product starts",
          "type": "string",
          "format": "date-time"
        },
        "productSerialNumber": {
          "description": "Serial number for the product. This is typically applicable to tangible products e.g. Broadband Router.",
          "type": "string"
        },
        "startDate": {
          "description": "The date from which the product starts",
          "type": "string",
          "format": "date-time"
        },
        "terminationDate": {
          "description": "The date when the product was terminated. Not applicable to active products",
          "type": "string",
          "format": "date-time"
        },
        "agreement": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AgreementItemRef"
          }
        },
        "billingAccount": {
          "items": {
            "$ref": "#/definitions/BillingAccountRef"
          }
        },
        "place": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Place"
          }
        },
        "product": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ProductRef"
          }
        },
        "productCharacteristic": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ProductCharacteristic"
          }
        },
        "productOffering": {
          "$ref": "#/definitions/ProductOfferingRef"
        },
        "productOrderItem": {
    	  "type": "array",
          "items": {
            "$ref": "#/definitions/RelatedProductOrderItem"
          }
        },
        "productPrice": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ProductPrice"
          }
        },
        "productRelationship": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ProductRelationship"
          }
        },
        "productSpecification": {
          "$ref": "#/definitions/ProductSpecification"
        },
        "productTerm": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ProductTerm"
          }
        },
        "realizingResource": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ResourceRef"
          }
        },
        "realizingService": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ServiceRef"
          }
        },
        "relatedParty": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/RelatedPartyRef"
          }
        },
        "status": {
          "$ref": "#/definitions/StatusType"
        },
        "@baseType": {
          "description": "Indicates the base type of the resource. Here can be 'Product'",
          "type": "string"
        },
        "@type": {
          "description": "Indicated the type of resource.",
          "type": "string"
        },
        "@schemaLocation": {
          "description": "A link to the schema describing this REST resource.",
          "type": "string"
        }
      }
    }
  }
}