<?xml version="1.0" encoding="UTF-8"?>
<!--
 Copyright (c) 2021 SAP SE or an SAP affiliate company. All rights reserved.
-->
<!-- WARNING: This is the Spring WEB configuration file. If you want to replace items or managers you have to do this from the extensions 
	core configuration file (billingaccounttmfwebservices/resources/billingaccounttmfwebservices-spring.xml) -->

<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
           http://www.springframework.org/schema/beans/spring-beans.xsd
           http://www.springframework.org/schema/context
			  http://www.springframework.org/schema/context/spring-context.xsd">

	<context:annotation-config/>

	<import resource="config/commons/cache-config-spring.xml"/>
	<import resource="config/commons/security-spring.xml"/>
	<import resource="config/commons/error-config-spring.xml"/>
	<import resource="config/commons/field-mapping-spring.xml"/>
	<import resource="config/v1-web-spring.xml"/>

	<bean id="objectMapper" name="objectMapper"
		  class="com.fasterxml.jackson.databind.ObjectMapper" />

	<bean id="messageSource" class="org.springframework.context.support.ReloadableResourceBundleMessageSource">
		<property name="basenames">
			<list>
				<value>/WEB-INF/messages/messages</value>
			</list>
		</property>
		<property name="defaultEncoding" value="UTF-8" />
	</bean>

	<!-- Spring managed FilterChain for hybris Filter stack -->
	<bean id="billingaccounttmfwebservicesPlatformFilterChain" class="de.hybris.platform.servicelayer.web.PlatformFilterChain">
		<constructor-arg>
			<list>
				<!-- Filter that catches and resolves exceptions thrown from other filters. Can be uncommented if you need such functionality -->
				<!-- <ref bean="exceptionTranslationFilter" /> -->

				<ref bean="log4jFilter" />
				<ref bean="tenantActivationFilter" />
				<ref bean="corsFilter" />
				<!-- This filter creates new jalo session and close it after request is handled. -->
				<ref bean="restSessionFilter" />
				<!-- If you want to track user session:
					- uncomment filter below
					- comment or remove restSessionFilter above
					- comment or remove SessionHindingRequestFilter in web.xml -->
				<!-- ref bean="sessionFilter" /-->

				<!-- Security -->
				<ref bean="springSecurityFilterChain" />
				<!-- Other -->
				<ref bean="baSessionAttributesFilter"/>
			</list>
		</constructor-arg>
	</bean>

	<bean id="restSessionFilter" class="de.hybris.platform.webservicescommons.filter.RestSessionFilter">
		<property name="sessionService" ref="sessionService" />
	</bean>

	<!-- Filter that catches and resolves exceptions thrown from other filters. Can be added to filter chain if you need such functionality -->
	<alias alias="exceptionTranslationFilter" name="defaultExceptionTranslationFilter" />
	<bean id="defaultExceptionTranslationFilter" class="de.hybris.platform.webservicescommons.filter.ExceptionTranslationFilter">
		<property name="restHandlerExceptionResolver" ref="restHandlerExceptionResolver" />
	</bean>

	<bean id="baSessionAttributesFilter"
		  class="de.hybris.platform.billingaccounttmfwebservices.v1.filters.BaSessionAttributesFilter">
		<constructor-arg name="contextInformationLoader" ref="baWsContextInformationLoader"/>
	</bean>

	<alias name="defaultWsContextInformationLoader" alias="baWsContextInformationLoader"/>
	<bean id="defaultWsContextInformationLoader"
		  class="de.hybris.platform.billingaccounttmfwebservices.v1.context.impl.BaDefaultContextInformationLoader">
		<constructor-arg name="commonI18NService" ref="commonI18NService"/>
		<constructor-arg name="commerceCommonI18NService" ref="commerceCommonI18NService"/>
	</bean>

	<alias name="defaultUserValidator" alias="userValidator"/>
	<bean id="defaultUserValidator" class="de.hybris.platform.billingaccounttmfwebservices.v1.security.BaUserValidator">
		<constructor-arg name="userService" ref="userService"/>
		<constructor-arg name="billingAccountService" ref="baBillingAccountService"/>
	</bean>

	<alias name="defaultBaCreateBillingAccountValidator" alias="baCreateBillingAccountValidator"/>
	<bean id="defaultBaCreateBillingAccountValidator"
		  class="de.hybris.platform.billingaccounttmfwebservices.v1.validators.BaCreateBillingAccountValidator">
		<constructor-arg name="baGenericService" ref="baGenericService"/>
	</bean>

    <!-- Event Validators-->
    <alias name="defaultBaUpdateEventValidator" alias="baUpdateEventValidator"/>
    <bean id="defaultBaUpdateEventValidator"
          class="de.hybris.platform.billingaccounttmfwebservices.v1.validators.BaUpdateEventValidator"/>

    <alias name="defaultBaStateChangeEventValidator" alias="baStateChangeEventValidator"/>
    <bean id="defaultBaStateChangeEventValidator"
          class="de.hybris.platform.billingaccounttmfwebservices.v1.validators.BaStateChangeEventValidator"/>

</beans>
